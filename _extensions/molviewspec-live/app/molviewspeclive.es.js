function v2(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var ud = { exports: {} }, vt = {};
/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ny;
function S2() {
  if (Ny) return vt;
  Ny = 1;
  var n = Symbol.for("react.transitional.element"), t = Symbol.for("react.portal"), e = Symbol.for("react.fragment"), i = Symbol.for("react.strict_mode"), s = Symbol.for("react.profiler"), o = Symbol.for("react.consumer"), u = Symbol.for("react.context"), c = Symbol.for("react.forward_ref"), h = Symbol.for("react.suspense"), p = Symbol.for("react.memo"), m = Symbol.for("react.lazy"), O = Symbol.iterator;
  function y(k) {
    return k === null || typeof k != "object" ? null : (k = O && k[O] || k["@@iterator"], typeof k == "function" ? k : null);
  }
  var S = {
    isMounted: function() {
      return !1;
    },
    enqueueForceUpdate: function() {
    },
    enqueueReplaceState: function() {
    },
    enqueueSetState: function() {
    }
  }, x = Object.assign, w = {};
  function C(k, $, tt) {
    this.props = k, this.context = $, this.refs = w, this.updater = tt || S;
  }
  C.prototype.isReactComponent = {}, C.prototype.setState = function(k, $) {
    if (typeof k != "object" && typeof k != "function" && k != null)
      throw Error(
        "takes an object of state variables to update or a function which returns an object of state variables."
      );
    this.updater.enqueueSetState(this, k, $, "setState");
  }, C.prototype.forceUpdate = function(k) {
    this.updater.enqueueForceUpdate(this, k, "forceUpdate");
  };
  function M() {
  }
  M.prototype = C.prototype;
  function U(k, $, tt) {
    this.props = k, this.context = $, this.refs = w, this.updater = tt || S;
  }
  var W = U.prototype = new M();
  W.constructor = U, x(W, C.prototype), W.isPureReactComponent = !0;
  var Z = Array.isArray, N = { H: null, A: null, T: null, S: null, V: null }, Y = Object.prototype.hasOwnProperty;
  function R(k, $, tt, I, ut, St) {
    return tt = St.ref, {
      $$typeof: n,
      type: k,
      key: $,
      ref: tt !== void 0 ? tt : null,
      props: St
    };
  }
  function K(k, $) {
    return R(
      k.type,
      $,
      void 0,
      void 0,
      void 0,
      k.props
    );
  }
  function G(k) {
    return typeof k == "object" && k !== null && k.$$typeof === n;
  }
  function J(k) {
    var $ = { "=": "=0", ":": "=2" };
    return "$" + k.replace(/[=:]/g, function(tt) {
      return $[tt];
    });
  }
  var F = /\/+/g;
  function V(k, $) {
    return typeof k == "object" && k !== null && k.key != null ? J("" + k.key) : $.toString(36);
  }
  function at() {
  }
  function ot(k) {
    switch (k.status) {
      case "fulfilled":
        return k.value;
      case "rejected":
        throw k.reason;
      default:
        switch (typeof k.status == "string" ? k.then(at, at) : (k.status = "pending", k.then(
          function($) {
            k.status === "pending" && (k.status = "fulfilled", k.value = $);
          },
          function($) {
            k.status === "pending" && (k.status = "rejected", k.reason = $);
          }
        )), k.status) {
          case "fulfilled":
            return k.value;
          case "rejected":
            throw k.reason;
        }
    }
    throw k;
  }
  function ht(k, $, tt, I, ut) {
    var St = typeof k;
    (St === "undefined" || St === "boolean") && (k = null);
    var gt = !1;
    if (k === null) gt = !0;
    else
      switch (St) {
        case "bigint":
        case "string":
        case "number":
          gt = !0;
          break;
        case "object":
          switch (k.$$typeof) {
            case n:
            case t:
              gt = !0;
              break;
            case m:
              return gt = k._init, ht(
                gt(k._payload),
                $,
                tt,
                I,
                ut
              );
          }
      }
    if (gt)
      return ut = ut(k), gt = I === "" ? "." + V(k, 0) : I, Z(ut) ? (tt = "", gt != null && (tt = gt.replace(F, "$&/") + "/"), ht(ut, $, tt, "", function(Cn) {
        return Cn;
      })) : ut != null && (G(ut) && (ut = K(
        ut,
        tt + (ut.key == null || k && k.key === ut.key ? "" : ("" + ut.key).replace(
          F,
          "$&/"
        ) + "/") + gt
      )), $.push(ut)), 1;
    gt = 0;
    var ke = I === "" ? "." : I + ":";
    if (Z(k))
      for (var Wt = 0; Wt < k.length; Wt++)
        I = k[Wt], St = ke + V(I, Wt), gt += ht(
          I,
          $,
          tt,
          St,
          ut
        );
    else if (Wt = y(k), typeof Wt == "function")
      for (k = Wt.call(k), Wt = 0; !(I = k.next()).done; )
        I = I.value, St = ke + V(I, Wt++), gt += ht(
          I,
          $,
          tt,
          St,
          ut
        );
    else if (St === "object") {
      if (typeof k.then == "function")
        return ht(
          ot(k),
          $,
          tt,
          I,
          ut
        );
      throw $ = String(k), Error(
        "Objects are not valid as a React child (found: " + ($ === "[object Object]" ? "object with keys {" + Object.keys(k).join(", ") + "}" : $) + "). If you meant to render a collection of children, use an array instead."
      );
    }
    return gt;
  }
  function _(k, $, tt) {
    if (k == null) return k;
    var I = [], ut = 0;
    return ht(k, I, "", "", function(St) {
      return $.call(tt, St, ut++);
    }), I;
  }
  function P(k) {
    if (k._status === -1) {
      var $ = k._result;
      $ = $(), $.then(
        function(tt) {
          (k._status === 0 || k._status === -1) && (k._status = 1, k._result = tt);
        },
        function(tt) {
          (k._status === 0 || k._status === -1) && (k._status = 2, k._result = tt);
        }
      ), k._status === -1 && (k._status = 0, k._result = $);
    }
    if (k._status === 1) return k._result.default;
    throw k._result;
  }
  var nt = typeof reportError == "function" ? reportError : function(k) {
    if (typeof window == "object" && typeof window.ErrorEvent == "function") {
      var $ = new window.ErrorEvent("error", {
        bubbles: !0,
        cancelable: !0,
        message: typeof k == "object" && k !== null && typeof k.message == "string" ? String(k.message) : String(k),
        error: k
      });
      if (!window.dispatchEvent($)) return;
    } else if (typeof process == "object" && typeof process.emit == "function") {
      process.emit("uncaughtException", k);
      return;
    }
    console.error(k);
  };
  function dt() {
  }
  return vt.Children = {
    map: _,
    forEach: function(k, $, tt) {
      _(
        k,
        function() {
          $.apply(this, arguments);
        },
        tt
      );
    },
    count: function(k) {
      var $ = 0;
      return _(k, function() {
        $++;
      }), $;
    },
    toArray: function(k) {
      return _(k, function($) {
        return $;
      }) || [];
    },
    only: function(k) {
      if (!G(k))
        throw Error(
          "React.Children.only expected to receive a single React element child."
        );
      return k;
    }
  }, vt.Component = C, vt.Fragment = e, vt.Profiler = s, vt.PureComponent = U, vt.StrictMode = i, vt.Suspense = h, vt.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = N, vt.__COMPILER_RUNTIME = {
    __proto__: null,
    c: function(k) {
      return N.H.useMemoCache(k);
    }
  }, vt.cache = function(k) {
    return function() {
      return k.apply(null, arguments);
    };
  }, vt.cloneElement = function(k, $, tt) {
    if (k == null)
      throw Error(
        "The argument must be a React element, but you passed " + k + "."
      );
    var I = x({}, k.props), ut = k.key, St = void 0;
    if ($ != null)
      for (gt in $.ref !== void 0 && (St = void 0), $.key !== void 0 && (ut = "" + $.key), $)
        !Y.call($, gt) || gt === "key" || gt === "__self" || gt === "__source" || gt === "ref" && $.ref === void 0 || (I[gt] = $[gt]);
    var gt = arguments.length - 2;
    if (gt === 1) I.children = tt;
    else if (1 < gt) {
      for (var ke = Array(gt), Wt = 0; Wt < gt; Wt++)
        ke[Wt] = arguments[Wt + 2];
      I.children = ke;
    }
    return R(k.type, ut, void 0, void 0, St, I);
  }, vt.createContext = function(k) {
    return k = {
      $$typeof: u,
      _currentValue: k,
      _currentValue2: k,
      _threadCount: 0,
      Provider: null,
      Consumer: null
    }, k.Provider = k, k.Consumer = {
      $$typeof: o,
      _context: k
    }, k;
  }, vt.createElement = function(k, $, tt) {
    var I, ut = {}, St = null;
    if ($ != null)
      for (I in $.key !== void 0 && (St = "" + $.key), $)
        Y.call($, I) && I !== "key" && I !== "__self" && I !== "__source" && (ut[I] = $[I]);
    var gt = arguments.length - 2;
    if (gt === 1) ut.children = tt;
    else if (1 < gt) {
      for (var ke = Array(gt), Wt = 0; Wt < gt; Wt++)
        ke[Wt] = arguments[Wt + 2];
      ut.children = ke;
    }
    if (k && k.defaultProps)
      for (I in gt = k.defaultProps, gt)
        ut[I] === void 0 && (ut[I] = gt[I]);
    return R(k, St, void 0, void 0, null, ut);
  }, vt.createRef = function() {
    return { current: null };
  }, vt.forwardRef = function(k) {
    return { $$typeof: c, render: k };
  }, vt.isValidElement = G, vt.lazy = function(k) {
    return {
      $$typeof: m,
      _payload: { _status: -1, _result: k },
      _init: P
    };
  }, vt.memo = function(k, $) {
    return {
      $$typeof: p,
      type: k,
      compare: $ === void 0 ? null : $
    };
  }, vt.startTransition = function(k) {
    var $ = N.T, tt = {};
    N.T = tt;
    try {
      var I = k(), ut = N.S;
      ut !== null && ut(tt, I), typeof I == "object" && I !== null && typeof I.then == "function" && I.then(dt, nt);
    } catch (St) {
      nt(St);
    } finally {
      N.T = $;
    }
  }, vt.unstable_useCacheRefresh = function() {
    return N.H.useCacheRefresh();
  }, vt.use = function(k) {
    return N.H.use(k);
  }, vt.useActionState = function(k, $, tt) {
    return N.H.useActionState(k, $, tt);
  }, vt.useCallback = function(k, $) {
    return N.H.useCallback(k, $);
  }, vt.useContext = function(k) {
    return N.H.useContext(k);
  }, vt.useDebugValue = function() {
  }, vt.useDeferredValue = function(k, $) {
    return N.H.useDeferredValue(k, $);
  }, vt.useEffect = function(k, $, tt) {
    var I = N.H;
    if (typeof tt == "function")
      throw Error(
        "useEffect CRUD overload is not enabled in this build of React."
      );
    return I.useEffect(k, $);
  }, vt.useId = function() {
    return N.H.useId();
  }, vt.useImperativeHandle = function(k, $, tt) {
    return N.H.useImperativeHandle(k, $, tt);
  }, vt.useInsertionEffect = function(k, $) {
    return N.H.useInsertionEffect(k, $);
  }, vt.useLayoutEffect = function(k, $) {
    return N.H.useLayoutEffect(k, $);
  }, vt.useMemo = function(k, $) {
    return N.H.useMemo(k, $);
  }, vt.useOptimistic = function(k, $) {
    return N.H.useOptimistic(k, $);
  }, vt.useReducer = function(k, $, tt) {
    return N.H.useReducer(k, $, tt);
  }, vt.useRef = function(k) {
    return N.H.useRef(k);
  }, vt.useState = function(k) {
    return N.H.useState(k);
  }, vt.useSyncExternalStore = function(k, $, tt) {
    return N.H.useSyncExternalStore(
      k,
      $,
      tt
    );
  }, vt.useTransition = function() {
    return N.H.useTransition();
  }, vt.version = "19.1.0", vt;
}
var Py;
function em() {
  return Py || (Py = 1, ud.exports = S2()), ud.exports;
}
var Qt = em();
const ki = /* @__PURE__ */ v2(Qt);
var cd = { exports: {} }, no = {}, fd = { exports: {} }, hd = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ly;
function b2() {
  return Ly || (Ly = 1, function(n) {
    function t(_, P) {
      var nt = _.length;
      _.push(P);
      t: for (; 0 < nt; ) {
        var dt = nt - 1 >>> 1, k = _[dt];
        if (0 < s(k, P))
          _[dt] = P, _[nt] = k, nt = dt;
        else break t;
      }
    }
    function e(_) {
      return _.length === 0 ? null : _[0];
    }
    function i(_) {
      if (_.length === 0) return null;
      var P = _[0], nt = _.pop();
      if (nt !== P) {
        _[0] = nt;
        t: for (var dt = 0, k = _.length, $ = k >>> 1; dt < $; ) {
          var tt = 2 * (dt + 1) - 1, I = _[tt], ut = tt + 1, St = _[ut];
          if (0 > s(I, nt))
            ut < k && 0 > s(St, I) ? (_[dt] = St, _[ut] = nt, dt = ut) : (_[dt] = I, _[tt] = nt, dt = tt);
          else if (ut < k && 0 > s(St, nt))
            _[dt] = St, _[ut] = nt, dt = ut;
          else break t;
        }
      }
      return P;
    }
    function s(_, P) {
      var nt = _.sortIndex - P.sortIndex;
      return nt !== 0 ? nt : _.id - P.id;
    }
    if (n.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
      var o = performance;
      n.unstable_now = function() {
        return o.now();
      };
    } else {
      var u = Date, c = u.now();
      n.unstable_now = function() {
        return u.now() - c;
      };
    }
    var h = [], p = [], m = 1, O = null, y = 3, S = !1, x = !1, w = !1, C = !1, M = typeof setTimeout == "function" ? setTimeout : null, U = typeof clearTimeout == "function" ? clearTimeout : null, W = typeof setImmediate < "u" ? setImmediate : null;
    function Z(_) {
      for (var P = e(p); P !== null; ) {
        if (P.callback === null) i(p);
        else if (P.startTime <= _)
          i(p), P.sortIndex = P.expirationTime, t(h, P);
        else break;
        P = e(p);
      }
    }
    function N(_) {
      if (w = !1, Z(_), !x)
        if (e(h) !== null)
          x = !0, Y || (Y = !0, V());
        else {
          var P = e(p);
          P !== null && ht(N, P.startTime - _);
        }
    }
    var Y = !1, R = -1, K = 5, G = -1;
    function J() {
      return C ? !0 : !(n.unstable_now() - G < K);
    }
    function F() {
      if (C = !1, Y) {
        var _ = n.unstable_now();
        G = _;
        var P = !0;
        try {
          t: {
            x = !1, w && (w = !1, U(R), R = -1), S = !0;
            var nt = y;
            try {
              e: {
                for (Z(_), O = e(h); O !== null && !(O.expirationTime > _ && J()); ) {
                  var dt = O.callback;
                  if (typeof dt == "function") {
                    O.callback = null, y = O.priorityLevel;
                    var k = dt(
                      O.expirationTime <= _
                    );
                    if (_ = n.unstable_now(), typeof k == "function") {
                      O.callback = k, Z(_), P = !0;
                      break e;
                    }
                    O === e(h) && i(h), Z(_);
                  } else i(h);
                  O = e(h);
                }
                if (O !== null) P = !0;
                else {
                  var $ = e(p);
                  $ !== null && ht(
                    N,
                    $.startTime - _
                  ), P = !1;
                }
              }
              break t;
            } finally {
              O = null, y = nt, S = !1;
            }
            P = void 0;
          }
        } finally {
          P ? V() : Y = !1;
        }
      }
    }
    var V;
    if (typeof W == "function")
      V = function() {
        W(F);
      };
    else if (typeof MessageChannel < "u") {
      var at = new MessageChannel(), ot = at.port2;
      at.port1.onmessage = F, V = function() {
        ot.postMessage(null);
      };
    } else
      V = function() {
        M(F, 0);
      };
    function ht(_, P) {
      R = M(function() {
        _(n.unstable_now());
      }, P);
    }
    n.unstable_IdlePriority = 5, n.unstable_ImmediatePriority = 1, n.unstable_LowPriority = 4, n.unstable_NormalPriority = 3, n.unstable_Profiling = null, n.unstable_UserBlockingPriority = 2, n.unstable_cancelCallback = function(_) {
      _.callback = null;
    }, n.unstable_forceFrameRate = function(_) {
      0 > _ || 125 < _ ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : K = 0 < _ ? Math.floor(1e3 / _) : 5;
    }, n.unstable_getCurrentPriorityLevel = function() {
      return y;
    }, n.unstable_next = function(_) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var P = 3;
          break;
        default:
          P = y;
      }
      var nt = y;
      y = P;
      try {
        return _();
      } finally {
        y = nt;
      }
    }, n.unstable_requestPaint = function() {
      C = !0;
    }, n.unstable_runWithPriority = function(_, P) {
      switch (_) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          _ = 3;
      }
      var nt = y;
      y = _;
      try {
        return P();
      } finally {
        y = nt;
      }
    }, n.unstable_scheduleCallback = function(_, P, nt) {
      var dt = n.unstable_now();
      switch (typeof nt == "object" && nt !== null ? (nt = nt.delay, nt = typeof nt == "number" && 0 < nt ? dt + nt : dt) : nt = dt, _) {
        case 1:
          var k = -1;
          break;
        case 2:
          k = 250;
          break;
        case 5:
          k = 1073741823;
          break;
        case 4:
          k = 1e4;
          break;
        default:
          k = 5e3;
      }
      return k = nt + k, _ = {
        id: m++,
        callback: P,
        priorityLevel: _,
        startTime: nt,
        expirationTime: k,
        sortIndex: -1
      }, nt > dt ? (_.sortIndex = nt, t(p, _), e(h) === null && _ === e(p) && (w ? (U(R), R = -1) : w = !0, ht(N, nt - dt))) : (_.sortIndex = k, t(h, _), x || S || (x = !0, Y || (Y = !0, V()))), _;
    }, n.unstable_shouldYield = J, n.unstable_wrapCallback = function(_) {
      var P = y;
      return function() {
        var nt = y;
        y = P;
        try {
          return _.apply(this, arguments);
        } finally {
          y = nt;
        }
      };
    };
  }(hd)), hd;
}
var Uy;
function x2() {
  return Uy || (Uy = 1, fd.exports = b2()), fd.exports;
}
var dd = { exports: {} }, Ee = {};
/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Vy;
function w2() {
  if (Vy) return Ee;
  Vy = 1;
  var n = em();
  function t(h) {
    var p = "https://react.dev/errors/" + h;
    if (1 < arguments.length) {
      p += "?args[]=" + encodeURIComponent(arguments[1]);
      for (var m = 2; m < arguments.length; m++)
        p += "&args[]=" + encodeURIComponent(arguments[m]);
    }
    return "Minified React error #" + h + "; visit " + p + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  function e() {
  }
  var i = {
    d: {
      f: e,
      r: function() {
        throw Error(t(522));
      },
      D: e,
      C: e,
      L: e,
      m: e,
      X: e,
      S: e,
      M: e
    },
    p: 0,
    findDOMNode: null
  }, s = Symbol.for("react.portal");
  function o(h, p, m) {
    var O = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return {
      $$typeof: s,
      key: O == null ? null : "" + O,
      children: h,
      containerInfo: p,
      implementation: m
    };
  }
  var u = n.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
  function c(h, p) {
    if (h === "font") return "";
    if (typeof p == "string")
      return p === "use-credentials" ? p : "";
  }
  return Ee.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = i, Ee.createPortal = function(h, p) {
    var m = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
    if (!p || p.nodeType !== 1 && p.nodeType !== 9 && p.nodeType !== 11)
      throw Error(t(299));
    return o(h, p, null, m);
  }, Ee.flushSync = function(h) {
    var p = u.T, m = i.p;
    try {
      if (u.T = null, i.p = 2, h) return h();
    } finally {
      u.T = p, i.p = m, i.d.f();
    }
  }, Ee.preconnect = function(h, p) {
    typeof h == "string" && (p ? (p = p.crossOrigin, p = typeof p == "string" ? p === "use-credentials" ? p : "" : void 0) : p = null, i.d.C(h, p));
  }, Ee.prefetchDNS = function(h) {
    typeof h == "string" && i.d.D(h);
  }, Ee.preinit = function(h, p) {
    if (typeof h == "string" && p && typeof p.as == "string") {
      var m = p.as, O = c(m, p.crossOrigin), y = typeof p.integrity == "string" ? p.integrity : void 0, S = typeof p.fetchPriority == "string" ? p.fetchPriority : void 0;
      m === "style" ? i.d.S(
        h,
        typeof p.precedence == "string" ? p.precedence : void 0,
        {
          crossOrigin: O,
          integrity: y,
          fetchPriority: S
        }
      ) : m === "script" && i.d.X(h, {
        crossOrigin: O,
        integrity: y,
        fetchPriority: S,
        nonce: typeof p.nonce == "string" ? p.nonce : void 0
      });
    }
  }, Ee.preinitModule = function(h, p) {
    if (typeof h == "string")
      if (typeof p == "object" && p !== null) {
        if (p.as == null || p.as === "script") {
          var m = c(
            p.as,
            p.crossOrigin
          );
          i.d.M(h, {
            crossOrigin: m,
            integrity: typeof p.integrity == "string" ? p.integrity : void 0,
            nonce: typeof p.nonce == "string" ? p.nonce : void 0
          });
        }
      } else p == null && i.d.M(h);
  }, Ee.preload = function(h, p) {
    if (typeof h == "string" && typeof p == "object" && p !== null && typeof p.as == "string") {
      var m = p.as, O = c(m, p.crossOrigin);
      i.d.L(h, m, {
        crossOrigin: O,
        integrity: typeof p.integrity == "string" ? p.integrity : void 0,
        nonce: typeof p.nonce == "string" ? p.nonce : void 0,
        type: typeof p.type == "string" ? p.type : void 0,
        fetchPriority: typeof p.fetchPriority == "string" ? p.fetchPriority : void 0,
        referrerPolicy: typeof p.referrerPolicy == "string" ? p.referrerPolicy : void 0,
        imageSrcSet: typeof p.imageSrcSet == "string" ? p.imageSrcSet : void 0,
        imageSizes: typeof p.imageSizes == "string" ? p.imageSizes : void 0,
        media: typeof p.media == "string" ? p.media : void 0
      });
    }
  }, Ee.preloadModule = function(h, p) {
    if (typeof h == "string")
      if (p) {
        var m = c(p.as, p.crossOrigin);
        i.d.m(h, {
          as: typeof p.as == "string" && p.as !== "script" ? p.as : void 0,
          crossOrigin: m,
          integrity: typeof p.integrity == "string" ? p.integrity : void 0
        });
      } else i.d.m(h);
  }, Ee.requestFormReset = function(h) {
    i.d.r(h);
  }, Ee.unstable_batchedUpdates = function(h, p) {
    return h(p);
  }, Ee.useFormState = function(h, p, m) {
    return u.H.useFormState(h, p, m);
  }, Ee.useFormStatus = function() {
    return u.H.useHostTransitionStatus();
  }, Ee.version = "19.1.0", Ee;
}
var Hy;
function T2() {
  if (Hy) return dd.exports;
  Hy = 1;
  function n() {
    if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(n);
      } catch (t) {
        console.error(t);
      }
  }
  return n(), dd.exports = w2(), dd.exports;
}
/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Xy;
function k2() {
  if (Xy) return no;
  Xy = 1;
  var n = x2(), t = em(), e = T2();
  function i(l) {
    var r = "https://react.dev/errors/" + l;
    if (1 < arguments.length) {
      r += "?args[]=" + encodeURIComponent(arguments[1]);
      for (var a = 2; a < arguments.length; a++)
        r += "&args[]=" + encodeURIComponent(arguments[a]);
    }
    return "Minified React error #" + l + "; visit " + r + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  function s(l) {
    return !(!l || l.nodeType !== 1 && l.nodeType !== 9 && l.nodeType !== 11);
  }
  function o(l) {
    var r = l, a = l;
    if (l.alternate) for (; r.return; ) r = r.return;
    else {
      l = r;
      do
        r = l, (r.flags & 4098) !== 0 && (a = r.return), l = r.return;
      while (l);
    }
    return r.tag === 3 ? a : null;
  }
  function u(l) {
    if (l.tag === 13) {
      var r = l.memoizedState;
      if (r === null && (l = l.alternate, l !== null && (r = l.memoizedState)), r !== null) return r.dehydrated;
    }
    return null;
  }
  function c(l) {
    if (o(l) !== l)
      throw Error(i(188));
  }
  function h(l) {
    var r = l.alternate;
    if (!r) {
      if (r = o(l), r === null) throw Error(i(188));
      return r !== l ? null : l;
    }
    for (var a = l, f = r; ; ) {
      var d = a.return;
      if (d === null) break;
      var g = d.alternate;
      if (g === null) {
        if (f = d.return, f !== null) {
          a = f;
          continue;
        }
        break;
      }
      if (d.child === g.child) {
        for (g = d.child; g; ) {
          if (g === a) return c(d), l;
          if (g === f) return c(d), r;
          g = g.sibling;
        }
        throw Error(i(188));
      }
      if (a.return !== f.return) a = d, f = g;
      else {
        for (var v = !1, b = d.child; b; ) {
          if (b === a) {
            v = !0, a = d, f = g;
            break;
          }
          if (b === f) {
            v = !0, f = d, a = g;
            break;
          }
          b = b.sibling;
        }
        if (!v) {
          for (b = g.child; b; ) {
            if (b === a) {
              v = !0, a = g, f = d;
              break;
            }
            if (b === f) {
              v = !0, f = g, a = d;
              break;
            }
            b = b.sibling;
          }
          if (!v) throw Error(i(189));
        }
      }
      if (a.alternate !== f) throw Error(i(190));
    }
    if (a.tag !== 3) throw Error(i(188));
    return a.stateNode.current === a ? l : r;
  }
  function p(l) {
    var r = l.tag;
    if (r === 5 || r === 26 || r === 27 || r === 6) return l;
    for (l = l.child; l !== null; ) {
      if (r = p(l), r !== null) return r;
      l = l.sibling;
    }
    return null;
  }
  var m = Object.assign, O = Symbol.for("react.element"), y = Symbol.for("react.transitional.element"), S = Symbol.for("react.portal"), x = Symbol.for("react.fragment"), w = Symbol.for("react.strict_mode"), C = Symbol.for("react.profiler"), M = Symbol.for("react.provider"), U = Symbol.for("react.consumer"), W = Symbol.for("react.context"), Z = Symbol.for("react.forward_ref"), N = Symbol.for("react.suspense"), Y = Symbol.for("react.suspense_list"), R = Symbol.for("react.memo"), K = Symbol.for("react.lazy"), G = Symbol.for("react.activity"), J = Symbol.for("react.memo_cache_sentinel"), F = Symbol.iterator;
  function V(l) {
    return l === null || typeof l != "object" ? null : (l = F && l[F] || l["@@iterator"], typeof l == "function" ? l : null);
  }
  var at = Symbol.for("react.client.reference");
  function ot(l) {
    if (l == null) return null;
    if (typeof l == "function")
      return l.$$typeof === at ? null : l.displayName || l.name || null;
    if (typeof l == "string") return l;
    switch (l) {
      case x:
        return "Fragment";
      case C:
        return "Profiler";
      case w:
        return "StrictMode";
      case N:
        return "Suspense";
      case Y:
        return "SuspenseList";
      case G:
        return "Activity";
    }
    if (typeof l == "object")
      switch (l.$$typeof) {
        case S:
          return "Portal";
        case W:
          return (l.displayName || "Context") + ".Provider";
        case U:
          return (l._context.displayName || "Context") + ".Consumer";
        case Z:
          var r = l.render;
          return l = l.displayName, l || (l = r.displayName || r.name || "", l = l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef"), l;
        case R:
          return r = l.displayName || null, r !== null ? r : ot(l.type) || "Memo";
        case K:
          r = l._payload, l = l._init;
          try {
            return ot(l(r));
          } catch {
          }
      }
    return null;
  }
  var ht = Array.isArray, _ = t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, P = e.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, nt = {
    pending: !1,
    data: null,
    method: null,
    action: null
  }, dt = [], k = -1;
  function $(l) {
    return { current: l };
  }
  function tt(l) {
    0 > k || (l.current = dt[k], dt[k] = null, k--);
  }
  function I(l, r) {
    k++, dt[k] = l.current, l.current = r;
  }
  var ut = $(null), St = $(null), gt = $(null), ke = $(null);
  function Wt(l, r) {
    switch (I(gt, r), I(St, l), I(ut, null), r.nodeType) {
      case 9:
      case 11:
        l = (l = r.documentElement) && (l = l.namespaceURI) ? fy(l) : 0;
        break;
      default:
        if (l = r.tagName, r = r.namespaceURI)
          r = fy(r), l = hy(r, l);
        else
          switch (l) {
            case "svg":
              l = 1;
              break;
            case "math":
              l = 2;
              break;
            default:
              l = 0;
          }
    }
    tt(ut), I(ut, l);
  }
  function Cn() {
    tt(ut), tt(St), tt(gt);
  }
  function Gc(l) {
    l.memoizedState !== null && I(ke, l);
    var r = ut.current, a = hy(r, l.type);
    r !== a && (I(St, l), I(ut, a));
  }
  function ta(l) {
    St.current === l && (tt(ut), tt(St)), ke.current === l && (tt(ke), Jr._currentValue = nt);
  }
  var Yc = Object.prototype.hasOwnProperty, Zc = n.unstable_scheduleCallback, Fc = n.unstable_cancelCallback, Kw = n.unstable_shouldYield, Jw = n.unstable_requestPaint, Qi = n.unstable_now, Iw = n.unstable_getCurrentPriorityLevel, jm = n.unstable_ImmediatePriority, Wm = n.unstable_UserBlockingPriority, ea = n.unstable_NormalPriority, tT = n.unstable_LowPriority, Gm = n.unstable_IdlePriority, eT = n.log, iT = n.unstable_setDisableYieldValue, rr = null, Ge = null;
  function En(l) {
    if (typeof eT == "function" && iT(l), Ge && typeof Ge.setStrictMode == "function")
      try {
        Ge.setStrictMode(rr, l);
      } catch {
      }
  }
  var Ye = Math.clz32 ? Math.clz32 : sT, nT = Math.log, lT = Math.LN2;
  function sT(l) {
    return l >>>= 0, l === 0 ? 32 : 31 - (nT(l) / lT | 0) | 0;
  }
  var ia = 256, na = 4194304;
  function dl(l) {
    var r = l & 42;
    if (r !== 0) return r;
    switch (l & -l) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
        return 64;
      case 128:
        return 128;
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return l & 4194048;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return l & 62914560;
      case 67108864:
        return 67108864;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 0;
      default:
        return l;
    }
  }
  function la(l, r, a) {
    var f = l.pendingLanes;
    if (f === 0) return 0;
    var d = 0, g = l.suspendedLanes, v = l.pingedLanes;
    l = l.warmLanes;
    var b = f & 134217727;
    return b !== 0 ? (f = b & ~g, f !== 0 ? d = dl(f) : (v &= b, v !== 0 ? d = dl(v) : a || (a = b & ~l, a !== 0 && (d = dl(a))))) : (b = f & ~g, b !== 0 ? d = dl(b) : v !== 0 ? d = dl(v) : a || (a = f & ~l, a !== 0 && (d = dl(a)))), d === 0 ? 0 : r !== 0 && r !== d && (r & g) === 0 && (g = d & -d, a = r & -r, g >= a || g === 32 && (a & 4194048) !== 0) ? r : d;
  }
  function or(l, r) {
    return (l.pendingLanes & ~(l.suspendedLanes & ~l.pingedLanes) & r) === 0;
  }
  function rT(l, r) {
    switch (l) {
      case 1:
      case 2:
      case 4:
      case 8:
      case 64:
        return r + 250;
      case 16:
      case 32:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return r + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return -1;
      case 67108864:
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function Ym() {
    var l = ia;
    return ia <<= 1, (ia & 4194048) === 0 && (ia = 256), l;
  }
  function Zm() {
    var l = na;
    return na <<= 1, (na & 62914560) === 0 && (na = 4194304), l;
  }
  function Kc(l) {
    for (var r = [], a = 0; 31 > a; a++) r.push(l);
    return r;
  }
  function ar(l, r) {
    l.pendingLanes |= r, r !== 268435456 && (l.suspendedLanes = 0, l.pingedLanes = 0, l.warmLanes = 0);
  }
  function oT(l, r, a, f, d, g) {
    var v = l.pendingLanes;
    l.pendingLanes = a, l.suspendedLanes = 0, l.pingedLanes = 0, l.warmLanes = 0, l.expiredLanes &= a, l.entangledLanes &= a, l.errorRecoveryDisabledLanes &= a, l.shellSuspendCounter = 0;
    var b = l.entanglements, T = l.expirationTimes, D = l.hiddenUpdates;
    for (a = v & ~a; 0 < a; ) {
      var L = 31 - Ye(a), j = 1 << L;
      b[L] = 0, T[L] = -1;
      var q = D[L];
      if (q !== null)
        for (D[L] = null, L = 0; L < q.length; L++) {
          var B = q[L];
          B !== null && (B.lane &= -536870913);
        }
      a &= ~j;
    }
    f !== 0 && Fm(l, f, 0), g !== 0 && d === 0 && l.tag !== 0 && (l.suspendedLanes |= g & ~(v & ~r));
  }
  function Fm(l, r, a) {
    l.pendingLanes |= r, l.suspendedLanes &= ~r;
    var f = 31 - Ye(r);
    l.entangledLanes |= r, l.entanglements[f] = l.entanglements[f] | 1073741824 | a & 4194090;
  }
  function Km(l, r) {
    var a = l.entangledLanes |= r;
    for (l = l.entanglements; a; ) {
      var f = 31 - Ye(a), d = 1 << f;
      d & r | l[f] & r && (l[f] |= r), a &= ~d;
    }
  }
  function Jc(l) {
    switch (l) {
      case 2:
        l = 1;
        break;
      case 8:
        l = 4;
        break;
      case 32:
        l = 16;
        break;
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        l = 128;
        break;
      case 268435456:
        l = 134217728;
        break;
      default:
        l = 0;
    }
    return l;
  }
  function Ic(l) {
    return l &= -l, 2 < l ? 8 < l ? (l & 134217727) !== 0 ? 32 : 268435456 : 8 : 2;
  }
  function Jm() {
    var l = P.p;
    return l !== 0 ? l : (l = window.event, l === void 0 ? 32 : Ry(l.type));
  }
  function aT(l, r) {
    var a = P.p;
    try {
      return P.p = l, r();
    } finally {
      P.p = a;
    }
  }
  var Mn = Math.random().toString(36).slice(2), Ae = "__reactFiber$" + Mn, _e = "__reactProps$" + Mn, Gl = "__reactContainer$" + Mn, tf = "__reactEvents$" + Mn, uT = "__reactListeners$" + Mn, cT = "__reactHandles$" + Mn, Im = "__reactResources$" + Mn, ur = "__reactMarker$" + Mn;
  function ef(l) {
    delete l[Ae], delete l[_e], delete l[tf], delete l[uT], delete l[cT];
  }
  function Yl(l) {
    var r = l[Ae];
    if (r) return r;
    for (var a = l.parentNode; a; ) {
      if (r = a[Gl] || a[Ae]) {
        if (a = r.alternate, r.child !== null || a !== null && a.child !== null)
          for (l = gy(l); l !== null; ) {
            if (a = l[Ae]) return a;
            l = gy(l);
          }
        return r;
      }
      l = a, a = l.parentNode;
    }
    return null;
  }
  function Zl(l) {
    if (l = l[Ae] || l[Gl]) {
      var r = l.tag;
      if (r === 5 || r === 6 || r === 13 || r === 26 || r === 27 || r === 3)
        return l;
    }
    return null;
  }
  function cr(l) {
    var r = l.tag;
    if (r === 5 || r === 26 || r === 27 || r === 6) return l.stateNode;
    throw Error(i(33));
  }
  function Fl(l) {
    var r = l[Im];
    return r || (r = l[Im] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() }), r;
  }
  function fe(l) {
    l[ur] = !0;
  }
  var tg = /* @__PURE__ */ new Set(), eg = {};
  function pl(l, r) {
    Kl(l, r), Kl(l + "Capture", r);
  }
  function Kl(l, r) {
    for (eg[l] = r, l = 0; l < r.length; l++)
      tg.add(r[l]);
  }
  var fT = RegExp(
    "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
  ), ig = {}, ng = {};
  function hT(l) {
    return Yc.call(ng, l) ? !0 : Yc.call(ig, l) ? !1 : fT.test(l) ? ng[l] = !0 : (ig[l] = !0, !1);
  }
  function sa(l, r, a) {
    if (hT(r))
      if (a === null) l.removeAttribute(r);
      else {
        switch (typeof a) {
          case "undefined":
          case "function":
          case "symbol":
            l.removeAttribute(r);
            return;
          case "boolean":
            var f = r.toLowerCase().slice(0, 5);
            if (f !== "data-" && f !== "aria-") {
              l.removeAttribute(r);
              return;
            }
        }
        l.setAttribute(r, "" + a);
      }
  }
  function ra(l, r, a) {
    if (a === null) l.removeAttribute(r);
    else {
      switch (typeof a) {
        case "undefined":
        case "function":
        case "symbol":
        case "boolean":
          l.removeAttribute(r);
          return;
      }
      l.setAttribute(r, "" + a);
    }
  }
  function tn(l, r, a, f) {
    if (f === null) l.removeAttribute(a);
    else {
      switch (typeof f) {
        case "undefined":
        case "function":
        case "symbol":
        case "boolean":
          l.removeAttribute(a);
          return;
      }
      l.setAttributeNS(r, a, "" + f);
    }
  }
  var nf, lg;
  function Jl(l) {
    if (nf === void 0)
      try {
        throw Error();
      } catch (a) {
        var r = a.stack.trim().match(/\n( *(at )?)/);
        nf = r && r[1] || "", lg = -1 < a.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < a.stack.indexOf("@") ? "@unknown:0:0" : "";
      }
    return `
` + nf + l + lg;
  }
  var lf = !1;
  function sf(l, r) {
    if (!l || lf) return "";
    lf = !0;
    var a = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      var f = {
        DetermineComponentFrameRoot: function() {
          try {
            if (r) {
              var j = function() {
                throw Error();
              };
              if (Object.defineProperty(j.prototype, "props", {
                set: function() {
                  throw Error();
                }
              }), typeof Reflect == "object" && Reflect.construct) {
                try {
                  Reflect.construct(j, []);
                } catch (B) {
                  var q = B;
                }
                Reflect.construct(l, [], j);
              } else {
                try {
                  j.call();
                } catch (B) {
                  q = B;
                }
                l.call(j.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (B) {
                q = B;
              }
              (j = l()) && typeof j.catch == "function" && j.catch(function() {
              });
            }
          } catch (B) {
            if (B && q && typeof B.stack == "string")
              return [B.stack, q.stack];
          }
          return [null, null];
        }
      };
      f.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var d = Object.getOwnPropertyDescriptor(
        f.DetermineComponentFrameRoot,
        "name"
      );
      d && d.configurable && Object.defineProperty(
        f.DetermineComponentFrameRoot,
        "name",
        { value: "DetermineComponentFrameRoot" }
      );
      var g = f.DetermineComponentFrameRoot(), v = g[0], b = g[1];
      if (v && b) {
        var T = v.split(`
`), D = b.split(`
`);
        for (d = f = 0; f < T.length && !T[f].includes("DetermineComponentFrameRoot"); )
          f++;
        for (; d < D.length && !D[d].includes(
          "DetermineComponentFrameRoot"
        ); )
          d++;
        if (f === T.length || d === D.length)
          for (f = T.length - 1, d = D.length - 1; 1 <= f && 0 <= d && T[f] !== D[d]; )
            d--;
        for (; 1 <= f && 0 <= d; f--, d--)
          if (T[f] !== D[d]) {
            if (f !== 1 || d !== 1)
              do
                if (f--, d--, 0 > d || T[f] !== D[d]) {
                  var L = `
` + T[f].replace(" at new ", " at ");
                  return l.displayName && L.includes("<anonymous>") && (L = L.replace("<anonymous>", l.displayName)), L;
                }
              while (1 <= f && 0 <= d);
            break;
          }
      }
    } finally {
      lf = !1, Error.prepareStackTrace = a;
    }
    return (a = l ? l.displayName || l.name : "") ? Jl(a) : "";
  }
  function dT(l) {
    switch (l.tag) {
      case 26:
      case 27:
      case 5:
        return Jl(l.type);
      case 16:
        return Jl("Lazy");
      case 13:
        return Jl("Suspense");
      case 19:
        return Jl("SuspenseList");
      case 0:
      case 15:
        return sf(l.type, !1);
      case 11:
        return sf(l.type.render, !1);
      case 1:
        return sf(l.type, !0);
      case 31:
        return Jl("Activity");
      default:
        return "";
    }
  }
  function sg(l) {
    try {
      var r = "";
      do
        r += dT(l), l = l.return;
      while (l);
      return r;
    } catch (a) {
      return `
Error generating stack: ` + a.message + `
` + a.stack;
    }
  }
  function oi(l) {
    switch (typeof l) {
      case "bigint":
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return l;
      case "object":
        return l;
      default:
        return "";
    }
  }
  function rg(l) {
    var r = l.type;
    return (l = l.nodeName) && l.toLowerCase() === "input" && (r === "checkbox" || r === "radio");
  }
  function pT(l) {
    var r = rg(l) ? "checked" : "value", a = Object.getOwnPropertyDescriptor(
      l.constructor.prototype,
      r
    ), f = "" + l[r];
    if (!l.hasOwnProperty(r) && typeof a < "u" && typeof a.get == "function" && typeof a.set == "function") {
      var d = a.get, g = a.set;
      return Object.defineProperty(l, r, {
        configurable: !0,
        get: function() {
          return d.call(this);
        },
        set: function(v) {
          f = "" + v, g.call(this, v);
        }
      }), Object.defineProperty(l, r, {
        enumerable: a.enumerable
      }), {
        getValue: function() {
          return f;
        },
        setValue: function(v) {
          f = "" + v;
        },
        stopTracking: function() {
          l._valueTracker = null, delete l[r];
        }
      };
    }
  }
  function oa(l) {
    l._valueTracker || (l._valueTracker = pT(l));
  }
  function og(l) {
    if (!l) return !1;
    var r = l._valueTracker;
    if (!r) return !0;
    var a = r.getValue(), f = "";
    return l && (f = rg(l) ? l.checked ? "true" : "false" : l.value), l = f, l !== a ? (r.setValue(l), !0) : !1;
  }
  function aa(l) {
    if (l = l || (typeof document < "u" ? document : void 0), typeof l > "u") return null;
    try {
      return l.activeElement || l.body;
    } catch {
      return l.body;
    }
  }
  var mT = /[\n"\\]/g;
  function ai(l) {
    return l.replace(
      mT,
      function(r) {
        return "\\" + r.charCodeAt(0).toString(16) + " ";
      }
    );
  }
  function rf(l, r, a, f, d, g, v, b) {
    l.name = "", v != null && typeof v != "function" && typeof v != "symbol" && typeof v != "boolean" ? l.type = v : l.removeAttribute("type"), r != null ? v === "number" ? (r === 0 && l.value === "" || l.value != r) && (l.value = "" + oi(r)) : l.value !== "" + oi(r) && (l.value = "" + oi(r)) : v !== "submit" && v !== "reset" || l.removeAttribute("value"), r != null ? of(l, v, oi(r)) : a != null ? of(l, v, oi(a)) : f != null && l.removeAttribute("value"), d == null && g != null && (l.defaultChecked = !!g), d != null && (l.checked = d && typeof d != "function" && typeof d != "symbol"), b != null && typeof b != "function" && typeof b != "symbol" && typeof b != "boolean" ? l.name = "" + oi(b) : l.removeAttribute("name");
  }
  function ag(l, r, a, f, d, g, v, b) {
    if (g != null && typeof g != "function" && typeof g != "symbol" && typeof g != "boolean" && (l.type = g), r != null || a != null) {
      if (!(g !== "submit" && g !== "reset" || r != null))
        return;
      a = a != null ? "" + oi(a) : "", r = r != null ? "" + oi(r) : a, b || r === l.value || (l.value = r), l.defaultValue = r;
    }
    f = f ?? d, f = typeof f != "function" && typeof f != "symbol" && !!f, l.checked = b ? l.checked : !!f, l.defaultChecked = !!f, v != null && typeof v != "function" && typeof v != "symbol" && typeof v != "boolean" && (l.name = v);
  }
  function of(l, r, a) {
    r === "number" && aa(l.ownerDocument) === l || l.defaultValue === "" + a || (l.defaultValue = "" + a);
  }
  function Il(l, r, a, f) {
    if (l = l.options, r) {
      r = {};
      for (var d = 0; d < a.length; d++)
        r["$" + a[d]] = !0;
      for (a = 0; a < l.length; a++)
        d = r.hasOwnProperty("$" + l[a].value), l[a].selected !== d && (l[a].selected = d), d && f && (l[a].defaultSelected = !0);
    } else {
      for (a = "" + oi(a), r = null, d = 0; d < l.length; d++) {
        if (l[d].value === a) {
          l[d].selected = !0, f && (l[d].defaultSelected = !0);
          return;
        }
        r !== null || l[d].disabled || (r = l[d]);
      }
      r !== null && (r.selected = !0);
    }
  }
  function ug(l, r, a) {
    if (r != null && (r = "" + oi(r), r !== l.value && (l.value = r), a == null)) {
      l.defaultValue !== r && (l.defaultValue = r);
      return;
    }
    l.defaultValue = a != null ? "" + oi(a) : "";
  }
  function cg(l, r, a, f) {
    if (r == null) {
      if (f != null) {
        if (a != null) throw Error(i(92));
        if (ht(f)) {
          if (1 < f.length) throw Error(i(93));
          f = f[0];
        }
        a = f;
      }
      a == null && (a = ""), r = a;
    }
    a = oi(r), l.defaultValue = a, f = l.textContent, f === a && f !== "" && f !== null && (l.value = f);
  }
  function ts(l, r) {
    if (r) {
      var a = l.firstChild;
      if (a && a === l.lastChild && a.nodeType === 3) {
        a.nodeValue = r;
        return;
      }
    }
    l.textContent = r;
  }
  var gT = new Set(
    "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
      " "
    )
  );
  function fg(l, r, a) {
    var f = r.indexOf("--") === 0;
    a == null || typeof a == "boolean" || a === "" ? f ? l.setProperty(r, "") : r === "float" ? l.cssFloat = "" : l[r] = "" : f ? l.setProperty(r, a) : typeof a != "number" || a === 0 || gT.has(r) ? r === "float" ? l.cssFloat = a : l[r] = ("" + a).trim() : l[r] = a + "px";
  }
  function hg(l, r, a) {
    if (r != null && typeof r != "object")
      throw Error(i(62));
    if (l = l.style, a != null) {
      for (var f in a)
        !a.hasOwnProperty(f) || r != null && r.hasOwnProperty(f) || (f.indexOf("--") === 0 ? l.setProperty(f, "") : f === "float" ? l.cssFloat = "" : l[f] = "");
      for (var d in r)
        f = r[d], r.hasOwnProperty(d) && a[d] !== f && fg(l, d, f);
    } else
      for (var g in r)
        r.hasOwnProperty(g) && fg(l, g, r[g]);
  }
  function af(l) {
    if (l.indexOf("-") === -1) return !1;
    switch (l) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return !1;
      default:
        return !0;
    }
  }
  var OT = /* @__PURE__ */ new Map([
    ["acceptCharset", "accept-charset"],
    ["htmlFor", "for"],
    ["httpEquiv", "http-equiv"],
    ["crossOrigin", "crossorigin"],
    ["accentHeight", "accent-height"],
    ["alignmentBaseline", "alignment-baseline"],
    ["arabicForm", "arabic-form"],
    ["baselineShift", "baseline-shift"],
    ["capHeight", "cap-height"],
    ["clipPath", "clip-path"],
    ["clipRule", "clip-rule"],
    ["colorInterpolation", "color-interpolation"],
    ["colorInterpolationFilters", "color-interpolation-filters"],
    ["colorProfile", "color-profile"],
    ["colorRendering", "color-rendering"],
    ["dominantBaseline", "dominant-baseline"],
    ["enableBackground", "enable-background"],
    ["fillOpacity", "fill-opacity"],
    ["fillRule", "fill-rule"],
    ["floodColor", "flood-color"],
    ["floodOpacity", "flood-opacity"],
    ["fontFamily", "font-family"],
    ["fontSize", "font-size"],
    ["fontSizeAdjust", "font-size-adjust"],
    ["fontStretch", "font-stretch"],
    ["fontStyle", "font-style"],
    ["fontVariant", "font-variant"],
    ["fontWeight", "font-weight"],
    ["glyphName", "glyph-name"],
    ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
    ["glyphOrientationVertical", "glyph-orientation-vertical"],
    ["horizAdvX", "horiz-adv-x"],
    ["horizOriginX", "horiz-origin-x"],
    ["imageRendering", "image-rendering"],
    ["letterSpacing", "letter-spacing"],
    ["lightingColor", "lighting-color"],
    ["markerEnd", "marker-end"],
    ["markerMid", "marker-mid"],
    ["markerStart", "marker-start"],
    ["overlinePosition", "overline-position"],
    ["overlineThickness", "overline-thickness"],
    ["paintOrder", "paint-order"],
    ["panose-1", "panose-1"],
    ["pointerEvents", "pointer-events"],
    ["renderingIntent", "rendering-intent"],
    ["shapeRendering", "shape-rendering"],
    ["stopColor", "stop-color"],
    ["stopOpacity", "stop-opacity"],
    ["strikethroughPosition", "strikethrough-position"],
    ["strikethroughThickness", "strikethrough-thickness"],
    ["strokeDasharray", "stroke-dasharray"],
    ["strokeDashoffset", "stroke-dashoffset"],
    ["strokeLinecap", "stroke-linecap"],
    ["strokeLinejoin", "stroke-linejoin"],
    ["strokeMiterlimit", "stroke-miterlimit"],
    ["strokeOpacity", "stroke-opacity"],
    ["strokeWidth", "stroke-width"],
    ["textAnchor", "text-anchor"],
    ["textDecoration", "text-decoration"],
    ["textRendering", "text-rendering"],
    ["transformOrigin", "transform-origin"],
    ["underlinePosition", "underline-position"],
    ["underlineThickness", "underline-thickness"],
    ["unicodeBidi", "unicode-bidi"],
    ["unicodeRange", "unicode-range"],
    ["unitsPerEm", "units-per-em"],
    ["vAlphabetic", "v-alphabetic"],
    ["vHanging", "v-hanging"],
    ["vIdeographic", "v-ideographic"],
    ["vMathematical", "v-mathematical"],
    ["vectorEffect", "vector-effect"],
    ["vertAdvY", "vert-adv-y"],
    ["vertOriginX", "vert-origin-x"],
    ["vertOriginY", "vert-origin-y"],
    ["wordSpacing", "word-spacing"],
    ["writingMode", "writing-mode"],
    ["xmlnsXlink", "xmlns:xlink"],
    ["xHeight", "x-height"]
  ]), yT = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
  function ua(l) {
    return yT.test("" + l) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : l;
  }
  var uf = null;
  function cf(l) {
    return l = l.target || l.srcElement || window, l.correspondingUseElement && (l = l.correspondingUseElement), l.nodeType === 3 ? l.parentNode : l;
  }
  var es = null, is = null;
  function dg(l) {
    var r = Zl(l);
    if (r && (l = r.stateNode)) {
      var a = l[_e] || null;
      t: switch (l = r.stateNode, r.type) {
        case "input":
          if (rf(
            l,
            a.value,
            a.defaultValue,
            a.defaultValue,
            a.checked,
            a.defaultChecked,
            a.type,
            a.name
          ), r = a.name, a.type === "radio" && r != null) {
            for (a = l; a.parentNode; ) a = a.parentNode;
            for (a = a.querySelectorAll(
              'input[name="' + ai(
                "" + r
              ) + '"][type="radio"]'
            ), r = 0; r < a.length; r++) {
              var f = a[r];
              if (f !== l && f.form === l.form) {
                var d = f[_e] || null;
                if (!d) throw Error(i(90));
                rf(
                  f,
                  d.value,
                  d.defaultValue,
                  d.defaultValue,
                  d.checked,
                  d.defaultChecked,
                  d.type,
                  d.name
                );
              }
            }
            for (r = 0; r < a.length; r++)
              f = a[r], f.form === l.form && og(f);
          }
          break t;
        case "textarea":
          ug(l, a.value, a.defaultValue);
          break t;
        case "select":
          r = a.value, r != null && Il(l, !!a.multiple, r, !1);
      }
    }
  }
  var ff = !1;
  function pg(l, r, a) {
    if (ff) return l(r, a);
    ff = !0;
    try {
      var f = l(r);
      return f;
    } finally {
      if (ff = !1, (es !== null || is !== null) && (Ya(), es && (r = es, l = is, is = es = null, dg(r), l)))
        for (r = 0; r < l.length; r++) dg(l[r]);
    }
  }
  function fr(l, r) {
    var a = l.stateNode;
    if (a === null) return null;
    var f = a[_e] || null;
    if (f === null) return null;
    a = f[r];
    t: switch (r) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (f = !f.disabled) || (l = l.type, f = !(l === "button" || l === "input" || l === "select" || l === "textarea")), l = !f;
        break t;
      default:
        l = !1;
    }
    if (l) return null;
    if (a && typeof a != "function")
      throw Error(
        i(231, r, typeof a)
      );
    return a;
  }
  var en = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), hf = !1;
  if (en)
    try {
      var hr = {};
      Object.defineProperty(hr, "passive", {
        get: function() {
          hf = !0;
        }
      }), window.addEventListener("test", hr, hr), window.removeEventListener("test", hr, hr);
    } catch {
      hf = !1;
    }
  var Qn = null, df = null, ca = null;
  function mg() {
    if (ca) return ca;
    var l, r = df, a = r.length, f, d = "value" in Qn ? Qn.value : Qn.textContent, g = d.length;
    for (l = 0; l < a && r[l] === d[l]; l++) ;
    var v = a - l;
    for (f = 1; f <= v && r[a - f] === d[g - f]; f++) ;
    return ca = d.slice(l, 1 < f ? 1 - f : void 0);
  }
  function fa(l) {
    var r = l.keyCode;
    return "charCode" in l ? (l = l.charCode, l === 0 && r === 13 && (l = 13)) : l = r, l === 10 && (l = 13), 32 <= l || l === 13 ? l : 0;
  }
  function ha() {
    return !0;
  }
  function gg() {
    return !1;
  }
  function Be(l) {
    function r(a, f, d, g, v) {
      this._reactName = a, this._targetInst = d, this.type = f, this.nativeEvent = g, this.target = v, this.currentTarget = null;
      for (var b in l)
        l.hasOwnProperty(b) && (a = l[b], this[b] = a ? a(g) : g[b]);
      return this.isDefaultPrevented = (g.defaultPrevented != null ? g.defaultPrevented : g.returnValue === !1) ? ha : gg, this.isPropagationStopped = gg, this;
    }
    return m(r.prototype, {
      preventDefault: function() {
        this.defaultPrevented = !0;
        var a = this.nativeEvent;
        a && (a.preventDefault ? a.preventDefault() : typeof a.returnValue != "unknown" && (a.returnValue = !1), this.isDefaultPrevented = ha);
      },
      stopPropagation: function() {
        var a = this.nativeEvent;
        a && (a.stopPropagation ? a.stopPropagation() : typeof a.cancelBubble != "unknown" && (a.cancelBubble = !0), this.isPropagationStopped = ha);
      },
      persist: function() {
      },
      isPersistent: ha
    }), r;
  }
  var ml = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(l) {
      return l.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  }, da = Be(ml), dr = m({}, ml, { view: 0, detail: 0 }), vT = Be(dr), pf, mf, pr, pa = m({}, dr, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: Of,
    button: 0,
    buttons: 0,
    relatedTarget: function(l) {
      return l.relatedTarget === void 0 ? l.fromElement === l.srcElement ? l.toElement : l.fromElement : l.relatedTarget;
    },
    movementX: function(l) {
      return "movementX" in l ? l.movementX : (l !== pr && (pr && l.type === "mousemove" ? (pf = l.screenX - pr.screenX, mf = l.screenY - pr.screenY) : mf = pf = 0, pr = l), pf);
    },
    movementY: function(l) {
      return "movementY" in l ? l.movementY : mf;
    }
  }), Og = Be(pa), ST = m({}, pa, { dataTransfer: 0 }), bT = Be(ST), xT = m({}, dr, { relatedTarget: 0 }), gf = Be(xT), wT = m({}, ml, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }), TT = Be(wT), kT = m({}, ml, {
    clipboardData: function(l) {
      return "clipboardData" in l ? l.clipboardData : window.clipboardData;
    }
  }), AT = Be(kT), CT = m({}, ml, { data: 0 }), yg = Be(CT), ET = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, MT = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, QT = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
  function RT(l) {
    var r = this.nativeEvent;
    return r.getModifierState ? r.getModifierState(l) : (l = QT[l]) ? !!r[l] : !1;
  }
  function Of() {
    return RT;
  }
  var DT = m({}, dr, {
    key: function(l) {
      if (l.key) {
        var r = ET[l.key] || l.key;
        if (r !== "Unidentified") return r;
      }
      return l.type === "keypress" ? (l = fa(l), l === 13 ? "Enter" : String.fromCharCode(l)) : l.type === "keydown" || l.type === "keyup" ? MT[l.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: Of,
    charCode: function(l) {
      return l.type === "keypress" ? fa(l) : 0;
    },
    keyCode: function(l) {
      return l.type === "keydown" || l.type === "keyup" ? l.keyCode : 0;
    },
    which: function(l) {
      return l.type === "keypress" ? fa(l) : l.type === "keydown" || l.type === "keyup" ? l.keyCode : 0;
    }
  }), zT = Be(DT), qT = m({}, pa, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  }), vg = Be(qT), _T = m({}, dr, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: Of
  }), BT = Be(_T), NT = m({}, ml, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }), PT = Be(NT), LT = m({}, pa, {
    deltaX: function(l) {
      return "deltaX" in l ? l.deltaX : "wheelDeltaX" in l ? -l.wheelDeltaX : 0;
    },
    deltaY: function(l) {
      return "deltaY" in l ? l.deltaY : "wheelDeltaY" in l ? -l.wheelDeltaY : "wheelDelta" in l ? -l.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), UT = Be(LT), VT = m({}, ml, {
    newState: 0,
    oldState: 0
  }), HT = Be(VT), XT = [9, 13, 27, 32], yf = en && "CompositionEvent" in window, mr = null;
  en && "documentMode" in document && (mr = document.documentMode);
  var $T = en && "TextEvent" in window && !mr, Sg = en && (!yf || mr && 8 < mr && 11 >= mr), bg = " ", xg = !1;
  function wg(l, r) {
    switch (l) {
      case "keyup":
        return XT.indexOf(r.keyCode) !== -1;
      case "keydown":
        return r.keyCode !== 229;
      case "keypress":
      case "mousedown":
      case "focusout":
        return !0;
      default:
        return !1;
    }
  }
  function Tg(l) {
    return l = l.detail, typeof l == "object" && "data" in l ? l.data : null;
  }
  var ns = !1;
  function jT(l, r) {
    switch (l) {
      case "compositionend":
        return Tg(r);
      case "keypress":
        return r.which !== 32 ? null : (xg = !0, bg);
      case "textInput":
        return l = r.data, l === bg && xg ? null : l;
      default:
        return null;
    }
  }
  function WT(l, r) {
    if (ns)
      return l === "compositionend" || !yf && wg(l, r) ? (l = mg(), ca = df = Qn = null, ns = !1, l) : null;
    switch (l) {
      case "paste":
        return null;
      case "keypress":
        if (!(r.ctrlKey || r.altKey || r.metaKey) || r.ctrlKey && r.altKey) {
          if (r.char && 1 < r.char.length)
            return r.char;
          if (r.which) return String.fromCharCode(r.which);
        }
        return null;
      case "compositionend":
        return Sg && r.locale !== "ko" ? null : r.data;
      default:
        return null;
    }
  }
  var GT = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
  };
  function kg(l) {
    var r = l && l.nodeName && l.nodeName.toLowerCase();
    return r === "input" ? !!GT[l.type] : r === "textarea";
  }
  function Ag(l, r, a, f) {
    es ? is ? is.push(f) : is = [f] : es = f, r = tu(r, "onChange"), 0 < r.length && (a = new da(
      "onChange",
      "change",
      null,
      a,
      f
    ), l.push({ event: a, listeners: r }));
  }
  var gr = null, Or = null;
  function YT(l) {
    ry(l, 0);
  }
  function ma(l) {
    var r = cr(l);
    if (og(r)) return l;
  }
  function Cg(l, r) {
    if (l === "change") return r;
  }
  var Eg = !1;
  if (en) {
    var vf;
    if (en) {
      var Sf = "oninput" in document;
      if (!Sf) {
        var Mg = document.createElement("div");
        Mg.setAttribute("oninput", "return;"), Sf = typeof Mg.oninput == "function";
      }
      vf = Sf;
    } else vf = !1;
    Eg = vf && (!document.documentMode || 9 < document.documentMode);
  }
  function Qg() {
    gr && (gr.detachEvent("onpropertychange", Rg), Or = gr = null);
  }
  function Rg(l) {
    if (l.propertyName === "value" && ma(Or)) {
      var r = [];
      Ag(
        r,
        Or,
        l,
        cf(l)
      ), pg(YT, r);
    }
  }
  function ZT(l, r, a) {
    l === "focusin" ? (Qg(), gr = r, Or = a, gr.attachEvent("onpropertychange", Rg)) : l === "focusout" && Qg();
  }
  function FT(l) {
    if (l === "selectionchange" || l === "keyup" || l === "keydown")
      return ma(Or);
  }
  function KT(l, r) {
    if (l === "click") return ma(r);
  }
  function JT(l, r) {
    if (l === "input" || l === "change")
      return ma(r);
  }
  function IT(l, r) {
    return l === r && (l !== 0 || 1 / l === 1 / r) || l !== l && r !== r;
  }
  var Ze = typeof Object.is == "function" ? Object.is : IT;
  function yr(l, r) {
    if (Ze(l, r)) return !0;
    if (typeof l != "object" || l === null || typeof r != "object" || r === null)
      return !1;
    var a = Object.keys(l), f = Object.keys(r);
    if (a.length !== f.length) return !1;
    for (f = 0; f < a.length; f++) {
      var d = a[f];
      if (!Yc.call(r, d) || !Ze(l[d], r[d]))
        return !1;
    }
    return !0;
  }
  function Dg(l) {
    for (; l && l.firstChild; ) l = l.firstChild;
    return l;
  }
  function zg(l, r) {
    var a = Dg(l);
    l = 0;
    for (var f; a; ) {
      if (a.nodeType === 3) {
        if (f = l + a.textContent.length, l <= r && f >= r)
          return { node: a, offset: r - l };
        l = f;
      }
      t: {
        for (; a; ) {
          if (a.nextSibling) {
            a = a.nextSibling;
            break t;
          }
          a = a.parentNode;
        }
        a = void 0;
      }
      a = Dg(a);
    }
  }
  function qg(l, r) {
    return l && r ? l === r ? !0 : l && l.nodeType === 3 ? !1 : r && r.nodeType === 3 ? qg(l, r.parentNode) : "contains" in l ? l.contains(r) : l.compareDocumentPosition ? !!(l.compareDocumentPosition(r) & 16) : !1 : !1;
  }
  function _g(l) {
    l = l != null && l.ownerDocument != null && l.ownerDocument.defaultView != null ? l.ownerDocument.defaultView : window;
    for (var r = aa(l.document); r instanceof l.HTMLIFrameElement; ) {
      try {
        var a = typeof r.contentWindow.location.href == "string";
      } catch {
        a = !1;
      }
      if (a) l = r.contentWindow;
      else break;
      r = aa(l.document);
    }
    return r;
  }
  function bf(l) {
    var r = l && l.nodeName && l.nodeName.toLowerCase();
    return r && (r === "input" && (l.type === "text" || l.type === "search" || l.type === "tel" || l.type === "url" || l.type === "password") || r === "textarea" || l.contentEditable === "true");
  }
  var tk = en && "documentMode" in document && 11 >= document.documentMode, ls = null, xf = null, vr = null, wf = !1;
  function Bg(l, r, a) {
    var f = a.window === a ? a.document : a.nodeType === 9 ? a : a.ownerDocument;
    wf || ls == null || ls !== aa(f) || (f = ls, "selectionStart" in f && bf(f) ? f = { start: f.selectionStart, end: f.selectionEnd } : (f = (f.ownerDocument && f.ownerDocument.defaultView || window).getSelection(), f = {
      anchorNode: f.anchorNode,
      anchorOffset: f.anchorOffset,
      focusNode: f.focusNode,
      focusOffset: f.focusOffset
    }), vr && yr(vr, f) || (vr = f, f = tu(xf, "onSelect"), 0 < f.length && (r = new da(
      "onSelect",
      "select",
      null,
      r,
      a
    ), l.push({ event: r, listeners: f }), r.target = ls)));
  }
  function gl(l, r) {
    var a = {};
    return a[l.toLowerCase()] = r.toLowerCase(), a["Webkit" + l] = "webkit" + r, a["Moz" + l] = "moz" + r, a;
  }
  var ss = {
    animationend: gl("Animation", "AnimationEnd"),
    animationiteration: gl("Animation", "AnimationIteration"),
    animationstart: gl("Animation", "AnimationStart"),
    transitionrun: gl("Transition", "TransitionRun"),
    transitionstart: gl("Transition", "TransitionStart"),
    transitioncancel: gl("Transition", "TransitionCancel"),
    transitionend: gl("Transition", "TransitionEnd")
  }, Tf = {}, Ng = {};
  en && (Ng = document.createElement("div").style, "AnimationEvent" in window || (delete ss.animationend.animation, delete ss.animationiteration.animation, delete ss.animationstart.animation), "TransitionEvent" in window || delete ss.transitionend.transition);
  function Ol(l) {
    if (Tf[l]) return Tf[l];
    if (!ss[l]) return l;
    var r = ss[l], a;
    for (a in r)
      if (r.hasOwnProperty(a) && a in Ng)
        return Tf[l] = r[a];
    return l;
  }
  var Pg = Ol("animationend"), Lg = Ol("animationiteration"), Ug = Ol("animationstart"), ek = Ol("transitionrun"), ik = Ol("transitionstart"), nk = Ol("transitioncancel"), Vg = Ol("transitionend"), Hg = /* @__PURE__ */ new Map(), kf = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
    " "
  );
  kf.push("scrollEnd");
  function xi(l, r) {
    Hg.set(l, r), pl(r, [l]);
  }
  var Xg = /* @__PURE__ */ new WeakMap();
  function ui(l, r) {
    if (typeof l == "object" && l !== null) {
      var a = Xg.get(l);
      return a !== void 0 ? a : (r = {
        value: l,
        source: r,
        stack: sg(r)
      }, Xg.set(l, r), r);
    }
    return {
      value: l,
      source: r,
      stack: sg(r)
    };
  }
  var ci = [], rs = 0, Af = 0;
  function ga() {
    for (var l = rs, r = Af = rs = 0; r < l; ) {
      var a = ci[r];
      ci[r++] = null;
      var f = ci[r];
      ci[r++] = null;
      var d = ci[r];
      ci[r++] = null;
      var g = ci[r];
      if (ci[r++] = null, f !== null && d !== null) {
        var v = f.pending;
        v === null ? d.next = d : (d.next = v.next, v.next = d), f.pending = d;
      }
      g !== 0 && $g(a, d, g);
    }
  }
  function Oa(l, r, a, f) {
    ci[rs++] = l, ci[rs++] = r, ci[rs++] = a, ci[rs++] = f, Af |= f, l.lanes |= f, l = l.alternate, l !== null && (l.lanes |= f);
  }
  function Cf(l, r, a, f) {
    return Oa(l, r, a, f), ya(l);
  }
  function os(l, r) {
    return Oa(l, null, null, r), ya(l);
  }
  function $g(l, r, a) {
    l.lanes |= a;
    var f = l.alternate;
    f !== null && (f.lanes |= a);
    for (var d = !1, g = l.return; g !== null; )
      g.childLanes |= a, f = g.alternate, f !== null && (f.childLanes |= a), g.tag === 22 && (l = g.stateNode, l === null || l._visibility & 1 || (d = !0)), l = g, g = g.return;
    return l.tag === 3 ? (g = l.stateNode, d && r !== null && (d = 31 - Ye(a), l = g.hiddenUpdates, f = l[d], f === null ? l[d] = [r] : f.push(r), r.lane = a | 536870912), g) : null;
  }
  function ya(l) {
    if (50 < $r)
      throw $r = 0, zh = null, Error(i(185));
    for (var r = l.return; r !== null; )
      l = r, r = l.return;
    return l.tag === 3 ? l.stateNode : null;
  }
  var as = {};
  function lk(l, r, a, f) {
    this.tag = l, this.key = a, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = r, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = f, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function Fe(l, r, a, f) {
    return new lk(l, r, a, f);
  }
  function Ef(l) {
    return l = l.prototype, !(!l || !l.isReactComponent);
  }
  function nn(l, r) {
    var a = l.alternate;
    return a === null ? (a = Fe(
      l.tag,
      r,
      l.key,
      l.mode
    ), a.elementType = l.elementType, a.type = l.type, a.stateNode = l.stateNode, a.alternate = l, l.alternate = a) : (a.pendingProps = r, a.type = l.type, a.flags = 0, a.subtreeFlags = 0, a.deletions = null), a.flags = l.flags & 65011712, a.childLanes = l.childLanes, a.lanes = l.lanes, a.child = l.child, a.memoizedProps = l.memoizedProps, a.memoizedState = l.memoizedState, a.updateQueue = l.updateQueue, r = l.dependencies, a.dependencies = r === null ? null : { lanes: r.lanes, firstContext: r.firstContext }, a.sibling = l.sibling, a.index = l.index, a.ref = l.ref, a.refCleanup = l.refCleanup, a;
  }
  function jg(l, r) {
    l.flags &= 65011714;
    var a = l.alternate;
    return a === null ? (l.childLanes = 0, l.lanes = r, l.child = null, l.subtreeFlags = 0, l.memoizedProps = null, l.memoizedState = null, l.updateQueue = null, l.dependencies = null, l.stateNode = null) : (l.childLanes = a.childLanes, l.lanes = a.lanes, l.child = a.child, l.subtreeFlags = 0, l.deletions = null, l.memoizedProps = a.memoizedProps, l.memoizedState = a.memoizedState, l.updateQueue = a.updateQueue, l.type = a.type, r = a.dependencies, l.dependencies = r === null ? null : {
      lanes: r.lanes,
      firstContext: r.firstContext
    }), l;
  }
  function va(l, r, a, f, d, g) {
    var v = 0;
    if (f = l, typeof l == "function") Ef(l) && (v = 1);
    else if (typeof l == "string")
      v = r2(
        l,
        a,
        ut.current
      ) ? 26 : l === "html" || l === "head" || l === "body" ? 27 : 5;
    else
      t: switch (l) {
        case G:
          return l = Fe(31, a, r, d), l.elementType = G, l.lanes = g, l;
        case x:
          return yl(a.children, d, g, r);
        case w:
          v = 8, d |= 24;
          break;
        case C:
          return l = Fe(12, a, r, d | 2), l.elementType = C, l.lanes = g, l;
        case N:
          return l = Fe(13, a, r, d), l.elementType = N, l.lanes = g, l;
        case Y:
          return l = Fe(19, a, r, d), l.elementType = Y, l.lanes = g, l;
        default:
          if (typeof l == "object" && l !== null)
            switch (l.$$typeof) {
              case M:
              case W:
                v = 10;
                break t;
              case U:
                v = 9;
                break t;
              case Z:
                v = 11;
                break t;
              case R:
                v = 14;
                break t;
              case K:
                v = 16, f = null;
                break t;
            }
          v = 29, a = Error(
            i(130, l === null ? "null" : typeof l, "")
          ), f = null;
      }
    return r = Fe(v, a, r, d), r.elementType = l, r.type = f, r.lanes = g, r;
  }
  function yl(l, r, a, f) {
    return l = Fe(7, l, f, r), l.lanes = a, l;
  }
  function Mf(l, r, a) {
    return l = Fe(6, l, null, r), l.lanes = a, l;
  }
  function Qf(l, r, a) {
    return r = Fe(
      4,
      l.children !== null ? l.children : [],
      l.key,
      r
    ), r.lanes = a, r.stateNode = {
      containerInfo: l.containerInfo,
      pendingChildren: null,
      implementation: l.implementation
    }, r;
  }
  var us = [], cs = 0, Sa = null, ba = 0, fi = [], hi = 0, vl = null, ln = 1, sn = "";
  function Sl(l, r) {
    us[cs++] = ba, us[cs++] = Sa, Sa = l, ba = r;
  }
  function Wg(l, r, a) {
    fi[hi++] = ln, fi[hi++] = sn, fi[hi++] = vl, vl = l;
    var f = ln;
    l = sn;
    var d = 32 - Ye(f) - 1;
    f &= ~(1 << d), a += 1;
    var g = 32 - Ye(r) + d;
    if (30 < g) {
      var v = d - d % 5;
      g = (f & (1 << v) - 1).toString(32), f >>= v, d -= v, ln = 1 << 32 - Ye(r) + d | a << d | f, sn = g + l;
    } else
      ln = 1 << g | a << d | f, sn = l;
  }
  function Rf(l) {
    l.return !== null && (Sl(l, 1), Wg(l, 1, 0));
  }
  function Df(l) {
    for (; l === Sa; )
      Sa = us[--cs], us[cs] = null, ba = us[--cs], us[cs] = null;
    for (; l === vl; )
      vl = fi[--hi], fi[hi] = null, sn = fi[--hi], fi[hi] = null, ln = fi[--hi], fi[hi] = null;
  }
  var De = null, Ft = null, zt = !1, bl = null, Ri = !1, zf = Error(i(519));
  function xl(l) {
    var r = Error(i(418, ""));
    throw xr(ui(r, l)), zf;
  }
  function Gg(l) {
    var r = l.stateNode, a = l.type, f = l.memoizedProps;
    switch (r[Ae] = l, r[_e] = f, a) {
      case "dialog":
        kt("cancel", r), kt("close", r);
        break;
      case "iframe":
      case "object":
      case "embed":
        kt("load", r);
        break;
      case "video":
      case "audio":
        for (a = 0; a < Wr.length; a++)
          kt(Wr[a], r);
        break;
      case "source":
        kt("error", r);
        break;
      case "img":
      case "image":
      case "link":
        kt("error", r), kt("load", r);
        break;
      case "details":
        kt("toggle", r);
        break;
      case "input":
        kt("invalid", r), ag(
          r,
          f.value,
          f.defaultValue,
          f.checked,
          f.defaultChecked,
          f.type,
          f.name,
          !0
        ), oa(r);
        break;
      case "select":
        kt("invalid", r);
        break;
      case "textarea":
        kt("invalid", r), cg(r, f.value, f.defaultValue, f.children), oa(r);
    }
    a = f.children, typeof a != "string" && typeof a != "number" && typeof a != "bigint" || r.textContent === "" + a || f.suppressHydrationWarning === !0 || cy(r.textContent, a) ? (f.popover != null && (kt("beforetoggle", r), kt("toggle", r)), f.onScroll != null && kt("scroll", r), f.onScrollEnd != null && kt("scrollend", r), f.onClick != null && (r.onclick = eu), r = !0) : r = !1, r || xl(l);
  }
  function Yg(l) {
    for (De = l.return; De; )
      switch (De.tag) {
        case 5:
        case 13:
          Ri = !1;
          return;
        case 27:
        case 3:
          Ri = !0;
          return;
        default:
          De = De.return;
      }
  }
  function Sr(l) {
    if (l !== De) return !1;
    if (!zt) return Yg(l), zt = !0, !1;
    var r = l.tag, a;
    if ((a = r !== 3 && r !== 27) && ((a = r === 5) && (a = l.type, a = !(a !== "form" && a !== "button") || Zh(l.type, l.memoizedProps)), a = !a), a && Ft && xl(l), Yg(l), r === 13) {
      if (l = l.memoizedState, l = l !== null ? l.dehydrated : null, !l) throw Error(i(317));
      t: {
        for (l = l.nextSibling, r = 0; l; ) {
          if (l.nodeType === 8)
            if (a = l.data, a === "/$") {
              if (r === 0) {
                Ft = Ti(l.nextSibling);
                break t;
              }
              r--;
            } else
              a !== "$" && a !== "$!" && a !== "$?" || r++;
          l = l.nextSibling;
        }
        Ft = null;
      }
    } else
      r === 27 ? (r = Ft, Wn(l.type) ? (l = Ih, Ih = null, Ft = l) : Ft = r) : Ft = De ? Ti(l.stateNode.nextSibling) : null;
    return !0;
  }
  function br() {
    Ft = De = null, zt = !1;
  }
  function Zg() {
    var l = bl;
    return l !== null && (Le === null ? Le = l : Le.push.apply(
      Le,
      l
    ), bl = null), l;
  }
  function xr(l) {
    bl === null ? bl = [l] : bl.push(l);
  }
  var qf = $(null), wl = null, rn = null;
  function Rn(l, r, a) {
    I(qf, r._currentValue), r._currentValue = a;
  }
  function on(l) {
    l._currentValue = qf.current, tt(qf);
  }
  function _f(l, r, a) {
    for (; l !== null; ) {
      var f = l.alternate;
      if ((l.childLanes & r) !== r ? (l.childLanes |= r, f !== null && (f.childLanes |= r)) : f !== null && (f.childLanes & r) !== r && (f.childLanes |= r), l === a) break;
      l = l.return;
    }
  }
  function Bf(l, r, a, f) {
    var d = l.child;
    for (d !== null && (d.return = l); d !== null; ) {
      var g = d.dependencies;
      if (g !== null) {
        var v = d.child;
        g = g.firstContext;
        t: for (; g !== null; ) {
          var b = g;
          g = d;
          for (var T = 0; T < r.length; T++)
            if (b.context === r[T]) {
              g.lanes |= a, b = g.alternate, b !== null && (b.lanes |= a), _f(
                g.return,
                a,
                l
              ), f || (v = null);
              break t;
            }
          g = b.next;
        }
      } else if (d.tag === 18) {
        if (v = d.return, v === null) throw Error(i(341));
        v.lanes |= a, g = v.alternate, g !== null && (g.lanes |= a), _f(v, a, l), v = null;
      } else v = d.child;
      if (v !== null) v.return = d;
      else
        for (v = d; v !== null; ) {
          if (v === l) {
            v = null;
            break;
          }
          if (d = v.sibling, d !== null) {
            d.return = v.return, v = d;
            break;
          }
          v = v.return;
        }
      d = v;
    }
  }
  function wr(l, r, a, f) {
    l = null;
    for (var d = r, g = !1; d !== null; ) {
      if (!g) {
        if ((d.flags & 524288) !== 0) g = !0;
        else if ((d.flags & 262144) !== 0) break;
      }
      if (d.tag === 10) {
        var v = d.alternate;
        if (v === null) throw Error(i(387));
        if (v = v.memoizedProps, v !== null) {
          var b = d.type;
          Ze(d.pendingProps.value, v.value) || (l !== null ? l.push(b) : l = [b]);
        }
      } else if (d === ke.current) {
        if (v = d.alternate, v === null) throw Error(i(387));
        v.memoizedState.memoizedState !== d.memoizedState.memoizedState && (l !== null ? l.push(Jr) : l = [Jr]);
      }
      d = d.return;
    }
    l !== null && Bf(
      r,
      l,
      a,
      f
    ), r.flags |= 262144;
  }
  function xa(l) {
    for (l = l.firstContext; l !== null; ) {
      if (!Ze(
        l.context._currentValue,
        l.memoizedValue
      ))
        return !0;
      l = l.next;
    }
    return !1;
  }
  function Tl(l) {
    wl = l, rn = null, l = l.dependencies, l !== null && (l.firstContext = null);
  }
  function Ce(l) {
    return Fg(wl, l);
  }
  function wa(l, r) {
    return wl === null && Tl(l), Fg(l, r);
  }
  function Fg(l, r) {
    var a = r._currentValue;
    if (r = { context: r, memoizedValue: a, next: null }, rn === null) {
      if (l === null) throw Error(i(308));
      rn = r, l.dependencies = { lanes: 0, firstContext: r }, l.flags |= 524288;
    } else rn = rn.next = r;
    return a;
  }
  var sk = typeof AbortController < "u" ? AbortController : function() {
    var l = [], r = this.signal = {
      aborted: !1,
      addEventListener: function(a, f) {
        l.push(f);
      }
    };
    this.abort = function() {
      r.aborted = !0, l.forEach(function(a) {
        return a();
      });
    };
  }, rk = n.unstable_scheduleCallback, ok = n.unstable_NormalPriority, oe = {
    $$typeof: W,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
  };
  function Nf() {
    return {
      controller: new sk(),
      data: /* @__PURE__ */ new Map(),
      refCount: 0
    };
  }
  function Tr(l) {
    l.refCount--, l.refCount === 0 && rk(ok, function() {
      l.controller.abort();
    });
  }
  var kr = null, Pf = 0, fs = 0, hs = null;
  function ak(l, r) {
    if (kr === null) {
      var a = kr = [];
      Pf = 0, fs = Uh(), hs = {
        status: "pending",
        value: void 0,
        then: function(f) {
          a.push(f);
        }
      };
    }
    return Pf++, r.then(Kg, Kg), r;
  }
  function Kg() {
    if (--Pf === 0 && kr !== null) {
      hs !== null && (hs.status = "fulfilled");
      var l = kr;
      kr = null, fs = 0, hs = null;
      for (var r = 0; r < l.length; r++) (0, l[r])();
    }
  }
  function uk(l, r) {
    var a = [], f = {
      status: "pending",
      value: null,
      reason: null,
      then: function(d) {
        a.push(d);
      }
    };
    return l.then(
      function() {
        f.status = "fulfilled", f.value = r;
        for (var d = 0; d < a.length; d++) (0, a[d])(r);
      },
      function(d) {
        for (f.status = "rejected", f.reason = d, d = 0; d < a.length; d++)
          (0, a[d])(void 0);
      }
    ), f;
  }
  var Jg = _.S;
  _.S = function(l, r) {
    typeof r == "object" && r !== null && typeof r.then == "function" && ak(l, r), Jg !== null && Jg(l, r);
  };
  var kl = $(null);
  function Lf() {
    var l = kl.current;
    return l !== null ? l : Xt.pooledCache;
  }
  function Ta(l, r) {
    r === null ? I(kl, kl.current) : I(kl, r.pool);
  }
  function Ig() {
    var l = Lf();
    return l === null ? null : { parent: oe._currentValue, pool: l };
  }
  var Ar = Error(i(460)), t0 = Error(i(474)), ka = Error(i(542)), Uf = { then: function() {
  } };
  function e0(l) {
    return l = l.status, l === "fulfilled" || l === "rejected";
  }
  function Aa() {
  }
  function i0(l, r, a) {
    switch (a = l[a], a === void 0 ? l.push(r) : a !== r && (r.then(Aa, Aa), r = a), r.status) {
      case "fulfilled":
        return r.value;
      case "rejected":
        throw l = r.reason, l0(l), l;
      default:
        if (typeof r.status == "string") r.then(Aa, Aa);
        else {
          if (l = Xt, l !== null && 100 < l.shellSuspendCounter)
            throw Error(i(482));
          l = r, l.status = "pending", l.then(
            function(f) {
              if (r.status === "pending") {
                var d = r;
                d.status = "fulfilled", d.value = f;
              }
            },
            function(f) {
              if (r.status === "pending") {
                var d = r;
                d.status = "rejected", d.reason = f;
              }
            }
          );
        }
        switch (r.status) {
          case "fulfilled":
            return r.value;
          case "rejected":
            throw l = r.reason, l0(l), l;
        }
        throw Cr = r, Ar;
    }
  }
  var Cr = null;
  function n0() {
    if (Cr === null) throw Error(i(459));
    var l = Cr;
    return Cr = null, l;
  }
  function l0(l) {
    if (l === Ar || l === ka)
      throw Error(i(483));
  }
  var Dn = !1;
  function Vf(l) {
    l.updateQueue = {
      baseState: l.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: { pending: null, lanes: 0, hiddenCallbacks: null },
      callbacks: null
    };
  }
  function Hf(l, r) {
    l = l.updateQueue, r.updateQueue === l && (r.updateQueue = {
      baseState: l.baseState,
      firstBaseUpdate: l.firstBaseUpdate,
      lastBaseUpdate: l.lastBaseUpdate,
      shared: l.shared,
      callbacks: null
    });
  }
  function zn(l) {
    return { lane: l, tag: 0, payload: null, callback: null, next: null };
  }
  function qn(l, r, a) {
    var f = l.updateQueue;
    if (f === null) return null;
    if (f = f.shared, (qt & 2) !== 0) {
      var d = f.pending;
      return d === null ? r.next = r : (r.next = d.next, d.next = r), f.pending = r, r = ya(l), $g(l, null, a), r;
    }
    return Oa(l, f, r, a), ya(l);
  }
  function Er(l, r, a) {
    if (r = r.updateQueue, r !== null && (r = r.shared, (a & 4194048) !== 0)) {
      var f = r.lanes;
      f &= l.pendingLanes, a |= f, r.lanes = a, Km(l, a);
    }
  }
  function Xf(l, r) {
    var a = l.updateQueue, f = l.alternate;
    if (f !== null && (f = f.updateQueue, a === f)) {
      var d = null, g = null;
      if (a = a.firstBaseUpdate, a !== null) {
        do {
          var v = {
            lane: a.lane,
            tag: a.tag,
            payload: a.payload,
            callback: null,
            next: null
          };
          g === null ? d = g = v : g = g.next = v, a = a.next;
        } while (a !== null);
        g === null ? d = g = r : g = g.next = r;
      } else d = g = r;
      a = {
        baseState: f.baseState,
        firstBaseUpdate: d,
        lastBaseUpdate: g,
        shared: f.shared,
        callbacks: f.callbacks
      }, l.updateQueue = a;
      return;
    }
    l = a.lastBaseUpdate, l === null ? a.firstBaseUpdate = r : l.next = r, a.lastBaseUpdate = r;
  }
  var $f = !1;
  function Mr() {
    if ($f) {
      var l = hs;
      if (l !== null) throw l;
    }
  }
  function Qr(l, r, a, f) {
    $f = !1;
    var d = l.updateQueue;
    Dn = !1;
    var g = d.firstBaseUpdate, v = d.lastBaseUpdate, b = d.shared.pending;
    if (b !== null) {
      d.shared.pending = null;
      var T = b, D = T.next;
      T.next = null, v === null ? g = D : v.next = D, v = T;
      var L = l.alternate;
      L !== null && (L = L.updateQueue, b = L.lastBaseUpdate, b !== v && (b === null ? L.firstBaseUpdate = D : b.next = D, L.lastBaseUpdate = T));
    }
    if (g !== null) {
      var j = d.baseState;
      v = 0, L = D = T = null, b = g;
      do {
        var q = b.lane & -536870913, B = q !== b.lane;
        if (B ? (Ct & q) === q : (f & q) === q) {
          q !== 0 && q === fs && ($f = !0), L !== null && (L = L.next = {
            lane: 0,
            tag: b.tag,
            payload: b.payload,
            callback: null,
            next: null
          });
          t: {
            var Ot = l, pt = b;
            q = r;
            var Pt = a;
            switch (pt.tag) {
              case 1:
                if (Ot = pt.payload, typeof Ot == "function") {
                  j = Ot.call(Pt, j, q);
                  break t;
                }
                j = Ot;
                break t;
              case 3:
                Ot.flags = Ot.flags & -65537 | 128;
              case 0:
                if (Ot = pt.payload, q = typeof Ot == "function" ? Ot.call(Pt, j, q) : Ot, q == null) break t;
                j = m({}, j, q);
                break t;
              case 2:
                Dn = !0;
            }
          }
          q = b.callback, q !== null && (l.flags |= 64, B && (l.flags |= 8192), B = d.callbacks, B === null ? d.callbacks = [q] : B.push(q));
        } else
          B = {
            lane: q,
            tag: b.tag,
            payload: b.payload,
            callback: b.callback,
            next: null
          }, L === null ? (D = L = B, T = j) : L = L.next = B, v |= q;
        if (b = b.next, b === null) {
          if (b = d.shared.pending, b === null)
            break;
          B = b, b = B.next, B.next = null, d.lastBaseUpdate = B, d.shared.pending = null;
        }
      } while (!0);
      L === null && (T = j), d.baseState = T, d.firstBaseUpdate = D, d.lastBaseUpdate = L, g === null && (d.shared.lanes = 0), Hn |= v, l.lanes = v, l.memoizedState = j;
    }
  }
  function s0(l, r) {
    if (typeof l != "function")
      throw Error(i(191, l));
    l.call(r);
  }
  function r0(l, r) {
    var a = l.callbacks;
    if (a !== null)
      for (l.callbacks = null, l = 0; l < a.length; l++)
        s0(a[l], r);
  }
  var ds = $(null), Ca = $(0);
  function o0(l, r) {
    l = pn, I(Ca, l), I(ds, r), pn = l | r.baseLanes;
  }
  function jf() {
    I(Ca, pn), I(ds, ds.current);
  }
  function Wf() {
    pn = Ca.current, tt(ds), tt(Ca);
  }
  var _n = 0, bt = null, Bt = null, ie = null, Ea = !1, ps = !1, Al = !1, Ma = 0, Rr = 0, ms = null, ck = 0;
  function Jt() {
    throw Error(i(321));
  }
  function Gf(l, r) {
    if (r === null) return !1;
    for (var a = 0; a < r.length && a < l.length; a++)
      if (!Ze(l[a], r[a])) return !1;
    return !0;
  }
  function Yf(l, r, a, f, d, g) {
    return _n = g, bt = r, r.memoizedState = null, r.updateQueue = null, r.lanes = 0, _.H = l === null || l.memoizedState === null ? $0 : j0, Al = !1, g = a(f, d), Al = !1, ps && (g = u0(
      r,
      a,
      f,
      d
    )), a0(l), g;
  }
  function a0(l) {
    _.H = _a;
    var r = Bt !== null && Bt.next !== null;
    if (_n = 0, ie = Bt = bt = null, Ea = !1, Rr = 0, ms = null, r) throw Error(i(300));
    l === null || he || (l = l.dependencies, l !== null && xa(l) && (he = !0));
  }
  function u0(l, r, a, f) {
    bt = l;
    var d = 0;
    do {
      if (ps && (ms = null), Rr = 0, ps = !1, 25 <= d) throw Error(i(301));
      if (d += 1, ie = Bt = null, l.updateQueue != null) {
        var g = l.updateQueue;
        g.lastEffect = null, g.events = null, g.stores = null, g.memoCache != null && (g.memoCache.index = 0);
      }
      _.H = Ok, g = r(a, f);
    } while (ps);
    return g;
  }
  function fk() {
    var l = _.H, r = l.useState()[0];
    return r = typeof r.then == "function" ? Dr(r) : r, l = l.useState()[0], (Bt !== null ? Bt.memoizedState : null) !== l && (bt.flags |= 1024), r;
  }
  function Zf() {
    var l = Ma !== 0;
    return Ma = 0, l;
  }
  function Ff(l, r, a) {
    r.updateQueue = l.updateQueue, r.flags &= -2053, l.lanes &= ~a;
  }
  function Kf(l) {
    if (Ea) {
      for (l = l.memoizedState; l !== null; ) {
        var r = l.queue;
        r !== null && (r.pending = null), l = l.next;
      }
      Ea = !1;
    }
    _n = 0, ie = Bt = bt = null, ps = !1, Rr = Ma = 0, ms = null;
  }
  function Ne() {
    var l = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    return ie === null ? bt.memoizedState = ie = l : ie = ie.next = l, ie;
  }
  function ne() {
    if (Bt === null) {
      var l = bt.alternate;
      l = l !== null ? l.memoizedState : null;
    } else l = Bt.next;
    var r = ie === null ? bt.memoizedState : ie.next;
    if (r !== null)
      ie = r, Bt = l;
    else {
      if (l === null)
        throw bt.alternate === null ? Error(i(467)) : Error(i(310));
      Bt = l, l = {
        memoizedState: Bt.memoizedState,
        baseState: Bt.baseState,
        baseQueue: Bt.baseQueue,
        queue: Bt.queue,
        next: null
      }, ie === null ? bt.memoizedState = ie = l : ie = ie.next = l;
    }
    return ie;
  }
  function Jf() {
    return { lastEffect: null, events: null, stores: null, memoCache: null };
  }
  function Dr(l) {
    var r = Rr;
    return Rr += 1, ms === null && (ms = []), l = i0(ms, l, r), r = bt, (ie === null ? r.memoizedState : ie.next) === null && (r = r.alternate, _.H = r === null || r.memoizedState === null ? $0 : j0), l;
  }
  function Qa(l) {
    if (l !== null && typeof l == "object") {
      if (typeof l.then == "function") return Dr(l);
      if (l.$$typeof === W) return Ce(l);
    }
    throw Error(i(438, String(l)));
  }
  function If(l) {
    var r = null, a = bt.updateQueue;
    if (a !== null && (r = a.memoCache), r == null) {
      var f = bt.alternate;
      f !== null && (f = f.updateQueue, f !== null && (f = f.memoCache, f != null && (r = {
        data: f.data.map(function(d) {
          return d.slice();
        }),
        index: 0
      })));
    }
    if (r == null && (r = { data: [], index: 0 }), a === null && (a = Jf(), bt.updateQueue = a), a.memoCache = r, a = r.data[r.index], a === void 0)
      for (a = r.data[r.index] = Array(l), f = 0; f < l; f++)
        a[f] = J;
    return r.index++, a;
  }
  function an(l, r) {
    return typeof r == "function" ? r(l) : r;
  }
  function Ra(l) {
    var r = ne();
    return th(r, Bt, l);
  }
  function th(l, r, a) {
    var f = l.queue;
    if (f === null) throw Error(i(311));
    f.lastRenderedReducer = a;
    var d = l.baseQueue, g = f.pending;
    if (g !== null) {
      if (d !== null) {
        var v = d.next;
        d.next = g.next, g.next = v;
      }
      r.baseQueue = d = g, f.pending = null;
    }
    if (g = l.baseState, d === null) l.memoizedState = g;
    else {
      r = d.next;
      var b = v = null, T = null, D = r, L = !1;
      do {
        var j = D.lane & -536870913;
        if (j !== D.lane ? (Ct & j) === j : (_n & j) === j) {
          var q = D.revertLane;
          if (q === 0)
            T !== null && (T = T.next = {
              lane: 0,
              revertLane: 0,
              action: D.action,
              hasEagerState: D.hasEagerState,
              eagerState: D.eagerState,
              next: null
            }), j === fs && (L = !0);
          else if ((_n & q) === q) {
            D = D.next, q === fs && (L = !0);
            continue;
          } else
            j = {
              lane: 0,
              revertLane: D.revertLane,
              action: D.action,
              hasEagerState: D.hasEagerState,
              eagerState: D.eagerState,
              next: null
            }, T === null ? (b = T = j, v = g) : T = T.next = j, bt.lanes |= q, Hn |= q;
          j = D.action, Al && a(g, j), g = D.hasEagerState ? D.eagerState : a(g, j);
        } else
          q = {
            lane: j,
            revertLane: D.revertLane,
            action: D.action,
            hasEagerState: D.hasEagerState,
            eagerState: D.eagerState,
            next: null
          }, T === null ? (b = T = q, v = g) : T = T.next = q, bt.lanes |= j, Hn |= j;
        D = D.next;
      } while (D !== null && D !== r);
      if (T === null ? v = g : T.next = b, !Ze(g, l.memoizedState) && (he = !0, L && (a = hs, a !== null)))
        throw a;
      l.memoizedState = g, l.baseState = v, l.baseQueue = T, f.lastRenderedState = g;
    }
    return d === null && (f.lanes = 0), [l.memoizedState, f.dispatch];
  }
  function eh(l) {
    var r = ne(), a = r.queue;
    if (a === null) throw Error(i(311));
    a.lastRenderedReducer = l;
    var f = a.dispatch, d = a.pending, g = r.memoizedState;
    if (d !== null) {
      a.pending = null;
      var v = d = d.next;
      do
        g = l(g, v.action), v = v.next;
      while (v !== d);
      Ze(g, r.memoizedState) || (he = !0), r.memoizedState = g, r.baseQueue === null && (r.baseState = g), a.lastRenderedState = g;
    }
    return [g, f];
  }
  function c0(l, r, a) {
    var f = bt, d = ne(), g = zt;
    if (g) {
      if (a === void 0) throw Error(i(407));
      a = a();
    } else a = r();
    var v = !Ze(
      (Bt || d).memoizedState,
      a
    );
    v && (d.memoizedState = a, he = !0), d = d.queue;
    var b = d0.bind(null, f, d, l);
    if (zr(2048, 8, b, [l]), d.getSnapshot !== r || v || ie !== null && ie.memoizedState.tag & 1) {
      if (f.flags |= 2048, gs(
        9,
        Da(),
        h0.bind(
          null,
          f,
          d,
          a,
          r
        ),
        null
      ), Xt === null) throw Error(i(349));
      g || (_n & 124) !== 0 || f0(f, r, a);
    }
    return a;
  }
  function f0(l, r, a) {
    l.flags |= 16384, l = { getSnapshot: r, value: a }, r = bt.updateQueue, r === null ? (r = Jf(), bt.updateQueue = r, r.stores = [l]) : (a = r.stores, a === null ? r.stores = [l] : a.push(l));
  }
  function h0(l, r, a, f) {
    r.value = a, r.getSnapshot = f, p0(r) && m0(l);
  }
  function d0(l, r, a) {
    return a(function() {
      p0(r) && m0(l);
    });
  }
  function p0(l) {
    var r = l.getSnapshot;
    l = l.value;
    try {
      var a = r();
      return !Ze(l, a);
    } catch {
      return !0;
    }
  }
  function m0(l) {
    var r = os(l, 2);
    r !== null && ei(r, l, 2);
  }
  function ih(l) {
    var r = Ne();
    if (typeof l == "function") {
      var a = l;
      if (l = a(), Al) {
        En(!0);
        try {
          a();
        } finally {
          En(!1);
        }
      }
    }
    return r.memoizedState = r.baseState = l, r.queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: an,
      lastRenderedState: l
    }, r;
  }
  function g0(l, r, a, f) {
    return l.baseState = a, th(
      l,
      Bt,
      typeof f == "function" ? f : an
    );
  }
  function hk(l, r, a, f, d) {
    if (qa(l)) throw Error(i(485));
    if (l = r.action, l !== null) {
      var g = {
        payload: d,
        action: l,
        next: null,
        isTransition: !0,
        status: "pending",
        value: null,
        reason: null,
        listeners: [],
        then: function(v) {
          g.listeners.push(v);
        }
      };
      _.T !== null ? a(!0) : g.isTransition = !1, f(g), a = r.pending, a === null ? (g.next = r.pending = g, O0(r, g)) : (g.next = a.next, r.pending = a.next = g);
    }
  }
  function O0(l, r) {
    var a = r.action, f = r.payload, d = l.state;
    if (r.isTransition) {
      var g = _.T, v = {};
      _.T = v;
      try {
        var b = a(d, f), T = _.S;
        T !== null && T(v, b), y0(l, r, b);
      } catch (D) {
        nh(l, r, D);
      } finally {
        _.T = g;
      }
    } else
      try {
        g = a(d, f), y0(l, r, g);
      } catch (D) {
        nh(l, r, D);
      }
  }
  function y0(l, r, a) {
    a !== null && typeof a == "object" && typeof a.then == "function" ? a.then(
      function(f) {
        v0(l, r, f);
      },
      function(f) {
        return nh(l, r, f);
      }
    ) : v0(l, r, a);
  }
  function v0(l, r, a) {
    r.status = "fulfilled", r.value = a, S0(r), l.state = a, r = l.pending, r !== null && (a = r.next, a === r ? l.pending = null : (a = a.next, r.next = a, O0(l, a)));
  }
  function nh(l, r, a) {
    var f = l.pending;
    if (l.pending = null, f !== null) {
      f = f.next;
      do
        r.status = "rejected", r.reason = a, S0(r), r = r.next;
      while (r !== f);
    }
    l.action = null;
  }
  function S0(l) {
    l = l.listeners;
    for (var r = 0; r < l.length; r++) (0, l[r])();
  }
  function b0(l, r) {
    return r;
  }
  function x0(l, r) {
    if (zt) {
      var a = Xt.formState;
      if (a !== null) {
        t: {
          var f = bt;
          if (zt) {
            if (Ft) {
              e: {
                for (var d = Ft, g = Ri; d.nodeType !== 8; ) {
                  if (!g) {
                    d = null;
                    break e;
                  }
                  if (d = Ti(
                    d.nextSibling
                  ), d === null) {
                    d = null;
                    break e;
                  }
                }
                g = d.data, d = g === "F!" || g === "F" ? d : null;
              }
              if (d) {
                Ft = Ti(
                  d.nextSibling
                ), f = d.data === "F!";
                break t;
              }
            }
            xl(f);
          }
          f = !1;
        }
        f && (r = a[0]);
      }
    }
    return a = Ne(), a.memoizedState = a.baseState = r, f = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: b0,
      lastRenderedState: r
    }, a.queue = f, a = V0.bind(
      null,
      bt,
      f
    ), f.dispatch = a, f = ih(!1), g = ah.bind(
      null,
      bt,
      !1,
      f.queue
    ), f = Ne(), d = {
      state: r,
      dispatch: null,
      action: l,
      pending: null
    }, f.queue = d, a = hk.bind(
      null,
      bt,
      d,
      g,
      a
    ), d.dispatch = a, f.memoizedState = l, [r, a, !1];
  }
  function w0(l) {
    var r = ne();
    return T0(r, Bt, l);
  }
  function T0(l, r, a) {
    if (r = th(
      l,
      r,
      b0
    )[0], l = Ra(an)[0], typeof r == "object" && r !== null && typeof r.then == "function")
      try {
        var f = Dr(r);
      } catch (v) {
        throw v === Ar ? ka : v;
      }
    else f = r;
    r = ne();
    var d = r.queue, g = d.dispatch;
    return a !== r.memoizedState && (bt.flags |= 2048, gs(
      9,
      Da(),
      dk.bind(null, d, a),
      null
    )), [f, g, l];
  }
  function dk(l, r) {
    l.action = r;
  }
  function k0(l) {
    var r = ne(), a = Bt;
    if (a !== null)
      return T0(r, a, l);
    ne(), r = r.memoizedState, a = ne();
    var f = a.queue.dispatch;
    return a.memoizedState = l, [r, f, !1];
  }
  function gs(l, r, a, f) {
    return l = { tag: l, create: a, deps: f, inst: r, next: null }, r = bt.updateQueue, r === null && (r = Jf(), bt.updateQueue = r), a = r.lastEffect, a === null ? r.lastEffect = l.next = l : (f = a.next, a.next = l, l.next = f, r.lastEffect = l), l;
  }
  function Da() {
    return { destroy: void 0, resource: void 0 };
  }
  function A0() {
    return ne().memoizedState;
  }
  function za(l, r, a, f) {
    var d = Ne();
    f = f === void 0 ? null : f, bt.flags |= l, d.memoizedState = gs(
      1 | r,
      Da(),
      a,
      f
    );
  }
  function zr(l, r, a, f) {
    var d = ne();
    f = f === void 0 ? null : f;
    var g = d.memoizedState.inst;
    Bt !== null && f !== null && Gf(f, Bt.memoizedState.deps) ? d.memoizedState = gs(r, g, a, f) : (bt.flags |= l, d.memoizedState = gs(
      1 | r,
      g,
      a,
      f
    ));
  }
  function C0(l, r) {
    za(8390656, 8, l, r);
  }
  function E0(l, r) {
    zr(2048, 8, l, r);
  }
  function M0(l, r) {
    return zr(4, 2, l, r);
  }
  function Q0(l, r) {
    return zr(4, 4, l, r);
  }
  function R0(l, r) {
    if (typeof r == "function") {
      l = l();
      var a = r(l);
      return function() {
        typeof a == "function" ? a() : r(null);
      };
    }
    if (r != null)
      return l = l(), r.current = l, function() {
        r.current = null;
      };
  }
  function D0(l, r, a) {
    a = a != null ? a.concat([l]) : null, zr(4, 4, R0.bind(null, r, l), a);
  }
  function lh() {
  }
  function z0(l, r) {
    var a = ne();
    r = r === void 0 ? null : r;
    var f = a.memoizedState;
    return r !== null && Gf(r, f[1]) ? f[0] : (a.memoizedState = [l, r], l);
  }
  function q0(l, r) {
    var a = ne();
    r = r === void 0 ? null : r;
    var f = a.memoizedState;
    if (r !== null && Gf(r, f[1]))
      return f[0];
    if (f = l(), Al) {
      En(!0);
      try {
        l();
      } finally {
        En(!1);
      }
    }
    return a.memoizedState = [f, r], f;
  }
  function sh(l, r, a) {
    return a === void 0 || (_n & 1073741824) !== 0 ? l.memoizedState = r : (l.memoizedState = a, l = NO(), bt.lanes |= l, Hn |= l, a);
  }
  function _0(l, r, a, f) {
    return Ze(a, r) ? a : ds.current !== null ? (l = sh(l, a, f), Ze(l, r) || (he = !0), l) : (_n & 42) === 0 ? (he = !0, l.memoizedState = a) : (l = NO(), bt.lanes |= l, Hn |= l, r);
  }
  function B0(l, r, a, f, d) {
    var g = P.p;
    P.p = g !== 0 && 8 > g ? g : 8;
    var v = _.T, b = {};
    _.T = b, ah(l, !1, r, a);
    try {
      var T = d(), D = _.S;
      if (D !== null && D(b, T), T !== null && typeof T == "object" && typeof T.then == "function") {
        var L = uk(
          T,
          f
        );
        qr(
          l,
          r,
          L,
          ti(l)
        );
      } else
        qr(
          l,
          r,
          f,
          ti(l)
        );
    } catch (j) {
      qr(
        l,
        r,
        { then: function() {
        }, status: "rejected", reason: j },
        ti()
      );
    } finally {
      P.p = g, _.T = v;
    }
  }
  function pk() {
  }
  function rh(l, r, a, f) {
    if (l.tag !== 5) throw Error(i(476));
    var d = N0(l).queue;
    B0(
      l,
      d,
      r,
      nt,
      a === null ? pk : function() {
        return P0(l), a(f);
      }
    );
  }
  function N0(l) {
    var r = l.memoizedState;
    if (r !== null) return r;
    r = {
      memoizedState: nt,
      baseState: nt,
      baseQueue: null,
      queue: {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: an,
        lastRenderedState: nt
      },
      next: null
    };
    var a = {};
    return r.next = {
      memoizedState: a,
      baseState: a,
      baseQueue: null,
      queue: {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: an,
        lastRenderedState: a
      },
      next: null
    }, l.memoizedState = r, l = l.alternate, l !== null && (l.memoizedState = r), r;
  }
  function P0(l) {
    var r = N0(l).next.queue;
    qr(l, r, {}, ti());
  }
  function oh() {
    return Ce(Jr);
  }
  function L0() {
    return ne().memoizedState;
  }
  function U0() {
    return ne().memoizedState;
  }
  function mk(l) {
    for (var r = l.return; r !== null; ) {
      switch (r.tag) {
        case 24:
        case 3:
          var a = ti();
          l = zn(a);
          var f = qn(r, l, a);
          f !== null && (ei(f, r, a), Er(f, r, a)), r = { cache: Nf() }, l.payload = r;
          return;
      }
      r = r.return;
    }
  }
  function gk(l, r, a) {
    var f = ti();
    a = {
      lane: f,
      revertLane: 0,
      action: a,
      hasEagerState: !1,
      eagerState: null,
      next: null
    }, qa(l) ? H0(r, a) : (a = Cf(l, r, a, f), a !== null && (ei(a, l, f), X0(a, r, f)));
  }
  function V0(l, r, a) {
    var f = ti();
    qr(l, r, a, f);
  }
  function qr(l, r, a, f) {
    var d = {
      lane: f,
      revertLane: 0,
      action: a,
      hasEagerState: !1,
      eagerState: null,
      next: null
    };
    if (qa(l)) H0(r, d);
    else {
      var g = l.alternate;
      if (l.lanes === 0 && (g === null || g.lanes === 0) && (g = r.lastRenderedReducer, g !== null))
        try {
          var v = r.lastRenderedState, b = g(v, a);
          if (d.hasEagerState = !0, d.eagerState = b, Ze(b, v))
            return Oa(l, r, d, 0), Xt === null && ga(), !1;
        } catch {
        } finally {
        }
      if (a = Cf(l, r, d, f), a !== null)
        return ei(a, l, f), X0(a, r, f), !0;
    }
    return !1;
  }
  function ah(l, r, a, f) {
    if (f = {
      lane: 2,
      revertLane: Uh(),
      action: f,
      hasEagerState: !1,
      eagerState: null,
      next: null
    }, qa(l)) {
      if (r) throw Error(i(479));
    } else
      r = Cf(
        l,
        a,
        f,
        2
      ), r !== null && ei(r, l, 2);
  }
  function qa(l) {
    var r = l.alternate;
    return l === bt || r !== null && r === bt;
  }
  function H0(l, r) {
    ps = Ea = !0;
    var a = l.pending;
    a === null ? r.next = r : (r.next = a.next, a.next = r), l.pending = r;
  }
  function X0(l, r, a) {
    if ((a & 4194048) !== 0) {
      var f = r.lanes;
      f &= l.pendingLanes, a |= f, r.lanes = a, Km(l, a);
    }
  }
  var _a = {
    readContext: Ce,
    use: Qa,
    useCallback: Jt,
    useContext: Jt,
    useEffect: Jt,
    useImperativeHandle: Jt,
    useLayoutEffect: Jt,
    useInsertionEffect: Jt,
    useMemo: Jt,
    useReducer: Jt,
    useRef: Jt,
    useState: Jt,
    useDebugValue: Jt,
    useDeferredValue: Jt,
    useTransition: Jt,
    useSyncExternalStore: Jt,
    useId: Jt,
    useHostTransitionStatus: Jt,
    useFormState: Jt,
    useActionState: Jt,
    useOptimistic: Jt,
    useMemoCache: Jt,
    useCacheRefresh: Jt
  }, $0 = {
    readContext: Ce,
    use: Qa,
    useCallback: function(l, r) {
      return Ne().memoizedState = [
        l,
        r === void 0 ? null : r
      ], l;
    },
    useContext: Ce,
    useEffect: C0,
    useImperativeHandle: function(l, r, a) {
      a = a != null ? a.concat([l]) : null, za(
        4194308,
        4,
        R0.bind(null, r, l),
        a
      );
    },
    useLayoutEffect: function(l, r) {
      return za(4194308, 4, l, r);
    },
    useInsertionEffect: function(l, r) {
      za(4, 2, l, r);
    },
    useMemo: function(l, r) {
      var a = Ne();
      r = r === void 0 ? null : r;
      var f = l();
      if (Al) {
        En(!0);
        try {
          l();
        } finally {
          En(!1);
        }
      }
      return a.memoizedState = [f, r], f;
    },
    useReducer: function(l, r, a) {
      var f = Ne();
      if (a !== void 0) {
        var d = a(r);
        if (Al) {
          En(!0);
          try {
            a(r);
          } finally {
            En(!1);
          }
        }
      } else d = r;
      return f.memoizedState = f.baseState = d, l = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: l,
        lastRenderedState: d
      }, f.queue = l, l = l.dispatch = gk.bind(
        null,
        bt,
        l
      ), [f.memoizedState, l];
    },
    useRef: function(l) {
      var r = Ne();
      return l = { current: l }, r.memoizedState = l;
    },
    useState: function(l) {
      l = ih(l);
      var r = l.queue, a = V0.bind(null, bt, r);
      return r.dispatch = a, [l.memoizedState, a];
    },
    useDebugValue: lh,
    useDeferredValue: function(l, r) {
      var a = Ne();
      return sh(a, l, r);
    },
    useTransition: function() {
      var l = ih(!1);
      return l = B0.bind(
        null,
        bt,
        l.queue,
        !0,
        !1
      ), Ne().memoizedState = l, [!1, l];
    },
    useSyncExternalStore: function(l, r, a) {
      var f = bt, d = Ne();
      if (zt) {
        if (a === void 0)
          throw Error(i(407));
        a = a();
      } else {
        if (a = r(), Xt === null)
          throw Error(i(349));
        (Ct & 124) !== 0 || f0(f, r, a);
      }
      d.memoizedState = a;
      var g = { value: a, getSnapshot: r };
      return d.queue = g, C0(d0.bind(null, f, g, l), [
        l
      ]), f.flags |= 2048, gs(
        9,
        Da(),
        h0.bind(
          null,
          f,
          g,
          a,
          r
        ),
        null
      ), a;
    },
    useId: function() {
      var l = Ne(), r = Xt.identifierPrefix;
      if (zt) {
        var a = sn, f = ln;
        a = (f & ~(1 << 32 - Ye(f) - 1)).toString(32) + a, r = "«" + r + "R" + a, a = Ma++, 0 < a && (r += "H" + a.toString(32)), r += "»";
      } else
        a = ck++, r = "«" + r + "r" + a.toString(32) + "»";
      return l.memoizedState = r;
    },
    useHostTransitionStatus: oh,
    useFormState: x0,
    useActionState: x0,
    useOptimistic: function(l) {
      var r = Ne();
      r.memoizedState = r.baseState = l;
      var a = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
      };
      return r.queue = a, r = ah.bind(
        null,
        bt,
        !0,
        a
      ), a.dispatch = r, [l, r];
    },
    useMemoCache: If,
    useCacheRefresh: function() {
      return Ne().memoizedState = mk.bind(
        null,
        bt
      );
    }
  }, j0 = {
    readContext: Ce,
    use: Qa,
    useCallback: z0,
    useContext: Ce,
    useEffect: E0,
    useImperativeHandle: D0,
    useInsertionEffect: M0,
    useLayoutEffect: Q0,
    useMemo: q0,
    useReducer: Ra,
    useRef: A0,
    useState: function() {
      return Ra(an);
    },
    useDebugValue: lh,
    useDeferredValue: function(l, r) {
      var a = ne();
      return _0(
        a,
        Bt.memoizedState,
        l,
        r
      );
    },
    useTransition: function() {
      var l = Ra(an)[0], r = ne().memoizedState;
      return [
        typeof l == "boolean" ? l : Dr(l),
        r
      ];
    },
    useSyncExternalStore: c0,
    useId: L0,
    useHostTransitionStatus: oh,
    useFormState: w0,
    useActionState: w0,
    useOptimistic: function(l, r) {
      var a = ne();
      return g0(a, Bt, l, r);
    },
    useMemoCache: If,
    useCacheRefresh: U0
  }, Ok = {
    readContext: Ce,
    use: Qa,
    useCallback: z0,
    useContext: Ce,
    useEffect: E0,
    useImperativeHandle: D0,
    useInsertionEffect: M0,
    useLayoutEffect: Q0,
    useMemo: q0,
    useReducer: eh,
    useRef: A0,
    useState: function() {
      return eh(an);
    },
    useDebugValue: lh,
    useDeferredValue: function(l, r) {
      var a = ne();
      return Bt === null ? sh(a, l, r) : _0(
        a,
        Bt.memoizedState,
        l,
        r
      );
    },
    useTransition: function() {
      var l = eh(an)[0], r = ne().memoizedState;
      return [
        typeof l == "boolean" ? l : Dr(l),
        r
      ];
    },
    useSyncExternalStore: c0,
    useId: L0,
    useHostTransitionStatus: oh,
    useFormState: k0,
    useActionState: k0,
    useOptimistic: function(l, r) {
      var a = ne();
      return Bt !== null ? g0(a, Bt, l, r) : (a.baseState = l, [l, a.queue.dispatch]);
    },
    useMemoCache: If,
    useCacheRefresh: U0
  }, Os = null, _r = 0;
  function Ba(l) {
    var r = _r;
    return _r += 1, Os === null && (Os = []), i0(Os, l, r);
  }
  function Br(l, r) {
    r = r.props.ref, l.ref = r !== void 0 ? r : null;
  }
  function Na(l, r) {
    throw r.$$typeof === O ? Error(i(525)) : (l = Object.prototype.toString.call(r), Error(
      i(
        31,
        l === "[object Object]" ? "object with keys {" + Object.keys(r).join(", ") + "}" : l
      )
    ));
  }
  function W0(l) {
    var r = l._init;
    return r(l._payload);
  }
  function G0(l) {
    function r(E, A) {
      if (l) {
        var Q = E.deletions;
        Q === null ? (E.deletions = [A], E.flags |= 16) : Q.push(A);
      }
    }
    function a(E, A) {
      if (!l) return null;
      for (; A !== null; )
        r(E, A), A = A.sibling;
      return null;
    }
    function f(E) {
      for (var A = /* @__PURE__ */ new Map(); E !== null; )
        E.key !== null ? A.set(E.key, E) : A.set(E.index, E), E = E.sibling;
      return A;
    }
    function d(E, A) {
      return E = nn(E, A), E.index = 0, E.sibling = null, E;
    }
    function g(E, A, Q) {
      return E.index = Q, l ? (Q = E.alternate, Q !== null ? (Q = Q.index, Q < A ? (E.flags |= 67108866, A) : Q) : (E.flags |= 67108866, A)) : (E.flags |= 1048576, A);
    }
    function v(E) {
      return l && E.alternate === null && (E.flags |= 67108866), E;
    }
    function b(E, A, Q, H) {
      return A === null || A.tag !== 6 ? (A = Mf(Q, E.mode, H), A.return = E, A) : (A = d(A, Q), A.return = E, A);
    }
    function T(E, A, Q, H) {
      var rt = Q.type;
      return rt === x ? L(
        E,
        A,
        Q.props.children,
        H,
        Q.key
      ) : A !== null && (A.elementType === rt || typeof rt == "object" && rt !== null && rt.$$typeof === K && W0(rt) === A.type) ? (A = d(A, Q.props), Br(A, Q), A.return = E, A) : (A = va(
        Q.type,
        Q.key,
        Q.props,
        null,
        E.mode,
        H
      ), Br(A, Q), A.return = E, A);
    }
    function D(E, A, Q, H) {
      return A === null || A.tag !== 4 || A.stateNode.containerInfo !== Q.containerInfo || A.stateNode.implementation !== Q.implementation ? (A = Qf(Q, E.mode, H), A.return = E, A) : (A = d(A, Q.children || []), A.return = E, A);
    }
    function L(E, A, Q, H, rt) {
      return A === null || A.tag !== 7 ? (A = yl(
        Q,
        E.mode,
        H,
        rt
      ), A.return = E, A) : (A = d(A, Q), A.return = E, A);
    }
    function j(E, A, Q) {
      if (typeof A == "string" && A !== "" || typeof A == "number" || typeof A == "bigint")
        return A = Mf(
          "" + A,
          E.mode,
          Q
        ), A.return = E, A;
      if (typeof A == "object" && A !== null) {
        switch (A.$$typeof) {
          case y:
            return Q = va(
              A.type,
              A.key,
              A.props,
              null,
              E.mode,
              Q
            ), Br(Q, A), Q.return = E, Q;
          case S:
            return A = Qf(
              A,
              E.mode,
              Q
            ), A.return = E, A;
          case K:
            var H = A._init;
            return A = H(A._payload), j(E, A, Q);
        }
        if (ht(A) || V(A))
          return A = yl(
            A,
            E.mode,
            Q,
            null
          ), A.return = E, A;
        if (typeof A.then == "function")
          return j(E, Ba(A), Q);
        if (A.$$typeof === W)
          return j(
            E,
            wa(E, A),
            Q
          );
        Na(E, A);
      }
      return null;
    }
    function q(E, A, Q, H) {
      var rt = A !== null ? A.key : null;
      if (typeof Q == "string" && Q !== "" || typeof Q == "number" || typeof Q == "bigint")
        return rt !== null ? null : b(E, A, "" + Q, H);
      if (typeof Q == "object" && Q !== null) {
        switch (Q.$$typeof) {
          case y:
            return Q.key === rt ? T(E, A, Q, H) : null;
          case S:
            return Q.key === rt ? D(E, A, Q, H) : null;
          case K:
            return rt = Q._init, Q = rt(Q._payload), q(E, A, Q, H);
        }
        if (ht(Q) || V(Q))
          return rt !== null ? null : L(E, A, Q, H, null);
        if (typeof Q.then == "function")
          return q(
            E,
            A,
            Ba(Q),
            H
          );
        if (Q.$$typeof === W)
          return q(
            E,
            A,
            wa(E, Q),
            H
          );
        Na(E, Q);
      }
      return null;
    }
    function B(E, A, Q, H, rt) {
      if (typeof H == "string" && H !== "" || typeof H == "number" || typeof H == "bigint")
        return E = E.get(Q) || null, b(A, E, "" + H, rt);
      if (typeof H == "object" && H !== null) {
        switch (H.$$typeof) {
          case y:
            return E = E.get(
              H.key === null ? Q : H.key
            ) || null, T(A, E, H, rt);
          case S:
            return E = E.get(
              H.key === null ? Q : H.key
            ) || null, D(A, E, H, rt);
          case K:
            var xt = H._init;
            return H = xt(H._payload), B(
              E,
              A,
              Q,
              H,
              rt
            );
        }
        if (ht(H) || V(H))
          return E = E.get(Q) || null, L(A, E, H, rt, null);
        if (typeof H.then == "function")
          return B(
            E,
            A,
            Q,
            Ba(H),
            rt
          );
        if (H.$$typeof === W)
          return B(
            E,
            A,
            Q,
            wa(A, H),
            rt
          );
        Na(A, H);
      }
      return null;
    }
    function Ot(E, A, Q, H) {
      for (var rt = null, xt = null, ct = A, mt = A = 0, pe = null; ct !== null && mt < Q.length; mt++) {
        ct.index > mt ? (pe = ct, ct = null) : pe = ct.sibling;
        var Dt = q(
          E,
          ct,
          Q[mt],
          H
        );
        if (Dt === null) {
          ct === null && (ct = pe);
          break;
        }
        l && ct && Dt.alternate === null && r(E, ct), A = g(Dt, A, mt), xt === null ? rt = Dt : xt.sibling = Dt, xt = Dt, ct = pe;
      }
      if (mt === Q.length)
        return a(E, ct), zt && Sl(E, mt), rt;
      if (ct === null) {
        for (; mt < Q.length; mt++)
          ct = j(E, Q[mt], H), ct !== null && (A = g(
            ct,
            A,
            mt
          ), xt === null ? rt = ct : xt.sibling = ct, xt = ct);
        return zt && Sl(E, mt), rt;
      }
      for (ct = f(ct); mt < Q.length; mt++)
        pe = B(
          ct,
          E,
          mt,
          Q[mt],
          H
        ), pe !== null && (l && pe.alternate !== null && ct.delete(
          pe.key === null ? mt : pe.key
        ), A = g(
          pe,
          A,
          mt
        ), xt === null ? rt = pe : xt.sibling = pe, xt = pe);
      return l && ct.forEach(function(Kn) {
        return r(E, Kn);
      }), zt && Sl(E, mt), rt;
    }
    function pt(E, A, Q, H) {
      if (Q == null) throw Error(i(151));
      for (var rt = null, xt = null, ct = A, mt = A = 0, pe = null, Dt = Q.next(); ct !== null && !Dt.done; mt++, Dt = Q.next()) {
        ct.index > mt ? (pe = ct, ct = null) : pe = ct.sibling;
        var Kn = q(E, ct, Dt.value, H);
        if (Kn === null) {
          ct === null && (ct = pe);
          break;
        }
        l && ct && Kn.alternate === null && r(E, ct), A = g(Kn, A, mt), xt === null ? rt = Kn : xt.sibling = Kn, xt = Kn, ct = pe;
      }
      if (Dt.done)
        return a(E, ct), zt && Sl(E, mt), rt;
      if (ct === null) {
        for (; !Dt.done; mt++, Dt = Q.next())
          Dt = j(E, Dt.value, H), Dt !== null && (A = g(Dt, A, mt), xt === null ? rt = Dt : xt.sibling = Dt, xt = Dt);
        return zt && Sl(E, mt), rt;
      }
      for (ct = f(ct); !Dt.done; mt++, Dt = Q.next())
        Dt = B(ct, E, mt, Dt.value, H), Dt !== null && (l && Dt.alternate !== null && ct.delete(Dt.key === null ? mt : Dt.key), A = g(Dt, A, mt), xt === null ? rt = Dt : xt.sibling = Dt, xt = Dt);
      return l && ct.forEach(function(y2) {
        return r(E, y2);
      }), zt && Sl(E, mt), rt;
    }
    function Pt(E, A, Q, H) {
      if (typeof Q == "object" && Q !== null && Q.type === x && Q.key === null && (Q = Q.props.children), typeof Q == "object" && Q !== null) {
        switch (Q.$$typeof) {
          case y:
            t: {
              for (var rt = Q.key; A !== null; ) {
                if (A.key === rt) {
                  if (rt = Q.type, rt === x) {
                    if (A.tag === 7) {
                      a(
                        E,
                        A.sibling
                      ), H = d(
                        A,
                        Q.props.children
                      ), H.return = E, E = H;
                      break t;
                    }
                  } else if (A.elementType === rt || typeof rt == "object" && rt !== null && rt.$$typeof === K && W0(rt) === A.type) {
                    a(
                      E,
                      A.sibling
                    ), H = d(A, Q.props), Br(H, Q), H.return = E, E = H;
                    break t;
                  }
                  a(E, A);
                  break;
                } else r(E, A);
                A = A.sibling;
              }
              Q.type === x ? (H = yl(
                Q.props.children,
                E.mode,
                H,
                Q.key
              ), H.return = E, E = H) : (H = va(
                Q.type,
                Q.key,
                Q.props,
                null,
                E.mode,
                H
              ), Br(H, Q), H.return = E, E = H);
            }
            return v(E);
          case S:
            t: {
              for (rt = Q.key; A !== null; ) {
                if (A.key === rt)
                  if (A.tag === 4 && A.stateNode.containerInfo === Q.containerInfo && A.stateNode.implementation === Q.implementation) {
                    a(
                      E,
                      A.sibling
                    ), H = d(A, Q.children || []), H.return = E, E = H;
                    break t;
                  } else {
                    a(E, A);
                    break;
                  }
                else r(E, A);
                A = A.sibling;
              }
              H = Qf(Q, E.mode, H), H.return = E, E = H;
            }
            return v(E);
          case K:
            return rt = Q._init, Q = rt(Q._payload), Pt(
              E,
              A,
              Q,
              H
            );
        }
        if (ht(Q))
          return Ot(
            E,
            A,
            Q,
            H
          );
        if (V(Q)) {
          if (rt = V(Q), typeof rt != "function") throw Error(i(150));
          return Q = rt.call(Q), pt(
            E,
            A,
            Q,
            H
          );
        }
        if (typeof Q.then == "function")
          return Pt(
            E,
            A,
            Ba(Q),
            H
          );
        if (Q.$$typeof === W)
          return Pt(
            E,
            A,
            wa(E, Q),
            H
          );
        Na(E, Q);
      }
      return typeof Q == "string" && Q !== "" || typeof Q == "number" || typeof Q == "bigint" ? (Q = "" + Q, A !== null && A.tag === 6 ? (a(E, A.sibling), H = d(A, Q), H.return = E, E = H) : (a(E, A), H = Mf(Q, E.mode, H), H.return = E, E = H), v(E)) : a(E, A);
    }
    return function(E, A, Q, H) {
      try {
        _r = 0;
        var rt = Pt(
          E,
          A,
          Q,
          H
        );
        return Os = null, rt;
      } catch (ct) {
        if (ct === Ar || ct === ka) throw ct;
        var xt = Fe(29, ct, null, E.mode);
        return xt.lanes = H, xt.return = E, xt;
      } finally {
      }
    };
  }
  var ys = G0(!0), Y0 = G0(!1), di = $(null), Di = null;
  function Bn(l) {
    var r = l.alternate;
    I(ae, ae.current & 1), I(di, l), Di === null && (r === null || ds.current !== null || r.memoizedState !== null) && (Di = l);
  }
  function Z0(l) {
    if (l.tag === 22) {
      if (I(ae, ae.current), I(di, l), Di === null) {
        var r = l.alternate;
        r !== null && r.memoizedState !== null && (Di = l);
      }
    } else Nn();
  }
  function Nn() {
    I(ae, ae.current), I(di, di.current);
  }
  function un(l) {
    tt(di), Di === l && (Di = null), tt(ae);
  }
  var ae = $(0);
  function Pa(l) {
    for (var r = l; r !== null; ) {
      if (r.tag === 13) {
        var a = r.memoizedState;
        if (a !== null && (a = a.dehydrated, a === null || a.data === "$?" || Jh(a)))
          return r;
      } else if (r.tag === 19 && r.memoizedProps.revealOrder !== void 0) {
        if ((r.flags & 128) !== 0) return r;
      } else if (r.child !== null) {
        r.child.return = r, r = r.child;
        continue;
      }
      if (r === l) break;
      for (; r.sibling === null; ) {
        if (r.return === null || r.return === l) return null;
        r = r.return;
      }
      r.sibling.return = r.return, r = r.sibling;
    }
    return null;
  }
  function uh(l, r, a, f) {
    r = l.memoizedState, a = a(f, r), a = a == null ? r : m({}, r, a), l.memoizedState = a, l.lanes === 0 && (l.updateQueue.baseState = a);
  }
  var ch = {
    enqueueSetState: function(l, r, a) {
      l = l._reactInternals;
      var f = ti(), d = zn(f);
      d.payload = r, a != null && (d.callback = a), r = qn(l, d, f), r !== null && (ei(r, l, f), Er(r, l, f));
    },
    enqueueReplaceState: function(l, r, a) {
      l = l._reactInternals;
      var f = ti(), d = zn(f);
      d.tag = 1, d.payload = r, a != null && (d.callback = a), r = qn(l, d, f), r !== null && (ei(r, l, f), Er(r, l, f));
    },
    enqueueForceUpdate: function(l, r) {
      l = l._reactInternals;
      var a = ti(), f = zn(a);
      f.tag = 2, r != null && (f.callback = r), r = qn(l, f, a), r !== null && (ei(r, l, a), Er(r, l, a));
    }
  };
  function F0(l, r, a, f, d, g, v) {
    return l = l.stateNode, typeof l.shouldComponentUpdate == "function" ? l.shouldComponentUpdate(f, g, v) : r.prototype && r.prototype.isPureReactComponent ? !yr(a, f) || !yr(d, g) : !0;
  }
  function K0(l, r, a, f) {
    l = r.state, typeof r.componentWillReceiveProps == "function" && r.componentWillReceiveProps(a, f), typeof r.UNSAFE_componentWillReceiveProps == "function" && r.UNSAFE_componentWillReceiveProps(a, f), r.state !== l && ch.enqueueReplaceState(r, r.state, null);
  }
  function Cl(l, r) {
    var a = r;
    if ("ref" in r) {
      a = {};
      for (var f in r)
        f !== "ref" && (a[f] = r[f]);
    }
    if (l = l.defaultProps) {
      a === r && (a = m({}, a));
      for (var d in l)
        a[d] === void 0 && (a[d] = l[d]);
    }
    return a;
  }
  var La = typeof reportError == "function" ? reportError : function(l) {
    if (typeof window == "object" && typeof window.ErrorEvent == "function") {
      var r = new window.ErrorEvent("error", {
        bubbles: !0,
        cancelable: !0,
        message: typeof l == "object" && l !== null && typeof l.message == "string" ? String(l.message) : String(l),
        error: l
      });
      if (!window.dispatchEvent(r)) return;
    } else if (typeof process == "object" && typeof process.emit == "function") {
      process.emit("uncaughtException", l);
      return;
    }
    console.error(l);
  };
  function J0(l) {
    La(l);
  }
  function I0(l) {
    console.error(l);
  }
  function tO(l) {
    La(l);
  }
  function Ua(l, r) {
    try {
      var a = l.onUncaughtError;
      a(r.value, { componentStack: r.stack });
    } catch (f) {
      setTimeout(function() {
        throw f;
      });
    }
  }
  function eO(l, r, a) {
    try {
      var f = l.onCaughtError;
      f(a.value, {
        componentStack: a.stack,
        errorBoundary: r.tag === 1 ? r.stateNode : null
      });
    } catch (d) {
      setTimeout(function() {
        throw d;
      });
    }
  }
  function fh(l, r, a) {
    return a = zn(a), a.tag = 3, a.payload = { element: null }, a.callback = function() {
      Ua(l, r);
    }, a;
  }
  function iO(l) {
    return l = zn(l), l.tag = 3, l;
  }
  function nO(l, r, a, f) {
    var d = a.type.getDerivedStateFromError;
    if (typeof d == "function") {
      var g = f.value;
      l.payload = function() {
        return d(g);
      }, l.callback = function() {
        eO(r, a, f);
      };
    }
    var v = a.stateNode;
    v !== null && typeof v.componentDidCatch == "function" && (l.callback = function() {
      eO(r, a, f), typeof d != "function" && (Xn === null ? Xn = /* @__PURE__ */ new Set([this]) : Xn.add(this));
      var b = f.stack;
      this.componentDidCatch(f.value, {
        componentStack: b !== null ? b : ""
      });
    });
  }
  function yk(l, r, a, f, d) {
    if (a.flags |= 32768, f !== null && typeof f == "object" && typeof f.then == "function") {
      if (r = a.alternate, r !== null && wr(
        r,
        a,
        d,
        !0
      ), a = di.current, a !== null) {
        switch (a.tag) {
          case 13:
            return Di === null ? _h() : a.alternate === null && Kt === 0 && (Kt = 3), a.flags &= -257, a.flags |= 65536, a.lanes = d, f === Uf ? a.flags |= 16384 : (r = a.updateQueue, r === null ? a.updateQueue = /* @__PURE__ */ new Set([f]) : r.add(f), Nh(l, f, d)), !1;
          case 22:
            return a.flags |= 65536, f === Uf ? a.flags |= 16384 : (r = a.updateQueue, r === null ? (r = {
              transitions: null,
              markerInstances: null,
              retryQueue: /* @__PURE__ */ new Set([f])
            }, a.updateQueue = r) : (a = r.retryQueue, a === null ? r.retryQueue = /* @__PURE__ */ new Set([f]) : a.add(f)), Nh(l, f, d)), !1;
        }
        throw Error(i(435, a.tag));
      }
      return Nh(l, f, d), _h(), !1;
    }
    if (zt)
      return r = di.current, r !== null ? ((r.flags & 65536) === 0 && (r.flags |= 256), r.flags |= 65536, r.lanes = d, f !== zf && (l = Error(i(422), { cause: f }), xr(ui(l, a)))) : (f !== zf && (r = Error(i(423), {
        cause: f
      }), xr(
        ui(r, a)
      )), l = l.current.alternate, l.flags |= 65536, d &= -d, l.lanes |= d, f = ui(f, a), d = fh(
        l.stateNode,
        f,
        d
      ), Xf(l, d), Kt !== 4 && (Kt = 2)), !1;
    var g = Error(i(520), { cause: f });
    if (g = ui(g, a), Xr === null ? Xr = [g] : Xr.push(g), Kt !== 4 && (Kt = 2), r === null) return !0;
    f = ui(f, a), a = r;
    do {
      switch (a.tag) {
        case 3:
          return a.flags |= 65536, l = d & -d, a.lanes |= l, l = fh(a.stateNode, f, l), Xf(a, l), !1;
        case 1:
          if (r = a.type, g = a.stateNode, (a.flags & 128) === 0 && (typeof r.getDerivedStateFromError == "function" || g !== null && typeof g.componentDidCatch == "function" && (Xn === null || !Xn.has(g))))
            return a.flags |= 65536, d &= -d, a.lanes |= d, d = iO(d), nO(
              d,
              l,
              a,
              f
            ), Xf(a, d), !1;
      }
      a = a.return;
    } while (a !== null);
    return !1;
  }
  var lO = Error(i(461)), he = !1;
  function ye(l, r, a, f) {
    r.child = l === null ? Y0(r, null, a, f) : ys(
      r,
      l.child,
      a,
      f
    );
  }
  function sO(l, r, a, f, d) {
    a = a.render;
    var g = r.ref;
    if ("ref" in f) {
      var v = {};
      for (var b in f)
        b !== "ref" && (v[b] = f[b]);
    } else v = f;
    return Tl(r), f = Yf(
      l,
      r,
      a,
      v,
      g,
      d
    ), b = Zf(), l !== null && !he ? (Ff(l, r, d), cn(l, r, d)) : (zt && b && Rf(r), r.flags |= 1, ye(l, r, f, d), r.child);
  }
  function rO(l, r, a, f, d) {
    if (l === null) {
      var g = a.type;
      return typeof g == "function" && !Ef(g) && g.defaultProps === void 0 && a.compare === null ? (r.tag = 15, r.type = g, oO(
        l,
        r,
        g,
        f,
        d
      )) : (l = va(
        a.type,
        null,
        f,
        r,
        r.mode,
        d
      ), l.ref = r.ref, l.return = r, r.child = l);
    }
    if (g = l.child, !vh(l, d)) {
      var v = g.memoizedProps;
      if (a = a.compare, a = a !== null ? a : yr, a(v, f) && l.ref === r.ref)
        return cn(l, r, d);
    }
    return r.flags |= 1, l = nn(g, f), l.ref = r.ref, l.return = r, r.child = l;
  }
  function oO(l, r, a, f, d) {
    if (l !== null) {
      var g = l.memoizedProps;
      if (yr(g, f) && l.ref === r.ref)
        if (he = !1, r.pendingProps = f = g, vh(l, d))
          (l.flags & 131072) !== 0 && (he = !0);
        else
          return r.lanes = l.lanes, cn(l, r, d);
    }
    return hh(
      l,
      r,
      a,
      f,
      d
    );
  }
  function aO(l, r, a) {
    var f = r.pendingProps, d = f.children, g = l !== null ? l.memoizedState : null;
    if (f.mode === "hidden") {
      if ((r.flags & 128) !== 0) {
        if (f = g !== null ? g.baseLanes | a : a, l !== null) {
          for (d = r.child = l.child, g = 0; d !== null; )
            g = g | d.lanes | d.childLanes, d = d.sibling;
          r.childLanes = g & ~f;
        } else r.childLanes = 0, r.child = null;
        return uO(
          l,
          r,
          f,
          a
        );
      }
      if ((a & 536870912) !== 0)
        r.memoizedState = { baseLanes: 0, cachePool: null }, l !== null && Ta(
          r,
          g !== null ? g.cachePool : null
        ), g !== null ? o0(r, g) : jf(), Z0(r);
      else
        return r.lanes = r.childLanes = 536870912, uO(
          l,
          r,
          g !== null ? g.baseLanes | a : a,
          a
        );
    } else
      g !== null ? (Ta(r, g.cachePool), o0(r, g), Nn(), r.memoizedState = null) : (l !== null && Ta(r, null), jf(), Nn());
    return ye(l, r, d, a), r.child;
  }
  function uO(l, r, a, f) {
    var d = Lf();
    return d = d === null ? null : { parent: oe._currentValue, pool: d }, r.memoizedState = {
      baseLanes: a,
      cachePool: d
    }, l !== null && Ta(r, null), jf(), Z0(r), l !== null && wr(l, r, f, !0), null;
  }
  function Va(l, r) {
    var a = r.ref;
    if (a === null)
      l !== null && l.ref !== null && (r.flags |= 4194816);
    else {
      if (typeof a != "function" && typeof a != "object")
        throw Error(i(284));
      (l === null || l.ref !== a) && (r.flags |= 4194816);
    }
  }
  function hh(l, r, a, f, d) {
    return Tl(r), a = Yf(
      l,
      r,
      a,
      f,
      void 0,
      d
    ), f = Zf(), l !== null && !he ? (Ff(l, r, d), cn(l, r, d)) : (zt && f && Rf(r), r.flags |= 1, ye(l, r, a, d), r.child);
  }
  function cO(l, r, a, f, d, g) {
    return Tl(r), r.updateQueue = null, a = u0(
      r,
      f,
      a,
      d
    ), a0(l), f = Zf(), l !== null && !he ? (Ff(l, r, g), cn(l, r, g)) : (zt && f && Rf(r), r.flags |= 1, ye(l, r, a, g), r.child);
  }
  function fO(l, r, a, f, d) {
    if (Tl(r), r.stateNode === null) {
      var g = as, v = a.contextType;
      typeof v == "object" && v !== null && (g = Ce(v)), g = new a(f, g), r.memoizedState = g.state !== null && g.state !== void 0 ? g.state : null, g.updater = ch, r.stateNode = g, g._reactInternals = r, g = r.stateNode, g.props = f, g.state = r.memoizedState, g.refs = {}, Vf(r), v = a.contextType, g.context = typeof v == "object" && v !== null ? Ce(v) : as, g.state = r.memoizedState, v = a.getDerivedStateFromProps, typeof v == "function" && (uh(
        r,
        a,
        v,
        f
      ), g.state = r.memoizedState), typeof a.getDerivedStateFromProps == "function" || typeof g.getSnapshotBeforeUpdate == "function" || typeof g.UNSAFE_componentWillMount != "function" && typeof g.componentWillMount != "function" || (v = g.state, typeof g.componentWillMount == "function" && g.componentWillMount(), typeof g.UNSAFE_componentWillMount == "function" && g.UNSAFE_componentWillMount(), v !== g.state && ch.enqueueReplaceState(g, g.state, null), Qr(r, f, g, d), Mr(), g.state = r.memoizedState), typeof g.componentDidMount == "function" && (r.flags |= 4194308), f = !0;
    } else if (l === null) {
      g = r.stateNode;
      var b = r.memoizedProps, T = Cl(a, b);
      g.props = T;
      var D = g.context, L = a.contextType;
      v = as, typeof L == "object" && L !== null && (v = Ce(L));
      var j = a.getDerivedStateFromProps;
      L = typeof j == "function" || typeof g.getSnapshotBeforeUpdate == "function", b = r.pendingProps !== b, L || typeof g.UNSAFE_componentWillReceiveProps != "function" && typeof g.componentWillReceiveProps != "function" || (b || D !== v) && K0(
        r,
        g,
        f,
        v
      ), Dn = !1;
      var q = r.memoizedState;
      g.state = q, Qr(r, f, g, d), Mr(), D = r.memoizedState, b || q !== D || Dn ? (typeof j == "function" && (uh(
        r,
        a,
        j,
        f
      ), D = r.memoizedState), (T = Dn || F0(
        r,
        a,
        T,
        f,
        q,
        D,
        v
      )) ? (L || typeof g.UNSAFE_componentWillMount != "function" && typeof g.componentWillMount != "function" || (typeof g.componentWillMount == "function" && g.componentWillMount(), typeof g.UNSAFE_componentWillMount == "function" && g.UNSAFE_componentWillMount()), typeof g.componentDidMount == "function" && (r.flags |= 4194308)) : (typeof g.componentDidMount == "function" && (r.flags |= 4194308), r.memoizedProps = f, r.memoizedState = D), g.props = f, g.state = D, g.context = v, f = T) : (typeof g.componentDidMount == "function" && (r.flags |= 4194308), f = !1);
    } else {
      g = r.stateNode, Hf(l, r), v = r.memoizedProps, L = Cl(a, v), g.props = L, j = r.pendingProps, q = g.context, D = a.contextType, T = as, typeof D == "object" && D !== null && (T = Ce(D)), b = a.getDerivedStateFromProps, (D = typeof b == "function" || typeof g.getSnapshotBeforeUpdate == "function") || typeof g.UNSAFE_componentWillReceiveProps != "function" && typeof g.componentWillReceiveProps != "function" || (v !== j || q !== T) && K0(
        r,
        g,
        f,
        T
      ), Dn = !1, q = r.memoizedState, g.state = q, Qr(r, f, g, d), Mr();
      var B = r.memoizedState;
      v !== j || q !== B || Dn || l !== null && l.dependencies !== null && xa(l.dependencies) ? (typeof b == "function" && (uh(
        r,
        a,
        b,
        f
      ), B = r.memoizedState), (L = Dn || F0(
        r,
        a,
        L,
        f,
        q,
        B,
        T
      ) || l !== null && l.dependencies !== null && xa(l.dependencies)) ? (D || typeof g.UNSAFE_componentWillUpdate != "function" && typeof g.componentWillUpdate != "function" || (typeof g.componentWillUpdate == "function" && g.componentWillUpdate(f, B, T), typeof g.UNSAFE_componentWillUpdate == "function" && g.UNSAFE_componentWillUpdate(
        f,
        B,
        T
      )), typeof g.componentDidUpdate == "function" && (r.flags |= 4), typeof g.getSnapshotBeforeUpdate == "function" && (r.flags |= 1024)) : (typeof g.componentDidUpdate != "function" || v === l.memoizedProps && q === l.memoizedState || (r.flags |= 4), typeof g.getSnapshotBeforeUpdate != "function" || v === l.memoizedProps && q === l.memoizedState || (r.flags |= 1024), r.memoizedProps = f, r.memoizedState = B), g.props = f, g.state = B, g.context = T, f = L) : (typeof g.componentDidUpdate != "function" || v === l.memoizedProps && q === l.memoizedState || (r.flags |= 4), typeof g.getSnapshotBeforeUpdate != "function" || v === l.memoizedProps && q === l.memoizedState || (r.flags |= 1024), f = !1);
    }
    return g = f, Va(l, r), f = (r.flags & 128) !== 0, g || f ? (g = r.stateNode, a = f && typeof a.getDerivedStateFromError != "function" ? null : g.render(), r.flags |= 1, l !== null && f ? (r.child = ys(
      r,
      l.child,
      null,
      d
    ), r.child = ys(
      r,
      null,
      a,
      d
    )) : ye(l, r, a, d), r.memoizedState = g.state, l = r.child) : l = cn(
      l,
      r,
      d
    ), l;
  }
  function hO(l, r, a, f) {
    return br(), r.flags |= 256, ye(l, r, a, f), r.child;
  }
  var dh = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0,
    hydrationErrors: null
  };
  function ph(l) {
    return { baseLanes: l, cachePool: Ig() };
  }
  function mh(l, r, a) {
    return l = l !== null ? l.childLanes & ~a : 0, r && (l |= pi), l;
  }
  function dO(l, r, a) {
    var f = r.pendingProps, d = !1, g = (r.flags & 128) !== 0, v;
    if ((v = g) || (v = l !== null && l.memoizedState === null ? !1 : (ae.current & 2) !== 0), v && (d = !0, r.flags &= -129), v = (r.flags & 32) !== 0, r.flags &= -33, l === null) {
      if (zt) {
        if (d ? Bn(r) : Nn(), zt) {
          var b = Ft, T;
          if (T = b) {
            t: {
              for (T = b, b = Ri; T.nodeType !== 8; ) {
                if (!b) {
                  b = null;
                  break t;
                }
                if (T = Ti(
                  T.nextSibling
                ), T === null) {
                  b = null;
                  break t;
                }
              }
              b = T;
            }
            b !== null ? (r.memoizedState = {
              dehydrated: b,
              treeContext: vl !== null ? { id: ln, overflow: sn } : null,
              retryLane: 536870912,
              hydrationErrors: null
            }, T = Fe(
              18,
              null,
              null,
              0
            ), T.stateNode = b, T.return = r, r.child = T, De = r, Ft = null, T = !0) : T = !1;
          }
          T || xl(r);
        }
        if (b = r.memoizedState, b !== null && (b = b.dehydrated, b !== null))
          return Jh(b) ? r.lanes = 32 : r.lanes = 536870912, null;
        un(r);
      }
      return b = f.children, f = f.fallback, d ? (Nn(), d = r.mode, b = Ha(
        { mode: "hidden", children: b },
        d
      ), f = yl(
        f,
        d,
        a,
        null
      ), b.return = r, f.return = r, b.sibling = f, r.child = b, d = r.child, d.memoizedState = ph(a), d.childLanes = mh(
        l,
        v,
        a
      ), r.memoizedState = dh, f) : (Bn(r), gh(r, b));
    }
    if (T = l.memoizedState, T !== null && (b = T.dehydrated, b !== null)) {
      if (g)
        r.flags & 256 ? (Bn(r), r.flags &= -257, r = Oh(
          l,
          r,
          a
        )) : r.memoizedState !== null ? (Nn(), r.child = l.child, r.flags |= 128, r = null) : (Nn(), d = f.fallback, b = r.mode, f = Ha(
          { mode: "visible", children: f.children },
          b
        ), d = yl(
          d,
          b,
          a,
          null
        ), d.flags |= 2, f.return = r, d.return = r, f.sibling = d, r.child = f, ys(
          r,
          l.child,
          null,
          a
        ), f = r.child, f.memoizedState = ph(a), f.childLanes = mh(
          l,
          v,
          a
        ), r.memoizedState = dh, r = d);
      else if (Bn(r), Jh(b)) {
        if (v = b.nextSibling && b.nextSibling.dataset, v) var D = v.dgst;
        v = D, f = Error(i(419)), f.stack = "", f.digest = v, xr({ value: f, source: null, stack: null }), r = Oh(
          l,
          r,
          a
        );
      } else if (he || wr(l, r, a, !1), v = (a & l.childLanes) !== 0, he || v) {
        if (v = Xt, v !== null && (f = a & -a, f = (f & 42) !== 0 ? 1 : Jc(f), f = (f & (v.suspendedLanes | a)) !== 0 ? 0 : f, f !== 0 && f !== T.retryLane))
          throw T.retryLane = f, os(l, f), ei(v, l, f), lO;
        b.data === "$?" || _h(), r = Oh(
          l,
          r,
          a
        );
      } else
        b.data === "$?" ? (r.flags |= 192, r.child = l.child, r = null) : (l = T.treeContext, Ft = Ti(
          b.nextSibling
        ), De = r, zt = !0, bl = null, Ri = !1, l !== null && (fi[hi++] = ln, fi[hi++] = sn, fi[hi++] = vl, ln = l.id, sn = l.overflow, vl = r), r = gh(
          r,
          f.children
        ), r.flags |= 4096);
      return r;
    }
    return d ? (Nn(), d = f.fallback, b = r.mode, T = l.child, D = T.sibling, f = nn(T, {
      mode: "hidden",
      children: f.children
    }), f.subtreeFlags = T.subtreeFlags & 65011712, D !== null ? d = nn(D, d) : (d = yl(
      d,
      b,
      a,
      null
    ), d.flags |= 2), d.return = r, f.return = r, f.sibling = d, r.child = f, f = d, d = r.child, b = l.child.memoizedState, b === null ? b = ph(a) : (T = b.cachePool, T !== null ? (D = oe._currentValue, T = T.parent !== D ? { parent: D, pool: D } : T) : T = Ig(), b = {
      baseLanes: b.baseLanes | a,
      cachePool: T
    }), d.memoizedState = b, d.childLanes = mh(
      l,
      v,
      a
    ), r.memoizedState = dh, f) : (Bn(r), a = l.child, l = a.sibling, a = nn(a, {
      mode: "visible",
      children: f.children
    }), a.return = r, a.sibling = null, l !== null && (v = r.deletions, v === null ? (r.deletions = [l], r.flags |= 16) : v.push(l)), r.child = a, r.memoizedState = null, a);
  }
  function gh(l, r) {
    return r = Ha(
      { mode: "visible", children: r },
      l.mode
    ), r.return = l, l.child = r;
  }
  function Ha(l, r) {
    return l = Fe(22, l, null, r), l.lanes = 0, l.stateNode = {
      _visibility: 1,
      _pendingMarkers: null,
      _retryCache: null,
      _transitions: null
    }, l;
  }
  function Oh(l, r, a) {
    return ys(r, l.child, null, a), l = gh(
      r,
      r.pendingProps.children
    ), l.flags |= 2, r.memoizedState = null, l;
  }
  function pO(l, r, a) {
    l.lanes |= r;
    var f = l.alternate;
    f !== null && (f.lanes |= r), _f(l.return, r, a);
  }
  function yh(l, r, a, f, d) {
    var g = l.memoizedState;
    g === null ? l.memoizedState = {
      isBackwards: r,
      rendering: null,
      renderingStartTime: 0,
      last: f,
      tail: a,
      tailMode: d
    } : (g.isBackwards = r, g.rendering = null, g.renderingStartTime = 0, g.last = f, g.tail = a, g.tailMode = d);
  }
  function mO(l, r, a) {
    var f = r.pendingProps, d = f.revealOrder, g = f.tail;
    if (ye(l, r, f.children, a), f = ae.current, (f & 2) !== 0)
      f = f & 1 | 2, r.flags |= 128;
    else {
      if (l !== null && (l.flags & 128) !== 0)
        t: for (l = r.child; l !== null; ) {
          if (l.tag === 13)
            l.memoizedState !== null && pO(l, a, r);
          else if (l.tag === 19)
            pO(l, a, r);
          else if (l.child !== null) {
            l.child.return = l, l = l.child;
            continue;
          }
          if (l === r) break t;
          for (; l.sibling === null; ) {
            if (l.return === null || l.return === r)
              break t;
            l = l.return;
          }
          l.sibling.return = l.return, l = l.sibling;
        }
      f &= 1;
    }
    switch (I(ae, f), d) {
      case "forwards":
        for (a = r.child, d = null; a !== null; )
          l = a.alternate, l !== null && Pa(l) === null && (d = a), a = a.sibling;
        a = d, a === null ? (d = r.child, r.child = null) : (d = a.sibling, a.sibling = null), yh(
          r,
          !1,
          d,
          a,
          g
        );
        break;
      case "backwards":
        for (a = null, d = r.child, r.child = null; d !== null; ) {
          if (l = d.alternate, l !== null && Pa(l) === null) {
            r.child = d;
            break;
          }
          l = d.sibling, d.sibling = a, a = d, d = l;
        }
        yh(
          r,
          !0,
          a,
          null,
          g
        );
        break;
      case "together":
        yh(r, !1, null, null, void 0);
        break;
      default:
        r.memoizedState = null;
    }
    return r.child;
  }
  function cn(l, r, a) {
    if (l !== null && (r.dependencies = l.dependencies), Hn |= r.lanes, (a & r.childLanes) === 0)
      if (l !== null) {
        if (wr(
          l,
          r,
          a,
          !1
        ), (a & r.childLanes) === 0)
          return null;
      } else return null;
    if (l !== null && r.child !== l.child)
      throw Error(i(153));
    if (r.child !== null) {
      for (l = r.child, a = nn(l, l.pendingProps), r.child = a, a.return = r; l.sibling !== null; )
        l = l.sibling, a = a.sibling = nn(l, l.pendingProps), a.return = r;
      a.sibling = null;
    }
    return r.child;
  }
  function vh(l, r) {
    return (l.lanes & r) !== 0 ? !0 : (l = l.dependencies, !!(l !== null && xa(l)));
  }
  function vk(l, r, a) {
    switch (r.tag) {
      case 3:
        Wt(r, r.stateNode.containerInfo), Rn(r, oe, l.memoizedState.cache), br();
        break;
      case 27:
      case 5:
        Gc(r);
        break;
      case 4:
        Wt(r, r.stateNode.containerInfo);
        break;
      case 10:
        Rn(
          r,
          r.type,
          r.memoizedProps.value
        );
        break;
      case 13:
        var f = r.memoizedState;
        if (f !== null)
          return f.dehydrated !== null ? (Bn(r), r.flags |= 128, null) : (a & r.child.childLanes) !== 0 ? dO(l, r, a) : (Bn(r), l = cn(
            l,
            r,
            a
          ), l !== null ? l.sibling : null);
        Bn(r);
        break;
      case 19:
        var d = (l.flags & 128) !== 0;
        if (f = (a & r.childLanes) !== 0, f || (wr(
          l,
          r,
          a,
          !1
        ), f = (a & r.childLanes) !== 0), d) {
          if (f)
            return mO(
              l,
              r,
              a
            );
          r.flags |= 128;
        }
        if (d = r.memoizedState, d !== null && (d.rendering = null, d.tail = null, d.lastEffect = null), I(ae, ae.current), f) break;
        return null;
      case 22:
      case 23:
        return r.lanes = 0, aO(l, r, a);
      case 24:
        Rn(r, oe, l.memoizedState.cache);
    }
    return cn(l, r, a);
  }
  function gO(l, r, a) {
    if (l !== null)
      if (l.memoizedProps !== r.pendingProps)
        he = !0;
      else {
        if (!vh(l, a) && (r.flags & 128) === 0)
          return he = !1, vk(
            l,
            r,
            a
          );
        he = (l.flags & 131072) !== 0;
      }
    else
      he = !1, zt && (r.flags & 1048576) !== 0 && Wg(r, ba, r.index);
    switch (r.lanes = 0, r.tag) {
      case 16:
        t: {
          l = r.pendingProps;
          var f = r.elementType, d = f._init;
          if (f = d(f._payload), r.type = f, typeof f == "function")
            Ef(f) ? (l = Cl(f, l), r.tag = 1, r = fO(
              null,
              r,
              f,
              l,
              a
            )) : (r.tag = 0, r = hh(
              null,
              r,
              f,
              l,
              a
            ));
          else {
            if (f != null) {
              if (d = f.$$typeof, d === Z) {
                r.tag = 11, r = sO(
                  null,
                  r,
                  f,
                  l,
                  a
                );
                break t;
              } else if (d === R) {
                r.tag = 14, r = rO(
                  null,
                  r,
                  f,
                  l,
                  a
                );
                break t;
              }
            }
            throw r = ot(f) || f, Error(i(306, r, ""));
          }
        }
        return r;
      case 0:
        return hh(
          l,
          r,
          r.type,
          r.pendingProps,
          a
        );
      case 1:
        return f = r.type, d = Cl(
          f,
          r.pendingProps
        ), fO(
          l,
          r,
          f,
          d,
          a
        );
      case 3:
        t: {
          if (Wt(
            r,
            r.stateNode.containerInfo
          ), l === null) throw Error(i(387));
          f = r.pendingProps;
          var g = r.memoizedState;
          d = g.element, Hf(l, r), Qr(r, f, null, a);
          var v = r.memoizedState;
          if (f = v.cache, Rn(r, oe, f), f !== g.cache && Bf(
            r,
            [oe],
            a,
            !0
          ), Mr(), f = v.element, g.isDehydrated)
            if (g = {
              element: f,
              isDehydrated: !1,
              cache: v.cache
            }, r.updateQueue.baseState = g, r.memoizedState = g, r.flags & 256) {
              r = hO(
                l,
                r,
                f,
                a
              );
              break t;
            } else if (f !== d) {
              d = ui(
                Error(i(424)),
                r
              ), xr(d), r = hO(
                l,
                r,
                f,
                a
              );
              break t;
            } else {
              switch (l = r.stateNode.containerInfo, l.nodeType) {
                case 9:
                  l = l.body;
                  break;
                default:
                  l = l.nodeName === "HTML" ? l.ownerDocument.body : l;
              }
              for (Ft = Ti(l.firstChild), De = r, zt = !0, bl = null, Ri = !0, a = Y0(
                r,
                null,
                f,
                a
              ), r.child = a; a; )
                a.flags = a.flags & -3 | 4096, a = a.sibling;
            }
          else {
            if (br(), f === d) {
              r = cn(
                l,
                r,
                a
              );
              break t;
            }
            ye(
              l,
              r,
              f,
              a
            );
          }
          r = r.child;
        }
        return r;
      case 26:
        return Va(l, r), l === null ? (a = Sy(
          r.type,
          null,
          r.pendingProps,
          null
        )) ? r.memoizedState = a : zt || (a = r.type, l = r.pendingProps, f = iu(
          gt.current
        ).createElement(a), f[Ae] = r, f[_e] = l, Se(f, a, l), fe(f), r.stateNode = f) : r.memoizedState = Sy(
          r.type,
          l.memoizedProps,
          r.pendingProps,
          l.memoizedState
        ), null;
      case 27:
        return Gc(r), l === null && zt && (f = r.stateNode = Oy(
          r.type,
          r.pendingProps,
          gt.current
        ), De = r, Ri = !0, d = Ft, Wn(r.type) ? (Ih = d, Ft = Ti(
          f.firstChild
        )) : Ft = d), ye(
          l,
          r,
          r.pendingProps.children,
          a
        ), Va(l, r), l === null && (r.flags |= 4194304), r.child;
      case 5:
        return l === null && zt && ((d = f = Ft) && (f = Gk(
          f,
          r.type,
          r.pendingProps,
          Ri
        ), f !== null ? (r.stateNode = f, De = r, Ft = Ti(
          f.firstChild
        ), Ri = !1, d = !0) : d = !1), d || xl(r)), Gc(r), d = r.type, g = r.pendingProps, v = l !== null ? l.memoizedProps : null, f = g.children, Zh(d, g) ? f = null : v !== null && Zh(d, v) && (r.flags |= 32), r.memoizedState !== null && (d = Yf(
          l,
          r,
          fk,
          null,
          null,
          a
        ), Jr._currentValue = d), Va(l, r), ye(l, r, f, a), r.child;
      case 6:
        return l === null && zt && ((l = a = Ft) && (a = Yk(
          a,
          r.pendingProps,
          Ri
        ), a !== null ? (r.stateNode = a, De = r, Ft = null, l = !0) : l = !1), l || xl(r)), null;
      case 13:
        return dO(l, r, a);
      case 4:
        return Wt(
          r,
          r.stateNode.containerInfo
        ), f = r.pendingProps, l === null ? r.child = ys(
          r,
          null,
          f,
          a
        ) : ye(
          l,
          r,
          f,
          a
        ), r.child;
      case 11:
        return sO(
          l,
          r,
          r.type,
          r.pendingProps,
          a
        );
      case 7:
        return ye(
          l,
          r,
          r.pendingProps,
          a
        ), r.child;
      case 8:
        return ye(
          l,
          r,
          r.pendingProps.children,
          a
        ), r.child;
      case 12:
        return ye(
          l,
          r,
          r.pendingProps.children,
          a
        ), r.child;
      case 10:
        return f = r.pendingProps, Rn(r, r.type, f.value), ye(
          l,
          r,
          f.children,
          a
        ), r.child;
      case 9:
        return d = r.type._context, f = r.pendingProps.children, Tl(r), d = Ce(d), f = f(d), r.flags |= 1, ye(l, r, f, a), r.child;
      case 14:
        return rO(
          l,
          r,
          r.type,
          r.pendingProps,
          a
        );
      case 15:
        return oO(
          l,
          r,
          r.type,
          r.pendingProps,
          a
        );
      case 19:
        return mO(l, r, a);
      case 31:
        return f = r.pendingProps, a = r.mode, f = {
          mode: f.mode,
          children: f.children
        }, l === null ? (a = Ha(
          f,
          a
        ), a.ref = r.ref, r.child = a, a.return = r, r = a) : (a = nn(l.child, f), a.ref = r.ref, r.child = a, a.return = r, r = a), r;
      case 22:
        return aO(l, r, a);
      case 24:
        return Tl(r), f = Ce(oe), l === null ? (d = Lf(), d === null && (d = Xt, g = Nf(), d.pooledCache = g, g.refCount++, g !== null && (d.pooledCacheLanes |= a), d = g), r.memoizedState = {
          parent: f,
          cache: d
        }, Vf(r), Rn(r, oe, d)) : ((l.lanes & a) !== 0 && (Hf(l, r), Qr(r, null, null, a), Mr()), d = l.memoizedState, g = r.memoizedState, d.parent !== f ? (d = { parent: f, cache: f }, r.memoizedState = d, r.lanes === 0 && (r.memoizedState = r.updateQueue.baseState = d), Rn(r, oe, f)) : (f = g.cache, Rn(r, oe, f), f !== d.cache && Bf(
          r,
          [oe],
          a,
          !0
        ))), ye(
          l,
          r,
          r.pendingProps.children,
          a
        ), r.child;
      case 29:
        throw r.pendingProps;
    }
    throw Error(i(156, r.tag));
  }
  function fn(l) {
    l.flags |= 4;
  }
  function OO(l, r) {
    if (r.type !== "stylesheet" || (r.state.loading & 4) !== 0)
      l.flags &= -16777217;
    else if (l.flags |= 16777216, !ky(r)) {
      if (r = di.current, r !== null && ((Ct & 4194048) === Ct ? Di !== null : (Ct & 62914560) !== Ct && (Ct & 536870912) === 0 || r !== Di))
        throw Cr = Uf, t0;
      l.flags |= 8192;
    }
  }
  function Xa(l, r) {
    r !== null && (l.flags |= 4), l.flags & 16384 && (r = l.tag !== 22 ? Zm() : 536870912, l.lanes |= r, xs |= r);
  }
  function Nr(l, r) {
    if (!zt)
      switch (l.tailMode) {
        case "hidden":
          r = l.tail;
          for (var a = null; r !== null; )
            r.alternate !== null && (a = r), r = r.sibling;
          a === null ? l.tail = null : a.sibling = null;
          break;
        case "collapsed":
          a = l.tail;
          for (var f = null; a !== null; )
            a.alternate !== null && (f = a), a = a.sibling;
          f === null ? r || l.tail === null ? l.tail = null : l.tail.sibling = null : f.sibling = null;
      }
  }
  function Zt(l) {
    var r = l.alternate !== null && l.alternate.child === l.child, a = 0, f = 0;
    if (r)
      for (var d = l.child; d !== null; )
        a |= d.lanes | d.childLanes, f |= d.subtreeFlags & 65011712, f |= d.flags & 65011712, d.return = l, d = d.sibling;
    else
      for (d = l.child; d !== null; )
        a |= d.lanes | d.childLanes, f |= d.subtreeFlags, f |= d.flags, d.return = l, d = d.sibling;
    return l.subtreeFlags |= f, l.childLanes = a, r;
  }
  function Sk(l, r, a) {
    var f = r.pendingProps;
    switch (Df(r), r.tag) {
      case 31:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return Zt(r), null;
      case 1:
        return Zt(r), null;
      case 3:
        return a = r.stateNode, f = null, l !== null && (f = l.memoizedState.cache), r.memoizedState.cache !== f && (r.flags |= 2048), on(oe), Cn(), a.pendingContext && (a.context = a.pendingContext, a.pendingContext = null), (l === null || l.child === null) && (Sr(r) ? fn(r) : l === null || l.memoizedState.isDehydrated && (r.flags & 256) === 0 || (r.flags |= 1024, Zg())), Zt(r), null;
      case 26:
        return a = r.memoizedState, l === null ? (fn(r), a !== null ? (Zt(r), OO(r, a)) : (Zt(r), r.flags &= -16777217)) : a ? a !== l.memoizedState ? (fn(r), Zt(r), OO(r, a)) : (Zt(r), r.flags &= -16777217) : (l.memoizedProps !== f && fn(r), Zt(r), r.flags &= -16777217), null;
      case 27:
        ta(r), a = gt.current;
        var d = r.type;
        if (l !== null && r.stateNode != null)
          l.memoizedProps !== f && fn(r);
        else {
          if (!f) {
            if (r.stateNode === null)
              throw Error(i(166));
            return Zt(r), null;
          }
          l = ut.current, Sr(r) ? Gg(r) : (l = Oy(d, f, a), r.stateNode = l, fn(r));
        }
        return Zt(r), null;
      case 5:
        if (ta(r), a = r.type, l !== null && r.stateNode != null)
          l.memoizedProps !== f && fn(r);
        else {
          if (!f) {
            if (r.stateNode === null)
              throw Error(i(166));
            return Zt(r), null;
          }
          if (l = ut.current, Sr(r))
            Gg(r);
          else {
            switch (d = iu(
              gt.current
            ), l) {
              case 1:
                l = d.createElementNS(
                  "http://www.w3.org/2000/svg",
                  a
                );
                break;
              case 2:
                l = d.createElementNS(
                  "http://www.w3.org/1998/Math/MathML",
                  a
                );
                break;
              default:
                switch (a) {
                  case "svg":
                    l = d.createElementNS(
                      "http://www.w3.org/2000/svg",
                      a
                    );
                    break;
                  case "math":
                    l = d.createElementNS(
                      "http://www.w3.org/1998/Math/MathML",
                      a
                    );
                    break;
                  case "script":
                    l = d.createElement("div"), l.innerHTML = "<script><\/script>", l = l.removeChild(l.firstChild);
                    break;
                  case "select":
                    l = typeof f.is == "string" ? d.createElement("select", { is: f.is }) : d.createElement("select"), f.multiple ? l.multiple = !0 : f.size && (l.size = f.size);
                    break;
                  default:
                    l = typeof f.is == "string" ? d.createElement(a, { is: f.is }) : d.createElement(a);
                }
            }
            l[Ae] = r, l[_e] = f;
            t: for (d = r.child; d !== null; ) {
              if (d.tag === 5 || d.tag === 6)
                l.appendChild(d.stateNode);
              else if (d.tag !== 4 && d.tag !== 27 && d.child !== null) {
                d.child.return = d, d = d.child;
                continue;
              }
              if (d === r) break t;
              for (; d.sibling === null; ) {
                if (d.return === null || d.return === r)
                  break t;
                d = d.return;
              }
              d.sibling.return = d.return, d = d.sibling;
            }
            r.stateNode = l;
            t: switch (Se(l, a, f), a) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                l = !!f.autoFocus;
                break t;
              case "img":
                l = !0;
                break t;
              default:
                l = !1;
            }
            l && fn(r);
          }
        }
        return Zt(r), r.flags &= -16777217, null;
      case 6:
        if (l && r.stateNode != null)
          l.memoizedProps !== f && fn(r);
        else {
          if (typeof f != "string" && r.stateNode === null)
            throw Error(i(166));
          if (l = gt.current, Sr(r)) {
            if (l = r.stateNode, a = r.memoizedProps, f = null, d = De, d !== null)
              switch (d.tag) {
                case 27:
                case 5:
                  f = d.memoizedProps;
              }
            l[Ae] = r, l = !!(l.nodeValue === a || f !== null && f.suppressHydrationWarning === !0 || cy(l.nodeValue, a)), l || xl(r);
          } else
            l = iu(l).createTextNode(
              f
            ), l[Ae] = r, r.stateNode = l;
        }
        return Zt(r), null;
      case 13:
        if (f = r.memoizedState, l === null || l.memoizedState !== null && l.memoizedState.dehydrated !== null) {
          if (d = Sr(r), f !== null && f.dehydrated !== null) {
            if (l === null) {
              if (!d) throw Error(i(318));
              if (d = r.memoizedState, d = d !== null ? d.dehydrated : null, !d) throw Error(i(317));
              d[Ae] = r;
            } else
              br(), (r.flags & 128) === 0 && (r.memoizedState = null), r.flags |= 4;
            Zt(r), d = !1;
          } else
            d = Zg(), l !== null && l.memoizedState !== null && (l.memoizedState.hydrationErrors = d), d = !0;
          if (!d)
            return r.flags & 256 ? (un(r), r) : (un(r), null);
        }
        if (un(r), (r.flags & 128) !== 0)
          return r.lanes = a, r;
        if (a = f !== null, l = l !== null && l.memoizedState !== null, a) {
          f = r.child, d = null, f.alternate !== null && f.alternate.memoizedState !== null && f.alternate.memoizedState.cachePool !== null && (d = f.alternate.memoizedState.cachePool.pool);
          var g = null;
          f.memoizedState !== null && f.memoizedState.cachePool !== null && (g = f.memoizedState.cachePool.pool), g !== d && (f.flags |= 2048);
        }
        return a !== l && a && (r.child.flags |= 8192), Xa(r, r.updateQueue), Zt(r), null;
      case 4:
        return Cn(), l === null && $h(r.stateNode.containerInfo), Zt(r), null;
      case 10:
        return on(r.type), Zt(r), null;
      case 19:
        if (tt(ae), d = r.memoizedState, d === null) return Zt(r), null;
        if (f = (r.flags & 128) !== 0, g = d.rendering, g === null)
          if (f) Nr(d, !1);
          else {
            if (Kt !== 0 || l !== null && (l.flags & 128) !== 0)
              for (l = r.child; l !== null; ) {
                if (g = Pa(l), g !== null) {
                  for (r.flags |= 128, Nr(d, !1), l = g.updateQueue, r.updateQueue = l, Xa(r, l), r.subtreeFlags = 0, l = a, a = r.child; a !== null; )
                    jg(a, l), a = a.sibling;
                  return I(
                    ae,
                    ae.current & 1 | 2
                  ), r.child;
                }
                l = l.sibling;
              }
            d.tail !== null && Qi() > Wa && (r.flags |= 128, f = !0, Nr(d, !1), r.lanes = 4194304);
          }
        else {
          if (!f)
            if (l = Pa(g), l !== null) {
              if (r.flags |= 128, f = !0, l = l.updateQueue, r.updateQueue = l, Xa(r, l), Nr(d, !0), d.tail === null && d.tailMode === "hidden" && !g.alternate && !zt)
                return Zt(r), null;
            } else
              2 * Qi() - d.renderingStartTime > Wa && a !== 536870912 && (r.flags |= 128, f = !0, Nr(d, !1), r.lanes = 4194304);
          d.isBackwards ? (g.sibling = r.child, r.child = g) : (l = d.last, l !== null ? l.sibling = g : r.child = g, d.last = g);
        }
        return d.tail !== null ? (r = d.tail, d.rendering = r, d.tail = r.sibling, d.renderingStartTime = Qi(), r.sibling = null, l = ae.current, I(ae, f ? l & 1 | 2 : l & 1), r) : (Zt(r), null);
      case 22:
      case 23:
        return un(r), Wf(), f = r.memoizedState !== null, l !== null ? l.memoizedState !== null !== f && (r.flags |= 8192) : f && (r.flags |= 8192), f ? (a & 536870912) !== 0 && (r.flags & 128) === 0 && (Zt(r), r.subtreeFlags & 6 && (r.flags |= 8192)) : Zt(r), a = r.updateQueue, a !== null && Xa(r, a.retryQueue), a = null, l !== null && l.memoizedState !== null && l.memoizedState.cachePool !== null && (a = l.memoizedState.cachePool.pool), f = null, r.memoizedState !== null && r.memoizedState.cachePool !== null && (f = r.memoizedState.cachePool.pool), f !== a && (r.flags |= 2048), l !== null && tt(kl), null;
      case 24:
        return a = null, l !== null && (a = l.memoizedState.cache), r.memoizedState.cache !== a && (r.flags |= 2048), on(oe), Zt(r), null;
      case 25:
        return null;
      case 30:
        return null;
    }
    throw Error(i(156, r.tag));
  }
  function bk(l, r) {
    switch (Df(r), r.tag) {
      case 1:
        return l = r.flags, l & 65536 ? (r.flags = l & -65537 | 128, r) : null;
      case 3:
        return on(oe), Cn(), l = r.flags, (l & 65536) !== 0 && (l & 128) === 0 ? (r.flags = l & -65537 | 128, r) : null;
      case 26:
      case 27:
      case 5:
        return ta(r), null;
      case 13:
        if (un(r), l = r.memoizedState, l !== null && l.dehydrated !== null) {
          if (r.alternate === null)
            throw Error(i(340));
          br();
        }
        return l = r.flags, l & 65536 ? (r.flags = l & -65537 | 128, r) : null;
      case 19:
        return tt(ae), null;
      case 4:
        return Cn(), null;
      case 10:
        return on(r.type), null;
      case 22:
      case 23:
        return un(r), Wf(), l !== null && tt(kl), l = r.flags, l & 65536 ? (r.flags = l & -65537 | 128, r) : null;
      case 24:
        return on(oe), null;
      case 25:
        return null;
      default:
        return null;
    }
  }
  function yO(l, r) {
    switch (Df(r), r.tag) {
      case 3:
        on(oe), Cn();
        break;
      case 26:
      case 27:
      case 5:
        ta(r);
        break;
      case 4:
        Cn();
        break;
      case 13:
        un(r);
        break;
      case 19:
        tt(ae);
        break;
      case 10:
        on(r.type);
        break;
      case 22:
      case 23:
        un(r), Wf(), l !== null && tt(kl);
        break;
      case 24:
        on(oe);
    }
  }
  function Pr(l, r) {
    try {
      var a = r.updateQueue, f = a !== null ? a.lastEffect : null;
      if (f !== null) {
        var d = f.next;
        a = d;
        do {
          if ((a.tag & l) === l) {
            f = void 0;
            var g = a.create, v = a.inst;
            f = g(), v.destroy = f;
          }
          a = a.next;
        } while (a !== d);
      }
    } catch (b) {
      Lt(r, r.return, b);
    }
  }
  function Pn(l, r, a) {
    try {
      var f = r.updateQueue, d = f !== null ? f.lastEffect : null;
      if (d !== null) {
        var g = d.next;
        f = g;
        do {
          if ((f.tag & l) === l) {
            var v = f.inst, b = v.destroy;
            if (b !== void 0) {
              v.destroy = void 0, d = r;
              var T = a, D = b;
              try {
                D();
              } catch (L) {
                Lt(
                  d,
                  T,
                  L
                );
              }
            }
          }
          f = f.next;
        } while (f !== g);
      }
    } catch (L) {
      Lt(r, r.return, L);
    }
  }
  function vO(l) {
    var r = l.updateQueue;
    if (r !== null) {
      var a = l.stateNode;
      try {
        r0(r, a);
      } catch (f) {
        Lt(l, l.return, f);
      }
    }
  }
  function SO(l, r, a) {
    a.props = Cl(
      l.type,
      l.memoizedProps
    ), a.state = l.memoizedState;
    try {
      a.componentWillUnmount();
    } catch (f) {
      Lt(l, r, f);
    }
  }
  function Lr(l, r) {
    try {
      var a = l.ref;
      if (a !== null) {
        switch (l.tag) {
          case 26:
          case 27:
          case 5:
            var f = l.stateNode;
            break;
          case 30:
            f = l.stateNode;
            break;
          default:
            f = l.stateNode;
        }
        typeof a == "function" ? l.refCleanup = a(f) : a.current = f;
      }
    } catch (d) {
      Lt(l, r, d);
    }
  }
  function zi(l, r) {
    var a = l.ref, f = l.refCleanup;
    if (a !== null)
      if (typeof f == "function")
        try {
          f();
        } catch (d) {
          Lt(l, r, d);
        } finally {
          l.refCleanup = null, l = l.alternate, l != null && (l.refCleanup = null);
        }
      else if (typeof a == "function")
        try {
          a(null);
        } catch (d) {
          Lt(l, r, d);
        }
      else a.current = null;
  }
  function bO(l) {
    var r = l.type, a = l.memoizedProps, f = l.stateNode;
    try {
      t: switch (r) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          a.autoFocus && f.focus();
          break t;
        case "img":
          a.src ? f.src = a.src : a.srcSet && (f.srcset = a.srcSet);
      }
    } catch (d) {
      Lt(l, l.return, d);
    }
  }
  function Sh(l, r, a) {
    try {
      var f = l.stateNode;
      Hk(f, l.type, a, r), f[_e] = r;
    } catch (d) {
      Lt(l, l.return, d);
    }
  }
  function xO(l) {
    return l.tag === 5 || l.tag === 3 || l.tag === 26 || l.tag === 27 && Wn(l.type) || l.tag === 4;
  }
  function bh(l) {
    t: for (; ; ) {
      for (; l.sibling === null; ) {
        if (l.return === null || xO(l.return)) return null;
        l = l.return;
      }
      for (l.sibling.return = l.return, l = l.sibling; l.tag !== 5 && l.tag !== 6 && l.tag !== 18; ) {
        if (l.tag === 27 && Wn(l.type) || l.flags & 2 || l.child === null || l.tag === 4) continue t;
        l.child.return = l, l = l.child;
      }
      if (!(l.flags & 2)) return l.stateNode;
    }
  }
  function xh(l, r, a) {
    var f = l.tag;
    if (f === 5 || f === 6)
      l = l.stateNode, r ? (a.nodeType === 9 ? a.body : a.nodeName === "HTML" ? a.ownerDocument.body : a).insertBefore(l, r) : (r = a.nodeType === 9 ? a.body : a.nodeName === "HTML" ? a.ownerDocument.body : a, r.appendChild(l), a = a._reactRootContainer, a != null || r.onclick !== null || (r.onclick = eu));
    else if (f !== 4 && (f === 27 && Wn(l.type) && (a = l.stateNode, r = null), l = l.child, l !== null))
      for (xh(l, r, a), l = l.sibling; l !== null; )
        xh(l, r, a), l = l.sibling;
  }
  function $a(l, r, a) {
    var f = l.tag;
    if (f === 5 || f === 6)
      l = l.stateNode, r ? a.insertBefore(l, r) : a.appendChild(l);
    else if (f !== 4 && (f === 27 && Wn(l.type) && (a = l.stateNode), l = l.child, l !== null))
      for ($a(l, r, a), l = l.sibling; l !== null; )
        $a(l, r, a), l = l.sibling;
  }
  function wO(l) {
    var r = l.stateNode, a = l.memoizedProps;
    try {
      for (var f = l.type, d = r.attributes; d.length; )
        r.removeAttributeNode(d[0]);
      Se(r, f, a), r[Ae] = l, r[_e] = a;
    } catch (g) {
      Lt(l, l.return, g);
    }
  }
  var hn = !1, It = !1, wh = !1, TO = typeof WeakSet == "function" ? WeakSet : Set, de = null;
  function xk(l, r) {
    if (l = l.containerInfo, Gh = au, l = _g(l), bf(l)) {
      if ("selectionStart" in l)
        var a = {
          start: l.selectionStart,
          end: l.selectionEnd
        };
      else
        t: {
          a = (a = l.ownerDocument) && a.defaultView || window;
          var f = a.getSelection && a.getSelection();
          if (f && f.rangeCount !== 0) {
            a = f.anchorNode;
            var d = f.anchorOffset, g = f.focusNode;
            f = f.focusOffset;
            try {
              a.nodeType, g.nodeType;
            } catch {
              a = null;
              break t;
            }
            var v = 0, b = -1, T = -1, D = 0, L = 0, j = l, q = null;
            e: for (; ; ) {
              for (var B; j !== a || d !== 0 && j.nodeType !== 3 || (b = v + d), j !== g || f !== 0 && j.nodeType !== 3 || (T = v + f), j.nodeType === 3 && (v += j.nodeValue.length), (B = j.firstChild) !== null; )
                q = j, j = B;
              for (; ; ) {
                if (j === l) break e;
                if (q === a && ++D === d && (b = v), q === g && ++L === f && (T = v), (B = j.nextSibling) !== null) break;
                j = q, q = j.parentNode;
              }
              j = B;
            }
            a = b === -1 || T === -1 ? null : { start: b, end: T };
          } else a = null;
        }
      a = a || { start: 0, end: 0 };
    } else a = null;
    for (Yh = { focusedElem: l, selectionRange: a }, au = !1, de = r; de !== null; )
      if (r = de, l = r.child, (r.subtreeFlags & 1024) !== 0 && l !== null)
        l.return = r, de = l;
      else
        for (; de !== null; ) {
          switch (r = de, g = r.alternate, l = r.flags, r.tag) {
            case 0:
              break;
            case 11:
            case 15:
              break;
            case 1:
              if ((l & 1024) !== 0 && g !== null) {
                l = void 0, a = r, d = g.memoizedProps, g = g.memoizedState, f = a.stateNode;
                try {
                  var Ot = Cl(
                    a.type,
                    d,
                    a.elementType === a.type
                  );
                  l = f.getSnapshotBeforeUpdate(
                    Ot,
                    g
                  ), f.__reactInternalSnapshotBeforeUpdate = l;
                } catch (pt) {
                  Lt(
                    a,
                    a.return,
                    pt
                  );
                }
              }
              break;
            case 3:
              if ((l & 1024) !== 0) {
                if (l = r.stateNode.containerInfo, a = l.nodeType, a === 9)
                  Kh(l);
                else if (a === 1)
                  switch (l.nodeName) {
                    case "HEAD":
                    case "HTML":
                    case "BODY":
                      Kh(l);
                      break;
                    default:
                      l.textContent = "";
                  }
              }
              break;
            case 5:
            case 26:
            case 27:
            case 6:
            case 4:
            case 17:
              break;
            default:
              if ((l & 1024) !== 0) throw Error(i(163));
          }
          if (l = r.sibling, l !== null) {
            l.return = r.return, de = l;
            break;
          }
          de = r.return;
        }
  }
  function kO(l, r, a) {
    var f = a.flags;
    switch (a.tag) {
      case 0:
      case 11:
      case 15:
        Ln(l, a), f & 4 && Pr(5, a);
        break;
      case 1:
        if (Ln(l, a), f & 4)
          if (l = a.stateNode, r === null)
            try {
              l.componentDidMount();
            } catch (v) {
              Lt(a, a.return, v);
            }
          else {
            var d = Cl(
              a.type,
              r.memoizedProps
            );
            r = r.memoizedState;
            try {
              l.componentDidUpdate(
                d,
                r,
                l.__reactInternalSnapshotBeforeUpdate
              );
            } catch (v) {
              Lt(
                a,
                a.return,
                v
              );
            }
          }
        f & 64 && vO(a), f & 512 && Lr(a, a.return);
        break;
      case 3:
        if (Ln(l, a), f & 64 && (l = a.updateQueue, l !== null)) {
          if (r = null, a.child !== null)
            switch (a.child.tag) {
              case 27:
              case 5:
                r = a.child.stateNode;
                break;
              case 1:
                r = a.child.stateNode;
            }
          try {
            r0(l, r);
          } catch (v) {
            Lt(a, a.return, v);
          }
        }
        break;
      case 27:
        r === null && f & 4 && wO(a);
      case 26:
      case 5:
        Ln(l, a), r === null && f & 4 && bO(a), f & 512 && Lr(a, a.return);
        break;
      case 12:
        Ln(l, a);
        break;
      case 13:
        Ln(l, a), f & 4 && EO(l, a), f & 64 && (l = a.memoizedState, l !== null && (l = l.dehydrated, l !== null && (a = Rk.bind(
          null,
          a
        ), Zk(l, a))));
        break;
      case 22:
        if (f = a.memoizedState !== null || hn, !f) {
          r = r !== null && r.memoizedState !== null || It, d = hn;
          var g = It;
          hn = f, (It = r) && !g ? Un(
            l,
            a,
            (a.subtreeFlags & 8772) !== 0
          ) : Ln(l, a), hn = d, It = g;
        }
        break;
      case 30:
        break;
      default:
        Ln(l, a);
    }
  }
  function AO(l) {
    var r = l.alternate;
    r !== null && (l.alternate = null, AO(r)), l.child = null, l.deletions = null, l.sibling = null, l.tag === 5 && (r = l.stateNode, r !== null && ef(r)), l.stateNode = null, l.return = null, l.dependencies = null, l.memoizedProps = null, l.memoizedState = null, l.pendingProps = null, l.stateNode = null, l.updateQueue = null;
  }
  var Gt = null, Pe = !1;
  function dn(l, r, a) {
    for (a = a.child; a !== null; )
      CO(l, r, a), a = a.sibling;
  }
  function CO(l, r, a) {
    if (Ge && typeof Ge.onCommitFiberUnmount == "function")
      try {
        Ge.onCommitFiberUnmount(rr, a);
      } catch {
      }
    switch (a.tag) {
      case 26:
        It || zi(a, r), dn(
          l,
          r,
          a
        ), a.memoizedState ? a.memoizedState.count-- : a.stateNode && (a = a.stateNode, a.parentNode.removeChild(a));
        break;
      case 27:
        It || zi(a, r);
        var f = Gt, d = Pe;
        Wn(a.type) && (Gt = a.stateNode, Pe = !1), dn(
          l,
          r,
          a
        ), Yr(a.stateNode), Gt = f, Pe = d;
        break;
      case 5:
        It || zi(a, r);
      case 6:
        if (f = Gt, d = Pe, Gt = null, dn(
          l,
          r,
          a
        ), Gt = f, Pe = d, Gt !== null)
          if (Pe)
            try {
              (Gt.nodeType === 9 ? Gt.body : Gt.nodeName === "HTML" ? Gt.ownerDocument.body : Gt).removeChild(a.stateNode);
            } catch (g) {
              Lt(
                a,
                r,
                g
              );
            }
          else
            try {
              Gt.removeChild(a.stateNode);
            } catch (g) {
              Lt(
                a,
                r,
                g
              );
            }
        break;
      case 18:
        Gt !== null && (Pe ? (l = Gt, my(
          l.nodeType === 9 ? l.body : l.nodeName === "HTML" ? l.ownerDocument.body : l,
          a.stateNode
        ), io(l)) : my(Gt, a.stateNode));
        break;
      case 4:
        f = Gt, d = Pe, Gt = a.stateNode.containerInfo, Pe = !0, dn(
          l,
          r,
          a
        ), Gt = f, Pe = d;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        It || Pn(2, a, r), It || Pn(4, a, r), dn(
          l,
          r,
          a
        );
        break;
      case 1:
        It || (zi(a, r), f = a.stateNode, typeof f.componentWillUnmount == "function" && SO(
          a,
          r,
          f
        )), dn(
          l,
          r,
          a
        );
        break;
      case 21:
        dn(
          l,
          r,
          a
        );
        break;
      case 22:
        It = (f = It) || a.memoizedState !== null, dn(
          l,
          r,
          a
        ), It = f;
        break;
      default:
        dn(
          l,
          r,
          a
        );
    }
  }
  function EO(l, r) {
    if (r.memoizedState === null && (l = r.alternate, l !== null && (l = l.memoizedState, l !== null && (l = l.dehydrated, l !== null))))
      try {
        io(l);
      } catch (a) {
        Lt(r, r.return, a);
      }
  }
  function wk(l) {
    switch (l.tag) {
      case 13:
      case 19:
        var r = l.stateNode;
        return r === null && (r = l.stateNode = new TO()), r;
      case 22:
        return l = l.stateNode, r = l._retryCache, r === null && (r = l._retryCache = new TO()), r;
      default:
        throw Error(i(435, l.tag));
    }
  }
  function Th(l, r) {
    var a = wk(l);
    r.forEach(function(f) {
      var d = Dk.bind(null, l, f);
      a.has(f) || (a.add(f), f.then(d, d));
    });
  }
  function Ke(l, r) {
    var a = r.deletions;
    if (a !== null)
      for (var f = 0; f < a.length; f++) {
        var d = a[f], g = l, v = r, b = v;
        t: for (; b !== null; ) {
          switch (b.tag) {
            case 27:
              if (Wn(b.type)) {
                Gt = b.stateNode, Pe = !1;
                break t;
              }
              break;
            case 5:
              Gt = b.stateNode, Pe = !1;
              break t;
            case 3:
            case 4:
              Gt = b.stateNode.containerInfo, Pe = !0;
              break t;
          }
          b = b.return;
        }
        if (Gt === null) throw Error(i(160));
        CO(g, v, d), Gt = null, Pe = !1, g = d.alternate, g !== null && (g.return = null), d.return = null;
      }
    if (r.subtreeFlags & 13878)
      for (r = r.child; r !== null; )
        MO(r, l), r = r.sibling;
  }
  var wi = null;
  function MO(l, r) {
    var a = l.alternate, f = l.flags;
    switch (l.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        Ke(r, l), Je(l), f & 4 && (Pn(3, l, l.return), Pr(3, l), Pn(5, l, l.return));
        break;
      case 1:
        Ke(r, l), Je(l), f & 512 && (It || a === null || zi(a, a.return)), f & 64 && hn && (l = l.updateQueue, l !== null && (f = l.callbacks, f !== null && (a = l.shared.hiddenCallbacks, l.shared.hiddenCallbacks = a === null ? f : a.concat(f))));
        break;
      case 26:
        var d = wi;
        if (Ke(r, l), Je(l), f & 512 && (It || a === null || zi(a, a.return)), f & 4) {
          var g = a !== null ? a.memoizedState : null;
          if (f = l.memoizedState, a === null)
            if (f === null)
              if (l.stateNode === null) {
                t: {
                  f = l.type, a = l.memoizedProps, d = d.ownerDocument || d;
                  e: switch (f) {
                    case "title":
                      g = d.getElementsByTagName("title")[0], (!g || g[ur] || g[Ae] || g.namespaceURI === "http://www.w3.org/2000/svg" || g.hasAttribute("itemprop")) && (g = d.createElement(f), d.head.insertBefore(
                        g,
                        d.querySelector("head > title")
                      )), Se(g, f, a), g[Ae] = l, fe(g), f = g;
                      break t;
                    case "link":
                      var v = wy(
                        "link",
                        "href",
                        d
                      ).get(f + (a.href || ""));
                      if (v) {
                        for (var b = 0; b < v.length; b++)
                          if (g = v[b], g.getAttribute("href") === (a.href == null || a.href === "" ? null : a.href) && g.getAttribute("rel") === (a.rel == null ? null : a.rel) && g.getAttribute("title") === (a.title == null ? null : a.title) && g.getAttribute("crossorigin") === (a.crossOrigin == null ? null : a.crossOrigin)) {
                            v.splice(b, 1);
                            break e;
                          }
                      }
                      g = d.createElement(f), Se(g, f, a), d.head.appendChild(g);
                      break;
                    case "meta":
                      if (v = wy(
                        "meta",
                        "content",
                        d
                      ).get(f + (a.content || ""))) {
                        for (b = 0; b < v.length; b++)
                          if (g = v[b], g.getAttribute("content") === (a.content == null ? null : "" + a.content) && g.getAttribute("name") === (a.name == null ? null : a.name) && g.getAttribute("property") === (a.property == null ? null : a.property) && g.getAttribute("http-equiv") === (a.httpEquiv == null ? null : a.httpEquiv) && g.getAttribute("charset") === (a.charSet == null ? null : a.charSet)) {
                            v.splice(b, 1);
                            break e;
                          }
                      }
                      g = d.createElement(f), Se(g, f, a), d.head.appendChild(g);
                      break;
                    default:
                      throw Error(i(468, f));
                  }
                  g[Ae] = l, fe(g), f = g;
                }
                l.stateNode = f;
              } else
                Ty(
                  d,
                  l.type,
                  l.stateNode
                );
            else
              l.stateNode = xy(
                d,
                f,
                l.memoizedProps
              );
          else
            g !== f ? (g === null ? a.stateNode !== null && (a = a.stateNode, a.parentNode.removeChild(a)) : g.count--, f === null ? Ty(
              d,
              l.type,
              l.stateNode
            ) : xy(
              d,
              f,
              l.memoizedProps
            )) : f === null && l.stateNode !== null && Sh(
              l,
              l.memoizedProps,
              a.memoizedProps
            );
        }
        break;
      case 27:
        Ke(r, l), Je(l), f & 512 && (It || a === null || zi(a, a.return)), a !== null && f & 4 && Sh(
          l,
          l.memoizedProps,
          a.memoizedProps
        );
        break;
      case 5:
        if (Ke(r, l), Je(l), f & 512 && (It || a === null || zi(a, a.return)), l.flags & 32) {
          d = l.stateNode;
          try {
            ts(d, "");
          } catch (B) {
            Lt(l, l.return, B);
          }
        }
        f & 4 && l.stateNode != null && (d = l.memoizedProps, Sh(
          l,
          d,
          a !== null ? a.memoizedProps : d
        )), f & 1024 && (wh = !0);
        break;
      case 6:
        if (Ke(r, l), Je(l), f & 4) {
          if (l.stateNode === null)
            throw Error(i(162));
          f = l.memoizedProps, a = l.stateNode;
          try {
            a.nodeValue = f;
          } catch (B) {
            Lt(l, l.return, B);
          }
        }
        break;
      case 3:
        if (su = null, d = wi, wi = nu(r.containerInfo), Ke(r, l), wi = d, Je(l), f & 4 && a !== null && a.memoizedState.isDehydrated)
          try {
            io(r.containerInfo);
          } catch (B) {
            Lt(l, l.return, B);
          }
        wh && (wh = !1, QO(l));
        break;
      case 4:
        f = wi, wi = nu(
          l.stateNode.containerInfo
        ), Ke(r, l), Je(l), wi = f;
        break;
      case 12:
        Ke(r, l), Je(l);
        break;
      case 13:
        Ke(r, l), Je(l), l.child.flags & 8192 && l.memoizedState !== null != (a !== null && a.memoizedState !== null) && (Qh = Qi()), f & 4 && (f = l.updateQueue, f !== null && (l.updateQueue = null, Th(l, f)));
        break;
      case 22:
        d = l.memoizedState !== null;
        var T = a !== null && a.memoizedState !== null, D = hn, L = It;
        if (hn = D || d, It = L || T, Ke(r, l), It = L, hn = D, Je(l), f & 8192)
          t: for (r = l.stateNode, r._visibility = d ? r._visibility & -2 : r._visibility | 1, d && (a === null || T || hn || It || El(l)), a = null, r = l; ; ) {
            if (r.tag === 5 || r.tag === 26) {
              if (a === null) {
                T = a = r;
                try {
                  if (g = T.stateNode, d)
                    v = g.style, typeof v.setProperty == "function" ? v.setProperty("display", "none", "important") : v.display = "none";
                  else {
                    b = T.stateNode;
                    var j = T.memoizedProps.style, q = j != null && j.hasOwnProperty("display") ? j.display : null;
                    b.style.display = q == null || typeof q == "boolean" ? "" : ("" + q).trim();
                  }
                } catch (B) {
                  Lt(T, T.return, B);
                }
              }
            } else if (r.tag === 6) {
              if (a === null) {
                T = r;
                try {
                  T.stateNode.nodeValue = d ? "" : T.memoizedProps;
                } catch (B) {
                  Lt(T, T.return, B);
                }
              }
            } else if ((r.tag !== 22 && r.tag !== 23 || r.memoizedState === null || r === l) && r.child !== null) {
              r.child.return = r, r = r.child;
              continue;
            }
            if (r === l) break t;
            for (; r.sibling === null; ) {
              if (r.return === null || r.return === l) break t;
              a === r && (a = null), r = r.return;
            }
            a === r && (a = null), r.sibling.return = r.return, r = r.sibling;
          }
        f & 4 && (f = l.updateQueue, f !== null && (a = f.retryQueue, a !== null && (f.retryQueue = null, Th(l, a))));
        break;
      case 19:
        Ke(r, l), Je(l), f & 4 && (f = l.updateQueue, f !== null && (l.updateQueue = null, Th(l, f)));
        break;
      case 30:
        break;
      case 21:
        break;
      default:
        Ke(r, l), Je(l);
    }
  }
  function Je(l) {
    var r = l.flags;
    if (r & 2) {
      try {
        for (var a, f = l.return; f !== null; ) {
          if (xO(f)) {
            a = f;
            break;
          }
          f = f.return;
        }
        if (a == null) throw Error(i(160));
        switch (a.tag) {
          case 27:
            var d = a.stateNode, g = bh(l);
            $a(l, g, d);
            break;
          case 5:
            var v = a.stateNode;
            a.flags & 32 && (ts(v, ""), a.flags &= -33);
            var b = bh(l);
            $a(l, b, v);
            break;
          case 3:
          case 4:
            var T = a.stateNode.containerInfo, D = bh(l);
            xh(
              l,
              D,
              T
            );
            break;
          default:
            throw Error(i(161));
        }
      } catch (L) {
        Lt(l, l.return, L);
      }
      l.flags &= -3;
    }
    r & 4096 && (l.flags &= -4097);
  }
  function QO(l) {
    if (l.subtreeFlags & 1024)
      for (l = l.child; l !== null; ) {
        var r = l;
        QO(r), r.tag === 5 && r.flags & 1024 && r.stateNode.reset(), l = l.sibling;
      }
  }
  function Ln(l, r) {
    if (r.subtreeFlags & 8772)
      for (r = r.child; r !== null; )
        kO(l, r.alternate, r), r = r.sibling;
  }
  function El(l) {
    for (l = l.child; l !== null; ) {
      var r = l;
      switch (r.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          Pn(4, r, r.return), El(r);
          break;
        case 1:
          zi(r, r.return);
          var a = r.stateNode;
          typeof a.componentWillUnmount == "function" && SO(
            r,
            r.return,
            a
          ), El(r);
          break;
        case 27:
          Yr(r.stateNode);
        case 26:
        case 5:
          zi(r, r.return), El(r);
          break;
        case 22:
          r.memoizedState === null && El(r);
          break;
        case 30:
          El(r);
          break;
        default:
          El(r);
      }
      l = l.sibling;
    }
  }
  function Un(l, r, a) {
    for (a = a && (r.subtreeFlags & 8772) !== 0, r = r.child; r !== null; ) {
      var f = r.alternate, d = l, g = r, v = g.flags;
      switch (g.tag) {
        case 0:
        case 11:
        case 15:
          Un(
            d,
            g,
            a
          ), Pr(4, g);
          break;
        case 1:
          if (Un(
            d,
            g,
            a
          ), f = g, d = f.stateNode, typeof d.componentDidMount == "function")
            try {
              d.componentDidMount();
            } catch (D) {
              Lt(f, f.return, D);
            }
          if (f = g, d = f.updateQueue, d !== null) {
            var b = f.stateNode;
            try {
              var T = d.shared.hiddenCallbacks;
              if (T !== null)
                for (d.shared.hiddenCallbacks = null, d = 0; d < T.length; d++)
                  s0(T[d], b);
            } catch (D) {
              Lt(f, f.return, D);
            }
          }
          a && v & 64 && vO(g), Lr(g, g.return);
          break;
        case 27:
          wO(g);
        case 26:
        case 5:
          Un(
            d,
            g,
            a
          ), a && f === null && v & 4 && bO(g), Lr(g, g.return);
          break;
        case 12:
          Un(
            d,
            g,
            a
          );
          break;
        case 13:
          Un(
            d,
            g,
            a
          ), a && v & 4 && EO(d, g);
          break;
        case 22:
          g.memoizedState === null && Un(
            d,
            g,
            a
          ), Lr(g, g.return);
          break;
        case 30:
          break;
        default:
          Un(
            d,
            g,
            a
          );
      }
      r = r.sibling;
    }
  }
  function kh(l, r) {
    var a = null;
    l !== null && l.memoizedState !== null && l.memoizedState.cachePool !== null && (a = l.memoizedState.cachePool.pool), l = null, r.memoizedState !== null && r.memoizedState.cachePool !== null && (l = r.memoizedState.cachePool.pool), l !== a && (l != null && l.refCount++, a != null && Tr(a));
  }
  function Ah(l, r) {
    l = null, r.alternate !== null && (l = r.alternate.memoizedState.cache), r = r.memoizedState.cache, r !== l && (r.refCount++, l != null && Tr(l));
  }
  function qi(l, r, a, f) {
    if (r.subtreeFlags & 10256)
      for (r = r.child; r !== null; )
        RO(
          l,
          r,
          a,
          f
        ), r = r.sibling;
  }
  function RO(l, r, a, f) {
    var d = r.flags;
    switch (r.tag) {
      case 0:
      case 11:
      case 15:
        qi(
          l,
          r,
          a,
          f
        ), d & 2048 && Pr(9, r);
        break;
      case 1:
        qi(
          l,
          r,
          a,
          f
        );
        break;
      case 3:
        qi(
          l,
          r,
          a,
          f
        ), d & 2048 && (l = null, r.alternate !== null && (l = r.alternate.memoizedState.cache), r = r.memoizedState.cache, r !== l && (r.refCount++, l != null && Tr(l)));
        break;
      case 12:
        if (d & 2048) {
          qi(
            l,
            r,
            a,
            f
          ), l = r.stateNode;
          try {
            var g = r.memoizedProps, v = g.id, b = g.onPostCommit;
            typeof b == "function" && b(
              v,
              r.alternate === null ? "mount" : "update",
              l.passiveEffectDuration,
              -0
            );
          } catch (T) {
            Lt(r, r.return, T);
          }
        } else
          qi(
            l,
            r,
            a,
            f
          );
        break;
      case 13:
        qi(
          l,
          r,
          a,
          f
        );
        break;
      case 23:
        break;
      case 22:
        g = r.stateNode, v = r.alternate, r.memoizedState !== null ? g._visibility & 2 ? qi(
          l,
          r,
          a,
          f
        ) : Ur(l, r) : g._visibility & 2 ? qi(
          l,
          r,
          a,
          f
        ) : (g._visibility |= 2, vs(
          l,
          r,
          a,
          f,
          (r.subtreeFlags & 10256) !== 0
        )), d & 2048 && kh(v, r);
        break;
      case 24:
        qi(
          l,
          r,
          a,
          f
        ), d & 2048 && Ah(r.alternate, r);
        break;
      default:
        qi(
          l,
          r,
          a,
          f
        );
    }
  }
  function vs(l, r, a, f, d) {
    for (d = d && (r.subtreeFlags & 10256) !== 0, r = r.child; r !== null; ) {
      var g = l, v = r, b = a, T = f, D = v.flags;
      switch (v.tag) {
        case 0:
        case 11:
        case 15:
          vs(
            g,
            v,
            b,
            T,
            d
          ), Pr(8, v);
          break;
        case 23:
          break;
        case 22:
          var L = v.stateNode;
          v.memoizedState !== null ? L._visibility & 2 ? vs(
            g,
            v,
            b,
            T,
            d
          ) : Ur(
            g,
            v
          ) : (L._visibility |= 2, vs(
            g,
            v,
            b,
            T,
            d
          )), d && D & 2048 && kh(
            v.alternate,
            v
          );
          break;
        case 24:
          vs(
            g,
            v,
            b,
            T,
            d
          ), d && D & 2048 && Ah(v.alternate, v);
          break;
        default:
          vs(
            g,
            v,
            b,
            T,
            d
          );
      }
      r = r.sibling;
    }
  }
  function Ur(l, r) {
    if (r.subtreeFlags & 10256)
      for (r = r.child; r !== null; ) {
        var a = l, f = r, d = f.flags;
        switch (f.tag) {
          case 22:
            Ur(a, f), d & 2048 && kh(
              f.alternate,
              f
            );
            break;
          case 24:
            Ur(a, f), d & 2048 && Ah(f.alternate, f);
            break;
          default:
            Ur(a, f);
        }
        r = r.sibling;
      }
  }
  var Vr = 8192;
  function Ss(l) {
    if (l.subtreeFlags & Vr)
      for (l = l.child; l !== null; )
        DO(l), l = l.sibling;
  }
  function DO(l) {
    switch (l.tag) {
      case 26:
        Ss(l), l.flags & Vr && l.memoizedState !== null && a2(
          wi,
          l.memoizedState,
          l.memoizedProps
        );
        break;
      case 5:
        Ss(l);
        break;
      case 3:
      case 4:
        var r = wi;
        wi = nu(l.stateNode.containerInfo), Ss(l), wi = r;
        break;
      case 22:
        l.memoizedState === null && (r = l.alternate, r !== null && r.memoizedState !== null ? (r = Vr, Vr = 16777216, Ss(l), Vr = r) : Ss(l));
        break;
      default:
        Ss(l);
    }
  }
  function zO(l) {
    var r = l.alternate;
    if (r !== null && (l = r.child, l !== null)) {
      r.child = null;
      do
        r = l.sibling, l.sibling = null, l = r;
      while (l !== null);
    }
  }
  function Hr(l) {
    var r = l.deletions;
    if ((l.flags & 16) !== 0) {
      if (r !== null)
        for (var a = 0; a < r.length; a++) {
          var f = r[a];
          de = f, _O(
            f,
            l
          );
        }
      zO(l);
    }
    if (l.subtreeFlags & 10256)
      for (l = l.child; l !== null; )
        qO(l), l = l.sibling;
  }
  function qO(l) {
    switch (l.tag) {
      case 0:
      case 11:
      case 15:
        Hr(l), l.flags & 2048 && Pn(9, l, l.return);
        break;
      case 3:
        Hr(l);
        break;
      case 12:
        Hr(l);
        break;
      case 22:
        var r = l.stateNode;
        l.memoizedState !== null && r._visibility & 2 && (l.return === null || l.return.tag !== 13) ? (r._visibility &= -3, ja(l)) : Hr(l);
        break;
      default:
        Hr(l);
    }
  }
  function ja(l) {
    var r = l.deletions;
    if ((l.flags & 16) !== 0) {
      if (r !== null)
        for (var a = 0; a < r.length; a++) {
          var f = r[a];
          de = f, _O(
            f,
            l
          );
        }
      zO(l);
    }
    for (l = l.child; l !== null; ) {
      switch (r = l, r.tag) {
        case 0:
        case 11:
        case 15:
          Pn(8, r, r.return), ja(r);
          break;
        case 22:
          a = r.stateNode, a._visibility & 2 && (a._visibility &= -3, ja(r));
          break;
        default:
          ja(r);
      }
      l = l.sibling;
    }
  }
  function _O(l, r) {
    for (; de !== null; ) {
      var a = de;
      switch (a.tag) {
        case 0:
        case 11:
        case 15:
          Pn(8, a, r);
          break;
        case 23:
        case 22:
          if (a.memoizedState !== null && a.memoizedState.cachePool !== null) {
            var f = a.memoizedState.cachePool.pool;
            f != null && f.refCount++;
          }
          break;
        case 24:
          Tr(a.memoizedState.cache);
      }
      if (f = a.child, f !== null) f.return = a, de = f;
      else
        t: for (a = l; de !== null; ) {
          f = de;
          var d = f.sibling, g = f.return;
          if (AO(f), f === a) {
            de = null;
            break t;
          }
          if (d !== null) {
            d.return = g, de = d;
            break t;
          }
          de = g;
        }
    }
  }
  var Tk = {
    getCacheForType: function(l) {
      var r = Ce(oe), a = r.data.get(l);
      return a === void 0 && (a = l(), r.data.set(l, a)), a;
    }
  }, kk = typeof WeakMap == "function" ? WeakMap : Map, qt = 0, Xt = null, Tt = null, Ct = 0, _t = 0, Ie = null, Vn = !1, bs = !1, Ch = !1, pn = 0, Kt = 0, Hn = 0, Ml = 0, Eh = 0, pi = 0, xs = 0, Xr = null, Le = null, Mh = !1, Qh = 0, Wa = 1 / 0, Ga = null, Xn = null, ve = 0, $n = null, ws = null, Ts = 0, Rh = 0, Dh = null, BO = null, $r = 0, zh = null;
  function ti() {
    if ((qt & 2) !== 0 && Ct !== 0)
      return Ct & -Ct;
    if (_.T !== null) {
      var l = fs;
      return l !== 0 ? l : Uh();
    }
    return Jm();
  }
  function NO() {
    pi === 0 && (pi = (Ct & 536870912) === 0 || zt ? Ym() : 536870912);
    var l = di.current;
    return l !== null && (l.flags |= 32), pi;
  }
  function ei(l, r, a) {
    (l === Xt && (_t === 2 || _t === 9) || l.cancelPendingCommit !== null) && (ks(l, 0), jn(
      l,
      Ct,
      pi,
      !1
    )), ar(l, a), ((qt & 2) === 0 || l !== Xt) && (l === Xt && ((qt & 2) === 0 && (Ml |= a), Kt === 4 && jn(
      l,
      Ct,
      pi,
      !1
    )), _i(l));
  }
  function PO(l, r, a) {
    if ((qt & 6) !== 0) throw Error(i(327));
    var f = !a && (r & 124) === 0 && (r & l.expiredLanes) === 0 || or(l, r), d = f ? Ek(l, r) : Bh(l, r, !0), g = f;
    do {
      if (d === 0) {
        bs && !f && jn(l, r, 0, !1);
        break;
      } else {
        if (a = l.current.alternate, g && !Ak(a)) {
          d = Bh(l, r, !1), g = !1;
          continue;
        }
        if (d === 2) {
          if (g = r, l.errorRecoveryDisabledLanes & g)
            var v = 0;
          else
            v = l.pendingLanes & -536870913, v = v !== 0 ? v : v & 536870912 ? 536870912 : 0;
          if (v !== 0) {
            r = v;
            t: {
              var b = l;
              d = Xr;
              var T = b.current.memoizedState.isDehydrated;
              if (T && (ks(b, v).flags |= 256), v = Bh(
                b,
                v,
                !1
              ), v !== 2) {
                if (Ch && !T) {
                  b.errorRecoveryDisabledLanes |= g, Ml |= g, d = 4;
                  break t;
                }
                g = Le, Le = d, g !== null && (Le === null ? Le = g : Le.push.apply(
                  Le,
                  g
                ));
              }
              d = v;
            }
            if (g = !1, d !== 2) continue;
          }
        }
        if (d === 1) {
          ks(l, 0), jn(l, r, 0, !0);
          break;
        }
        t: {
          switch (f = l, g = d, g) {
            case 0:
            case 1:
              throw Error(i(345));
            case 4:
              if ((r & 4194048) !== r) break;
            case 6:
              jn(
                f,
                r,
                pi,
                !Vn
              );
              break t;
            case 2:
              Le = null;
              break;
            case 3:
            case 5:
              break;
            default:
              throw Error(i(329));
          }
          if ((r & 62914560) === r && (d = Qh + 300 - Qi(), 10 < d)) {
            if (jn(
              f,
              r,
              pi,
              !Vn
            ), la(f, 0, !0) !== 0) break t;
            f.timeoutHandle = dy(
              LO.bind(
                null,
                f,
                a,
                Le,
                Ga,
                Mh,
                r,
                pi,
                Ml,
                xs,
                Vn,
                g,
                2,
                -0,
                0
              ),
              d
            );
            break t;
          }
          LO(
            f,
            a,
            Le,
            Ga,
            Mh,
            r,
            pi,
            Ml,
            xs,
            Vn,
            g,
            0,
            -0,
            0
          );
        }
      }
      break;
    } while (!0);
    _i(l);
  }
  function LO(l, r, a, f, d, g, v, b, T, D, L, j, q, B) {
    if (l.timeoutHandle = -1, j = r.subtreeFlags, (j & 8192 || (j & 16785408) === 16785408) && (Kr = { stylesheets: null, count: 0, unsuspend: o2 }, DO(r), j = u2(), j !== null)) {
      l.cancelPendingCommit = j(
        WO.bind(
          null,
          l,
          r,
          g,
          a,
          f,
          d,
          v,
          b,
          T,
          L,
          1,
          q,
          B
        )
      ), jn(l, g, v, !D);
      return;
    }
    WO(
      l,
      r,
      g,
      a,
      f,
      d,
      v,
      b,
      T
    );
  }
  function Ak(l) {
    for (var r = l; ; ) {
      var a = r.tag;
      if ((a === 0 || a === 11 || a === 15) && r.flags & 16384 && (a = r.updateQueue, a !== null && (a = a.stores, a !== null)))
        for (var f = 0; f < a.length; f++) {
          var d = a[f], g = d.getSnapshot;
          d = d.value;
          try {
            if (!Ze(g(), d)) return !1;
          } catch {
            return !1;
          }
        }
      if (a = r.child, r.subtreeFlags & 16384 && a !== null)
        a.return = r, r = a;
      else {
        if (r === l) break;
        for (; r.sibling === null; ) {
          if (r.return === null || r.return === l) return !0;
          r = r.return;
        }
        r.sibling.return = r.return, r = r.sibling;
      }
    }
    return !0;
  }
  function jn(l, r, a, f) {
    r &= ~Eh, r &= ~Ml, l.suspendedLanes |= r, l.pingedLanes &= ~r, f && (l.warmLanes |= r), f = l.expirationTimes;
    for (var d = r; 0 < d; ) {
      var g = 31 - Ye(d), v = 1 << g;
      f[g] = -1, d &= ~v;
    }
    a !== 0 && Fm(l, a, r);
  }
  function Ya() {
    return (qt & 6) === 0 ? (jr(0), !1) : !0;
  }
  function qh() {
    if (Tt !== null) {
      if (_t === 0)
        var l = Tt.return;
      else
        l = Tt, rn = wl = null, Kf(l), Os = null, _r = 0, l = Tt;
      for (; l !== null; )
        yO(l.alternate, l), l = l.return;
      Tt = null;
    }
  }
  function ks(l, r) {
    var a = l.timeoutHandle;
    a !== -1 && (l.timeoutHandle = -1, $k(a)), a = l.cancelPendingCommit, a !== null && (l.cancelPendingCommit = null, a()), qh(), Xt = l, Tt = a = nn(l.current, null), Ct = r, _t = 0, Ie = null, Vn = !1, bs = or(l, r), Ch = !1, xs = pi = Eh = Ml = Hn = Kt = 0, Le = Xr = null, Mh = !1, (r & 8) !== 0 && (r |= r & 32);
    var f = l.entangledLanes;
    if (f !== 0)
      for (l = l.entanglements, f &= r; 0 < f; ) {
        var d = 31 - Ye(f), g = 1 << d;
        r |= l[d], f &= ~g;
      }
    return pn = r, ga(), a;
  }
  function UO(l, r) {
    bt = null, _.H = _a, r === Ar || r === ka ? (r = n0(), _t = 3) : r === t0 ? (r = n0(), _t = 4) : _t = r === lO ? 8 : r !== null && typeof r == "object" && typeof r.then == "function" ? 6 : 1, Ie = r, Tt === null && (Kt = 1, Ua(
      l,
      ui(r, l.current)
    ));
  }
  function VO() {
    var l = _.H;
    return _.H = _a, l === null ? _a : l;
  }
  function HO() {
    var l = _.A;
    return _.A = Tk, l;
  }
  function _h() {
    Kt = 4, Vn || (Ct & 4194048) !== Ct && di.current !== null || (bs = !0), (Hn & 134217727) === 0 && (Ml & 134217727) === 0 || Xt === null || jn(
      Xt,
      Ct,
      pi,
      !1
    );
  }
  function Bh(l, r, a) {
    var f = qt;
    qt |= 2;
    var d = VO(), g = HO();
    (Xt !== l || Ct !== r) && (Ga = null, ks(l, r)), r = !1;
    var v = Kt;
    t: do
      try {
        if (_t !== 0 && Tt !== null) {
          var b = Tt, T = Ie;
          switch (_t) {
            case 8:
              qh(), v = 6;
              break t;
            case 3:
            case 2:
            case 9:
            case 6:
              di.current === null && (r = !0);
              var D = _t;
              if (_t = 0, Ie = null, As(l, b, T, D), a && bs) {
                v = 0;
                break t;
              }
              break;
            default:
              D = _t, _t = 0, Ie = null, As(l, b, T, D);
          }
        }
        Ck(), v = Kt;
        break;
      } catch (L) {
        UO(l, L);
      }
    while (!0);
    return r && l.shellSuspendCounter++, rn = wl = null, qt = f, _.H = d, _.A = g, Tt === null && (Xt = null, Ct = 0, ga()), v;
  }
  function Ck() {
    for (; Tt !== null; ) XO(Tt);
  }
  function Ek(l, r) {
    var a = qt;
    qt |= 2;
    var f = VO(), d = HO();
    Xt !== l || Ct !== r ? (Ga = null, Wa = Qi() + 500, ks(l, r)) : bs = or(
      l,
      r
    );
    t: do
      try {
        if (_t !== 0 && Tt !== null) {
          r = Tt;
          var g = Ie;
          e: switch (_t) {
            case 1:
              _t = 0, Ie = null, As(l, r, g, 1);
              break;
            case 2:
            case 9:
              if (e0(g)) {
                _t = 0, Ie = null, $O(r);
                break;
              }
              r = function() {
                _t !== 2 && _t !== 9 || Xt !== l || (_t = 7), _i(l);
              }, g.then(r, r);
              break t;
            case 3:
              _t = 7;
              break t;
            case 4:
              _t = 5;
              break t;
            case 7:
              e0(g) ? (_t = 0, Ie = null, $O(r)) : (_t = 0, Ie = null, As(l, r, g, 7));
              break;
            case 5:
              var v = null;
              switch (Tt.tag) {
                case 26:
                  v = Tt.memoizedState;
                case 5:
                case 27:
                  var b = Tt;
                  if (!v || ky(v)) {
                    _t = 0, Ie = null;
                    var T = b.sibling;
                    if (T !== null) Tt = T;
                    else {
                      var D = b.return;
                      D !== null ? (Tt = D, Za(D)) : Tt = null;
                    }
                    break e;
                  }
              }
              _t = 0, Ie = null, As(l, r, g, 5);
              break;
            case 6:
              _t = 0, Ie = null, As(l, r, g, 6);
              break;
            case 8:
              qh(), Kt = 6;
              break t;
            default:
              throw Error(i(462));
          }
        }
        Mk();
        break;
      } catch (L) {
        UO(l, L);
      }
    while (!0);
    return rn = wl = null, _.H = f, _.A = d, qt = a, Tt !== null ? 0 : (Xt = null, Ct = 0, ga(), Kt);
  }
  function Mk() {
    for (; Tt !== null && !Kw(); )
      XO(Tt);
  }
  function XO(l) {
    var r = gO(l.alternate, l, pn);
    l.memoizedProps = l.pendingProps, r === null ? Za(l) : Tt = r;
  }
  function $O(l) {
    var r = l, a = r.alternate;
    switch (r.tag) {
      case 15:
      case 0:
        r = cO(
          a,
          r,
          r.pendingProps,
          r.type,
          void 0,
          Ct
        );
        break;
      case 11:
        r = cO(
          a,
          r,
          r.pendingProps,
          r.type.render,
          r.ref,
          Ct
        );
        break;
      case 5:
        Kf(r);
      default:
        yO(a, r), r = Tt = jg(r, pn), r = gO(a, r, pn);
    }
    l.memoizedProps = l.pendingProps, r === null ? Za(l) : Tt = r;
  }
  function As(l, r, a, f) {
    rn = wl = null, Kf(r), Os = null, _r = 0;
    var d = r.return;
    try {
      if (yk(
        l,
        d,
        r,
        a,
        Ct
      )) {
        Kt = 1, Ua(
          l,
          ui(a, l.current)
        ), Tt = null;
        return;
      }
    } catch (g) {
      if (d !== null) throw Tt = d, g;
      Kt = 1, Ua(
        l,
        ui(a, l.current)
      ), Tt = null;
      return;
    }
    r.flags & 32768 ? (zt || f === 1 ? l = !0 : bs || (Ct & 536870912) !== 0 ? l = !1 : (Vn = l = !0, (f === 2 || f === 9 || f === 3 || f === 6) && (f = di.current, f !== null && f.tag === 13 && (f.flags |= 16384))), jO(r, l)) : Za(r);
  }
  function Za(l) {
    var r = l;
    do {
      if ((r.flags & 32768) !== 0) {
        jO(
          r,
          Vn
        );
        return;
      }
      l = r.return;
      var a = Sk(
        r.alternate,
        r,
        pn
      );
      if (a !== null) {
        Tt = a;
        return;
      }
      if (r = r.sibling, r !== null) {
        Tt = r;
        return;
      }
      Tt = r = l;
    } while (r !== null);
    Kt === 0 && (Kt = 5);
  }
  function jO(l, r) {
    do {
      var a = bk(l.alternate, l);
      if (a !== null) {
        a.flags &= 32767, Tt = a;
        return;
      }
      if (a = l.return, a !== null && (a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null), !r && (l = l.sibling, l !== null)) {
        Tt = l;
        return;
      }
      Tt = l = a;
    } while (l !== null);
    Kt = 6, Tt = null;
  }
  function WO(l, r, a, f, d, g, v, b, T) {
    l.cancelPendingCommit = null;
    do
      Fa();
    while (ve !== 0);
    if ((qt & 6) !== 0) throw Error(i(327));
    if (r !== null) {
      if (r === l.current) throw Error(i(177));
      if (g = r.lanes | r.childLanes, g |= Af, oT(
        l,
        a,
        g,
        v,
        b,
        T
      ), l === Xt && (Tt = Xt = null, Ct = 0), ws = r, $n = l, Ts = a, Rh = g, Dh = d, BO = f, (r.subtreeFlags & 10256) !== 0 || (r.flags & 10256) !== 0 ? (l.callbackNode = null, l.callbackPriority = 0, zk(ea, function() {
        return KO(), null;
      })) : (l.callbackNode = null, l.callbackPriority = 0), f = (r.flags & 13878) !== 0, (r.subtreeFlags & 13878) !== 0 || f) {
        f = _.T, _.T = null, d = P.p, P.p = 2, v = qt, qt |= 4;
        try {
          xk(l, r, a);
        } finally {
          qt = v, P.p = d, _.T = f;
        }
      }
      ve = 1, GO(), YO(), ZO();
    }
  }
  function GO() {
    if (ve === 1) {
      ve = 0;
      var l = $n, r = ws, a = (r.flags & 13878) !== 0;
      if ((r.subtreeFlags & 13878) !== 0 || a) {
        a = _.T, _.T = null;
        var f = P.p;
        P.p = 2;
        var d = qt;
        qt |= 4;
        try {
          MO(r, l);
          var g = Yh, v = _g(l.containerInfo), b = g.focusedElem, T = g.selectionRange;
          if (v !== b && b && b.ownerDocument && qg(
            b.ownerDocument.documentElement,
            b
          )) {
            if (T !== null && bf(b)) {
              var D = T.start, L = T.end;
              if (L === void 0 && (L = D), "selectionStart" in b)
                b.selectionStart = D, b.selectionEnd = Math.min(
                  L,
                  b.value.length
                );
              else {
                var j = b.ownerDocument || document, q = j && j.defaultView || window;
                if (q.getSelection) {
                  var B = q.getSelection(), Ot = b.textContent.length, pt = Math.min(T.start, Ot), Pt = T.end === void 0 ? pt : Math.min(T.end, Ot);
                  !B.extend && pt > Pt && (v = Pt, Pt = pt, pt = v);
                  var E = zg(
                    b,
                    pt
                  ), A = zg(
                    b,
                    Pt
                  );
                  if (E && A && (B.rangeCount !== 1 || B.anchorNode !== E.node || B.anchorOffset !== E.offset || B.focusNode !== A.node || B.focusOffset !== A.offset)) {
                    var Q = j.createRange();
                    Q.setStart(E.node, E.offset), B.removeAllRanges(), pt > Pt ? (B.addRange(Q), B.extend(A.node, A.offset)) : (Q.setEnd(A.node, A.offset), B.addRange(Q));
                  }
                }
              }
            }
            for (j = [], B = b; B = B.parentNode; )
              B.nodeType === 1 && j.push({
                element: B,
                left: B.scrollLeft,
                top: B.scrollTop
              });
            for (typeof b.focus == "function" && b.focus(), b = 0; b < j.length; b++) {
              var H = j[b];
              H.element.scrollLeft = H.left, H.element.scrollTop = H.top;
            }
          }
          au = !!Gh, Yh = Gh = null;
        } finally {
          qt = d, P.p = f, _.T = a;
        }
      }
      l.current = r, ve = 2;
    }
  }
  function YO() {
    if (ve === 2) {
      ve = 0;
      var l = $n, r = ws, a = (r.flags & 8772) !== 0;
      if ((r.subtreeFlags & 8772) !== 0 || a) {
        a = _.T, _.T = null;
        var f = P.p;
        P.p = 2;
        var d = qt;
        qt |= 4;
        try {
          kO(l, r.alternate, r);
        } finally {
          qt = d, P.p = f, _.T = a;
        }
      }
      ve = 3;
    }
  }
  function ZO() {
    if (ve === 4 || ve === 3) {
      ve = 0, Jw();
      var l = $n, r = ws, a = Ts, f = BO;
      (r.subtreeFlags & 10256) !== 0 || (r.flags & 10256) !== 0 ? ve = 5 : (ve = 0, ws = $n = null, FO(l, l.pendingLanes));
      var d = l.pendingLanes;
      if (d === 0 && (Xn = null), Ic(a), r = r.stateNode, Ge && typeof Ge.onCommitFiberRoot == "function")
        try {
          Ge.onCommitFiberRoot(
            rr,
            r,
            void 0,
            (r.current.flags & 128) === 128
          );
        } catch {
        }
      if (f !== null) {
        r = _.T, d = P.p, P.p = 2, _.T = null;
        try {
          for (var g = l.onRecoverableError, v = 0; v < f.length; v++) {
            var b = f[v];
            g(b.value, {
              componentStack: b.stack
            });
          }
        } finally {
          _.T = r, P.p = d;
        }
      }
      (Ts & 3) !== 0 && Fa(), _i(l), d = l.pendingLanes, (a & 4194090) !== 0 && (d & 42) !== 0 ? l === zh ? $r++ : ($r = 0, zh = l) : $r = 0, jr(0);
    }
  }
  function FO(l, r) {
    (l.pooledCacheLanes &= r) === 0 && (r = l.pooledCache, r != null && (l.pooledCache = null, Tr(r)));
  }
  function Fa(l) {
    return GO(), YO(), ZO(), KO();
  }
  function KO() {
    if (ve !== 5) return !1;
    var l = $n, r = Rh;
    Rh = 0;
    var a = Ic(Ts), f = _.T, d = P.p;
    try {
      P.p = 32 > a ? 32 : a, _.T = null, a = Dh, Dh = null;
      var g = $n, v = Ts;
      if (ve = 0, ws = $n = null, Ts = 0, (qt & 6) !== 0) throw Error(i(331));
      var b = qt;
      if (qt |= 4, qO(g.current), RO(
        g,
        g.current,
        v,
        a
      ), qt = b, jr(0, !1), Ge && typeof Ge.onPostCommitFiberRoot == "function")
        try {
          Ge.onPostCommitFiberRoot(rr, g);
        } catch {
        }
      return !0;
    } finally {
      P.p = d, _.T = f, FO(l, r);
    }
  }
  function JO(l, r, a) {
    r = ui(a, r), r = fh(l.stateNode, r, 2), l = qn(l, r, 2), l !== null && (ar(l, 2), _i(l));
  }
  function Lt(l, r, a) {
    if (l.tag === 3)
      JO(l, l, a);
    else
      for (; r !== null; ) {
        if (r.tag === 3) {
          JO(
            r,
            l,
            a
          );
          break;
        } else if (r.tag === 1) {
          var f = r.stateNode;
          if (typeof r.type.getDerivedStateFromError == "function" || typeof f.componentDidCatch == "function" && (Xn === null || !Xn.has(f))) {
            l = ui(a, l), a = iO(2), f = qn(r, a, 2), f !== null && (nO(
              a,
              f,
              r,
              l
            ), ar(f, 2), _i(f));
            break;
          }
        }
        r = r.return;
      }
  }
  function Nh(l, r, a) {
    var f = l.pingCache;
    if (f === null) {
      f = l.pingCache = new kk();
      var d = /* @__PURE__ */ new Set();
      f.set(r, d);
    } else
      d = f.get(r), d === void 0 && (d = /* @__PURE__ */ new Set(), f.set(r, d));
    d.has(a) || (Ch = !0, d.add(a), l = Qk.bind(null, l, r, a), r.then(l, l));
  }
  function Qk(l, r, a) {
    var f = l.pingCache;
    f !== null && f.delete(r), l.pingedLanes |= l.suspendedLanes & a, l.warmLanes &= ~a, Xt === l && (Ct & a) === a && (Kt === 4 || Kt === 3 && (Ct & 62914560) === Ct && 300 > Qi() - Qh ? (qt & 2) === 0 && ks(l, 0) : Eh |= a, xs === Ct && (xs = 0)), _i(l);
  }
  function IO(l, r) {
    r === 0 && (r = Zm()), l = os(l, r), l !== null && (ar(l, r), _i(l));
  }
  function Rk(l) {
    var r = l.memoizedState, a = 0;
    r !== null && (a = r.retryLane), IO(l, a);
  }
  function Dk(l, r) {
    var a = 0;
    switch (l.tag) {
      case 13:
        var f = l.stateNode, d = l.memoizedState;
        d !== null && (a = d.retryLane);
        break;
      case 19:
        f = l.stateNode;
        break;
      case 22:
        f = l.stateNode._retryCache;
        break;
      default:
        throw Error(i(314));
    }
    f !== null && f.delete(r), IO(l, a);
  }
  function zk(l, r) {
    return Zc(l, r);
  }
  var Ka = null, Cs = null, Ph = !1, Ja = !1, Lh = !1, Ql = 0;
  function _i(l) {
    l !== Cs && l.next === null && (Cs === null ? Ka = Cs = l : Cs = Cs.next = l), Ja = !0, Ph || (Ph = !0, _k());
  }
  function jr(l, r) {
    if (!Lh && Ja) {
      Lh = !0;
      do
        for (var a = !1, f = Ka; f !== null; ) {
          if (l !== 0) {
            var d = f.pendingLanes;
            if (d === 0) var g = 0;
            else {
              var v = f.suspendedLanes, b = f.pingedLanes;
              g = (1 << 31 - Ye(42 | l) + 1) - 1, g &= d & ~(v & ~b), g = g & 201326741 ? g & 201326741 | 1 : g ? g | 2 : 0;
            }
            g !== 0 && (a = !0, ny(f, g));
          } else
            g = Ct, g = la(
              f,
              f === Xt ? g : 0,
              f.cancelPendingCommit !== null || f.timeoutHandle !== -1
            ), (g & 3) === 0 || or(f, g) || (a = !0, ny(f, g));
          f = f.next;
        }
      while (a);
      Lh = !1;
    }
  }
  function qk() {
    ty();
  }
  function ty() {
    Ja = Ph = !1;
    var l = 0;
    Ql !== 0 && (Xk() && (l = Ql), Ql = 0);
    for (var r = Qi(), a = null, f = Ka; f !== null; ) {
      var d = f.next, g = ey(f, r);
      g === 0 ? (f.next = null, a === null ? Ka = d : a.next = d, d === null && (Cs = a)) : (a = f, (l !== 0 || (g & 3) !== 0) && (Ja = !0)), f = d;
    }
    jr(l);
  }
  function ey(l, r) {
    for (var a = l.suspendedLanes, f = l.pingedLanes, d = l.expirationTimes, g = l.pendingLanes & -62914561; 0 < g; ) {
      var v = 31 - Ye(g), b = 1 << v, T = d[v];
      T === -1 ? ((b & a) === 0 || (b & f) !== 0) && (d[v] = rT(b, r)) : T <= r && (l.expiredLanes |= b), g &= ~b;
    }
    if (r = Xt, a = Ct, a = la(
      l,
      l === r ? a : 0,
      l.cancelPendingCommit !== null || l.timeoutHandle !== -1
    ), f = l.callbackNode, a === 0 || l === r && (_t === 2 || _t === 9) || l.cancelPendingCommit !== null)
      return f !== null && f !== null && Fc(f), l.callbackNode = null, l.callbackPriority = 0;
    if ((a & 3) === 0 || or(l, a)) {
      if (r = a & -a, r === l.callbackPriority) return r;
      switch (f !== null && Fc(f), Ic(a)) {
        case 2:
        case 8:
          a = Wm;
          break;
        case 32:
          a = ea;
          break;
        case 268435456:
          a = Gm;
          break;
        default:
          a = ea;
      }
      return f = iy.bind(null, l), a = Zc(a, f), l.callbackPriority = r, l.callbackNode = a, r;
    }
    return f !== null && f !== null && Fc(f), l.callbackPriority = 2, l.callbackNode = null, 2;
  }
  function iy(l, r) {
    if (ve !== 0 && ve !== 5)
      return l.callbackNode = null, l.callbackPriority = 0, null;
    var a = l.callbackNode;
    if (Fa() && l.callbackNode !== a)
      return null;
    var f = Ct;
    return f = la(
      l,
      l === Xt ? f : 0,
      l.cancelPendingCommit !== null || l.timeoutHandle !== -1
    ), f === 0 ? null : (PO(l, f, r), ey(l, Qi()), l.callbackNode != null && l.callbackNode === a ? iy.bind(null, l) : null);
  }
  function ny(l, r) {
    if (Fa()) return null;
    PO(l, r, !0);
  }
  function _k() {
    jk(function() {
      (qt & 6) !== 0 ? Zc(
        jm,
        qk
      ) : ty();
    });
  }
  function Uh() {
    return Ql === 0 && (Ql = Ym()), Ql;
  }
  function ly(l) {
    return l == null || typeof l == "symbol" || typeof l == "boolean" ? null : typeof l == "function" ? l : ua("" + l);
  }
  function sy(l, r) {
    var a = r.ownerDocument.createElement("input");
    return a.name = r.name, a.value = r.value, l.id && a.setAttribute("form", l.id), r.parentNode.insertBefore(a, r), l = new FormData(l), a.parentNode.removeChild(a), l;
  }
  function Bk(l, r, a, f, d) {
    if (r === "submit" && a && a.stateNode === d) {
      var g = ly(
        (d[_e] || null).action
      ), v = f.submitter;
      v && (r = (r = v[_e] || null) ? ly(r.formAction) : v.getAttribute("formAction"), r !== null && (g = r, v = null));
      var b = new da(
        "action",
        "action",
        null,
        f,
        d
      );
      l.push({
        event: b,
        listeners: [
          {
            instance: null,
            listener: function() {
              if (f.defaultPrevented) {
                if (Ql !== 0) {
                  var T = v ? sy(d, v) : new FormData(d);
                  rh(
                    a,
                    {
                      pending: !0,
                      data: T,
                      method: d.method,
                      action: g
                    },
                    null,
                    T
                  );
                }
              } else
                typeof g == "function" && (b.preventDefault(), T = v ? sy(d, v) : new FormData(d), rh(
                  a,
                  {
                    pending: !0,
                    data: T,
                    method: d.method,
                    action: g
                  },
                  g,
                  T
                ));
            },
            currentTarget: d
          }
        ]
      });
    }
  }
  for (var Vh = 0; Vh < kf.length; Vh++) {
    var Hh = kf[Vh], Nk = Hh.toLowerCase(), Pk = Hh[0].toUpperCase() + Hh.slice(1);
    xi(
      Nk,
      "on" + Pk
    );
  }
  xi(Pg, "onAnimationEnd"), xi(Lg, "onAnimationIteration"), xi(Ug, "onAnimationStart"), xi("dblclick", "onDoubleClick"), xi("focusin", "onFocus"), xi("focusout", "onBlur"), xi(ek, "onTransitionRun"), xi(ik, "onTransitionStart"), xi(nk, "onTransitionCancel"), xi(Vg, "onTransitionEnd"), Kl("onMouseEnter", ["mouseout", "mouseover"]), Kl("onMouseLeave", ["mouseout", "mouseover"]), Kl("onPointerEnter", ["pointerout", "pointerover"]), Kl("onPointerLeave", ["pointerout", "pointerover"]), pl(
    "onChange",
    "change click focusin focusout input keydown keyup selectionchange".split(" ")
  ), pl(
    "onSelect",
    "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
      " "
    )
  ), pl("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
  ]), pl(
    "onCompositionEnd",
    "compositionend focusout keydown keypress keyup mousedown".split(" ")
  ), pl(
    "onCompositionStart",
    "compositionstart focusout keydown keypress keyup mousedown".split(" ")
  ), pl(
    "onCompositionUpdate",
    "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
  );
  var Wr = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
    " "
  ), Lk = new Set(
    "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Wr)
  );
  function ry(l, r) {
    r = (r & 4) !== 0;
    for (var a = 0; a < l.length; a++) {
      var f = l[a], d = f.event;
      f = f.listeners;
      t: {
        var g = void 0;
        if (r)
          for (var v = f.length - 1; 0 <= v; v--) {
            var b = f[v], T = b.instance, D = b.currentTarget;
            if (b = b.listener, T !== g && d.isPropagationStopped())
              break t;
            g = b, d.currentTarget = D;
            try {
              g(d);
            } catch (L) {
              La(L);
            }
            d.currentTarget = null, g = T;
          }
        else
          for (v = 0; v < f.length; v++) {
            if (b = f[v], T = b.instance, D = b.currentTarget, b = b.listener, T !== g && d.isPropagationStopped())
              break t;
            g = b, d.currentTarget = D;
            try {
              g(d);
            } catch (L) {
              La(L);
            }
            d.currentTarget = null, g = T;
          }
      }
    }
  }
  function kt(l, r) {
    var a = r[tf];
    a === void 0 && (a = r[tf] = /* @__PURE__ */ new Set());
    var f = l + "__bubble";
    a.has(f) || (oy(r, l, 2, !1), a.add(f));
  }
  function Xh(l, r, a) {
    var f = 0;
    r && (f |= 4), oy(
      a,
      l,
      f,
      r
    );
  }
  var Ia = "_reactListening" + Math.random().toString(36).slice(2);
  function $h(l) {
    if (!l[Ia]) {
      l[Ia] = !0, tg.forEach(function(a) {
        a !== "selectionchange" && (Lk.has(a) || Xh(a, !1, l), Xh(a, !0, l));
      });
      var r = l.nodeType === 9 ? l : l.ownerDocument;
      r === null || r[Ia] || (r[Ia] = !0, Xh("selectionchange", !1, r));
    }
  }
  function oy(l, r, a, f) {
    switch (Ry(r)) {
      case 2:
        var d = h2;
        break;
      case 8:
        d = d2;
        break;
      default:
        d = ld;
    }
    a = d.bind(
      null,
      r,
      a,
      l
    ), d = void 0, !hf || r !== "touchstart" && r !== "touchmove" && r !== "wheel" || (d = !0), f ? d !== void 0 ? l.addEventListener(r, a, {
      capture: !0,
      passive: d
    }) : l.addEventListener(r, a, !0) : d !== void 0 ? l.addEventListener(r, a, {
      passive: d
    }) : l.addEventListener(r, a, !1);
  }
  function jh(l, r, a, f, d) {
    var g = f;
    if ((r & 1) === 0 && (r & 2) === 0 && f !== null)
      t: for (; ; ) {
        if (f === null) return;
        var v = f.tag;
        if (v === 3 || v === 4) {
          var b = f.stateNode.containerInfo;
          if (b === d) break;
          if (v === 4)
            for (v = f.return; v !== null; ) {
              var T = v.tag;
              if ((T === 3 || T === 4) && v.stateNode.containerInfo === d)
                return;
              v = v.return;
            }
          for (; b !== null; ) {
            if (v = Yl(b), v === null) return;
            if (T = v.tag, T === 5 || T === 6 || T === 26 || T === 27) {
              f = g = v;
              continue t;
            }
            b = b.parentNode;
          }
        }
        f = f.return;
      }
    pg(function() {
      var D = g, L = cf(a), j = [];
      t: {
        var q = Hg.get(l);
        if (q !== void 0) {
          var B = da, Ot = l;
          switch (l) {
            case "keypress":
              if (fa(a) === 0) break t;
            case "keydown":
            case "keyup":
              B = zT;
              break;
            case "focusin":
              Ot = "focus", B = gf;
              break;
            case "focusout":
              Ot = "blur", B = gf;
              break;
            case "beforeblur":
            case "afterblur":
              B = gf;
              break;
            case "click":
              if (a.button === 2) break t;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              B = Og;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              B = bT;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              B = BT;
              break;
            case Pg:
            case Lg:
            case Ug:
              B = TT;
              break;
            case Vg:
              B = PT;
              break;
            case "scroll":
            case "scrollend":
              B = vT;
              break;
            case "wheel":
              B = UT;
              break;
            case "copy":
            case "cut":
            case "paste":
              B = AT;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              B = vg;
              break;
            case "toggle":
            case "beforetoggle":
              B = HT;
          }
          var pt = (r & 4) !== 0, Pt = !pt && (l === "scroll" || l === "scrollend"), E = pt ? q !== null ? q + "Capture" : null : q;
          pt = [];
          for (var A = D, Q; A !== null; ) {
            var H = A;
            if (Q = H.stateNode, H = H.tag, H !== 5 && H !== 26 && H !== 27 || Q === null || E === null || (H = fr(A, E), H != null && pt.push(
              Gr(A, H, Q)
            )), Pt) break;
            A = A.return;
          }
          0 < pt.length && (q = new B(
            q,
            Ot,
            null,
            a,
            L
          ), j.push({ event: q, listeners: pt }));
        }
      }
      if ((r & 7) === 0) {
        t: {
          if (q = l === "mouseover" || l === "pointerover", B = l === "mouseout" || l === "pointerout", q && a !== uf && (Ot = a.relatedTarget || a.fromElement) && (Yl(Ot) || Ot[Gl]))
            break t;
          if ((B || q) && (q = L.window === L ? L : (q = L.ownerDocument) ? q.defaultView || q.parentWindow : window, B ? (Ot = a.relatedTarget || a.toElement, B = D, Ot = Ot ? Yl(Ot) : null, Ot !== null && (Pt = o(Ot), pt = Ot.tag, Ot !== Pt || pt !== 5 && pt !== 27 && pt !== 6) && (Ot = null)) : (B = null, Ot = D), B !== Ot)) {
            if (pt = Og, H = "onMouseLeave", E = "onMouseEnter", A = "mouse", (l === "pointerout" || l === "pointerover") && (pt = vg, H = "onPointerLeave", E = "onPointerEnter", A = "pointer"), Pt = B == null ? q : cr(B), Q = Ot == null ? q : cr(Ot), q = new pt(
              H,
              A + "leave",
              B,
              a,
              L
            ), q.target = Pt, q.relatedTarget = Q, H = null, Yl(L) === D && (pt = new pt(
              E,
              A + "enter",
              Ot,
              a,
              L
            ), pt.target = Q, pt.relatedTarget = Pt, H = pt), Pt = H, B && Ot)
              e: {
                for (pt = B, E = Ot, A = 0, Q = pt; Q; Q = Es(Q))
                  A++;
                for (Q = 0, H = E; H; H = Es(H))
                  Q++;
                for (; 0 < A - Q; )
                  pt = Es(pt), A--;
                for (; 0 < Q - A; )
                  E = Es(E), Q--;
                for (; A--; ) {
                  if (pt === E || E !== null && pt === E.alternate)
                    break e;
                  pt = Es(pt), E = Es(E);
                }
                pt = null;
              }
            else pt = null;
            B !== null && ay(
              j,
              q,
              B,
              pt,
              !1
            ), Ot !== null && Pt !== null && ay(
              j,
              Pt,
              Ot,
              pt,
              !0
            );
          }
        }
        t: {
          if (q = D ? cr(D) : window, B = q.nodeName && q.nodeName.toLowerCase(), B === "select" || B === "input" && q.type === "file")
            var rt = Cg;
          else if (kg(q))
            if (Eg)
              rt = JT;
            else {
              rt = FT;
              var xt = ZT;
            }
          else
            B = q.nodeName, !B || B.toLowerCase() !== "input" || q.type !== "checkbox" && q.type !== "radio" ? D && af(D.elementType) && (rt = Cg) : rt = KT;
          if (rt && (rt = rt(l, D))) {
            Ag(
              j,
              rt,
              a,
              L
            );
            break t;
          }
          xt && xt(l, q, D), l === "focusout" && D && q.type === "number" && D.memoizedProps.value != null && of(q, "number", q.value);
        }
        switch (xt = D ? cr(D) : window, l) {
          case "focusin":
            (kg(xt) || xt.contentEditable === "true") && (ls = xt, xf = D, vr = null);
            break;
          case "focusout":
            vr = xf = ls = null;
            break;
          case "mousedown":
            wf = !0;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            wf = !1, Bg(j, a, L);
            break;
          case "selectionchange":
            if (tk) break;
          case "keydown":
          case "keyup":
            Bg(j, a, L);
        }
        var ct;
        if (yf)
          t: {
            switch (l) {
              case "compositionstart":
                var mt = "onCompositionStart";
                break t;
              case "compositionend":
                mt = "onCompositionEnd";
                break t;
              case "compositionupdate":
                mt = "onCompositionUpdate";
                break t;
            }
            mt = void 0;
          }
        else
          ns ? wg(l, a) && (mt = "onCompositionEnd") : l === "keydown" && a.keyCode === 229 && (mt = "onCompositionStart");
        mt && (Sg && a.locale !== "ko" && (ns || mt !== "onCompositionStart" ? mt === "onCompositionEnd" && ns && (ct = mg()) : (Qn = L, df = "value" in Qn ? Qn.value : Qn.textContent, ns = !0)), xt = tu(D, mt), 0 < xt.length && (mt = new yg(
          mt,
          l,
          null,
          a,
          L
        ), j.push({ event: mt, listeners: xt }), ct ? mt.data = ct : (ct = Tg(a), ct !== null && (mt.data = ct)))), (ct = $T ? jT(l, a) : WT(l, a)) && (mt = tu(D, "onBeforeInput"), 0 < mt.length && (xt = new yg(
          "onBeforeInput",
          "beforeinput",
          null,
          a,
          L
        ), j.push({
          event: xt,
          listeners: mt
        }), xt.data = ct)), Bk(
          j,
          l,
          D,
          a,
          L
        );
      }
      ry(j, r);
    });
  }
  function Gr(l, r, a) {
    return {
      instance: l,
      listener: r,
      currentTarget: a
    };
  }
  function tu(l, r) {
    for (var a = r + "Capture", f = []; l !== null; ) {
      var d = l, g = d.stateNode;
      if (d = d.tag, d !== 5 && d !== 26 && d !== 27 || g === null || (d = fr(l, a), d != null && f.unshift(
        Gr(l, d, g)
      ), d = fr(l, r), d != null && f.push(
        Gr(l, d, g)
      )), l.tag === 3) return f;
      l = l.return;
    }
    return [];
  }
  function Es(l) {
    if (l === null) return null;
    do
      l = l.return;
    while (l && l.tag !== 5 && l.tag !== 27);
    return l || null;
  }
  function ay(l, r, a, f, d) {
    for (var g = r._reactName, v = []; a !== null && a !== f; ) {
      var b = a, T = b.alternate, D = b.stateNode;
      if (b = b.tag, T !== null && T === f) break;
      b !== 5 && b !== 26 && b !== 27 || D === null || (T = D, d ? (D = fr(a, g), D != null && v.unshift(
        Gr(a, D, T)
      )) : d || (D = fr(a, g), D != null && v.push(
        Gr(a, D, T)
      ))), a = a.return;
    }
    v.length !== 0 && l.push({ event: r, listeners: v });
  }
  var Uk = /\r\n?/g, Vk = /\u0000|\uFFFD/g;
  function uy(l) {
    return (typeof l == "string" ? l : "" + l).replace(Uk, `
`).replace(Vk, "");
  }
  function cy(l, r) {
    return r = uy(r), uy(l) === r;
  }
  function eu() {
  }
  function Nt(l, r, a, f, d, g) {
    switch (a) {
      case "children":
        typeof f == "string" ? r === "body" || r === "textarea" && f === "" || ts(l, f) : (typeof f == "number" || typeof f == "bigint") && r !== "body" && ts(l, "" + f);
        break;
      case "className":
        ra(l, "class", f);
        break;
      case "tabIndex":
        ra(l, "tabindex", f);
        break;
      case "dir":
      case "role":
      case "viewBox":
      case "width":
      case "height":
        ra(l, a, f);
        break;
      case "style":
        hg(l, f, g);
        break;
      case "data":
        if (r !== "object") {
          ra(l, "data", f);
          break;
        }
      case "src":
      case "href":
        if (f === "" && (r !== "a" || a !== "href")) {
          l.removeAttribute(a);
          break;
        }
        if (f == null || typeof f == "function" || typeof f == "symbol" || typeof f == "boolean") {
          l.removeAttribute(a);
          break;
        }
        f = ua("" + f), l.setAttribute(a, f);
        break;
      case "action":
      case "formAction":
        if (typeof f == "function") {
          l.setAttribute(
            a,
            "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
          );
          break;
        } else
          typeof g == "function" && (a === "formAction" ? (r !== "input" && Nt(l, r, "name", d.name, d, null), Nt(
            l,
            r,
            "formEncType",
            d.formEncType,
            d,
            null
          ), Nt(
            l,
            r,
            "formMethod",
            d.formMethod,
            d,
            null
          ), Nt(
            l,
            r,
            "formTarget",
            d.formTarget,
            d,
            null
          )) : (Nt(l, r, "encType", d.encType, d, null), Nt(l, r, "method", d.method, d, null), Nt(l, r, "target", d.target, d, null)));
        if (f == null || typeof f == "symbol" || typeof f == "boolean") {
          l.removeAttribute(a);
          break;
        }
        f = ua("" + f), l.setAttribute(a, f);
        break;
      case "onClick":
        f != null && (l.onclick = eu);
        break;
      case "onScroll":
        f != null && kt("scroll", l);
        break;
      case "onScrollEnd":
        f != null && kt("scrollend", l);
        break;
      case "dangerouslySetInnerHTML":
        if (f != null) {
          if (typeof f != "object" || !("__html" in f))
            throw Error(i(61));
          if (a = f.__html, a != null) {
            if (d.children != null) throw Error(i(60));
            l.innerHTML = a;
          }
        }
        break;
      case "multiple":
        l.multiple = f && typeof f != "function" && typeof f != "symbol";
        break;
      case "muted":
        l.muted = f && typeof f != "function" && typeof f != "symbol";
        break;
      case "suppressContentEditableWarning":
      case "suppressHydrationWarning":
      case "defaultValue":
      case "defaultChecked":
      case "innerHTML":
      case "ref":
        break;
      case "autoFocus":
        break;
      case "xlinkHref":
        if (f == null || typeof f == "function" || typeof f == "boolean" || typeof f == "symbol") {
          l.removeAttribute("xlink:href");
          break;
        }
        a = ua("" + f), l.setAttributeNS(
          "http://www.w3.org/1999/xlink",
          "xlink:href",
          a
        );
        break;
      case "contentEditable":
      case "spellCheck":
      case "draggable":
      case "value":
      case "autoReverse":
      case "externalResourcesRequired":
      case "focusable":
      case "preserveAlpha":
        f != null && typeof f != "function" && typeof f != "symbol" ? l.setAttribute(a, "" + f) : l.removeAttribute(a);
        break;
      case "inert":
      case "allowFullScreen":
      case "async":
      case "autoPlay":
      case "controls":
      case "default":
      case "defer":
      case "disabled":
      case "disablePictureInPicture":
      case "disableRemotePlayback":
      case "formNoValidate":
      case "hidden":
      case "loop":
      case "noModule":
      case "noValidate":
      case "open":
      case "playsInline":
      case "readOnly":
      case "required":
      case "reversed":
      case "scoped":
      case "seamless":
      case "itemScope":
        f && typeof f != "function" && typeof f != "symbol" ? l.setAttribute(a, "") : l.removeAttribute(a);
        break;
      case "capture":
      case "download":
        f === !0 ? l.setAttribute(a, "") : f !== !1 && f != null && typeof f != "function" && typeof f != "symbol" ? l.setAttribute(a, f) : l.removeAttribute(a);
        break;
      case "cols":
      case "rows":
      case "size":
      case "span":
        f != null && typeof f != "function" && typeof f != "symbol" && !isNaN(f) && 1 <= f ? l.setAttribute(a, f) : l.removeAttribute(a);
        break;
      case "rowSpan":
      case "start":
        f == null || typeof f == "function" || typeof f == "symbol" || isNaN(f) ? l.removeAttribute(a) : l.setAttribute(a, f);
        break;
      case "popover":
        kt("beforetoggle", l), kt("toggle", l), sa(l, "popover", f);
        break;
      case "xlinkActuate":
        tn(
          l,
          "http://www.w3.org/1999/xlink",
          "xlink:actuate",
          f
        );
        break;
      case "xlinkArcrole":
        tn(
          l,
          "http://www.w3.org/1999/xlink",
          "xlink:arcrole",
          f
        );
        break;
      case "xlinkRole":
        tn(
          l,
          "http://www.w3.org/1999/xlink",
          "xlink:role",
          f
        );
        break;
      case "xlinkShow":
        tn(
          l,
          "http://www.w3.org/1999/xlink",
          "xlink:show",
          f
        );
        break;
      case "xlinkTitle":
        tn(
          l,
          "http://www.w3.org/1999/xlink",
          "xlink:title",
          f
        );
        break;
      case "xlinkType":
        tn(
          l,
          "http://www.w3.org/1999/xlink",
          "xlink:type",
          f
        );
        break;
      case "xmlBase":
        tn(
          l,
          "http://www.w3.org/XML/1998/namespace",
          "xml:base",
          f
        );
        break;
      case "xmlLang":
        tn(
          l,
          "http://www.w3.org/XML/1998/namespace",
          "xml:lang",
          f
        );
        break;
      case "xmlSpace":
        tn(
          l,
          "http://www.w3.org/XML/1998/namespace",
          "xml:space",
          f
        );
        break;
      case "is":
        sa(l, "is", f);
        break;
      case "innerText":
      case "textContent":
        break;
      default:
        (!(2 < a.length) || a[0] !== "o" && a[0] !== "O" || a[1] !== "n" && a[1] !== "N") && (a = OT.get(a) || a, sa(l, a, f));
    }
  }
  function Wh(l, r, a, f, d, g) {
    switch (a) {
      case "style":
        hg(l, f, g);
        break;
      case "dangerouslySetInnerHTML":
        if (f != null) {
          if (typeof f != "object" || !("__html" in f))
            throw Error(i(61));
          if (a = f.__html, a != null) {
            if (d.children != null) throw Error(i(60));
            l.innerHTML = a;
          }
        }
        break;
      case "children":
        typeof f == "string" ? ts(l, f) : (typeof f == "number" || typeof f == "bigint") && ts(l, "" + f);
        break;
      case "onScroll":
        f != null && kt("scroll", l);
        break;
      case "onScrollEnd":
        f != null && kt("scrollend", l);
        break;
      case "onClick":
        f != null && (l.onclick = eu);
        break;
      case "suppressContentEditableWarning":
      case "suppressHydrationWarning":
      case "innerHTML":
      case "ref":
        break;
      case "innerText":
      case "textContent":
        break;
      default:
        if (!eg.hasOwnProperty(a))
          t: {
            if (a[0] === "o" && a[1] === "n" && (d = a.endsWith("Capture"), r = a.slice(2, d ? a.length - 7 : void 0), g = l[_e] || null, g = g != null ? g[a] : null, typeof g == "function" && l.removeEventListener(r, g, d), typeof f == "function")) {
              typeof g != "function" && g !== null && (a in l ? l[a] = null : l.hasAttribute(a) && l.removeAttribute(a)), l.addEventListener(r, f, d);
              break t;
            }
            a in l ? l[a] = f : f === !0 ? l.setAttribute(a, "") : sa(l, a, f);
          }
    }
  }
  function Se(l, r, a) {
    switch (r) {
      case "div":
      case "span":
      case "svg":
      case "path":
      case "a":
      case "g":
      case "p":
      case "li":
        break;
      case "img":
        kt("error", l), kt("load", l);
        var f = !1, d = !1, g;
        for (g in a)
          if (a.hasOwnProperty(g)) {
            var v = a[g];
            if (v != null)
              switch (g) {
                case "src":
                  f = !0;
                  break;
                case "srcSet":
                  d = !0;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(i(137, r));
                default:
                  Nt(l, r, g, v, a, null);
              }
          }
        d && Nt(l, r, "srcSet", a.srcSet, a, null), f && Nt(l, r, "src", a.src, a, null);
        return;
      case "input":
        kt("invalid", l);
        var b = g = v = d = null, T = null, D = null;
        for (f in a)
          if (a.hasOwnProperty(f)) {
            var L = a[f];
            if (L != null)
              switch (f) {
                case "name":
                  d = L;
                  break;
                case "type":
                  v = L;
                  break;
                case "checked":
                  T = L;
                  break;
                case "defaultChecked":
                  D = L;
                  break;
                case "value":
                  g = L;
                  break;
                case "defaultValue":
                  b = L;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  if (L != null)
                    throw Error(i(137, r));
                  break;
                default:
                  Nt(l, r, f, L, a, null);
              }
          }
        ag(
          l,
          g,
          b,
          T,
          D,
          v,
          d,
          !1
        ), oa(l);
        return;
      case "select":
        kt("invalid", l), f = v = g = null;
        for (d in a)
          if (a.hasOwnProperty(d) && (b = a[d], b != null))
            switch (d) {
              case "value":
                g = b;
                break;
              case "defaultValue":
                v = b;
                break;
              case "multiple":
                f = b;
              default:
                Nt(l, r, d, b, a, null);
            }
        r = g, a = v, l.multiple = !!f, r != null ? Il(l, !!f, r, !1) : a != null && Il(l, !!f, a, !0);
        return;
      case "textarea":
        kt("invalid", l), g = d = f = null;
        for (v in a)
          if (a.hasOwnProperty(v) && (b = a[v], b != null))
            switch (v) {
              case "value":
                f = b;
                break;
              case "defaultValue":
                d = b;
                break;
              case "children":
                g = b;
                break;
              case "dangerouslySetInnerHTML":
                if (b != null) throw Error(i(91));
                break;
              default:
                Nt(l, r, v, b, a, null);
            }
        cg(l, f, d, g), oa(l);
        return;
      case "option":
        for (T in a)
          if (a.hasOwnProperty(T) && (f = a[T], f != null))
            switch (T) {
              case "selected":
                l.selected = f && typeof f != "function" && typeof f != "symbol";
                break;
              default:
                Nt(l, r, T, f, a, null);
            }
        return;
      case "dialog":
        kt("beforetoggle", l), kt("toggle", l), kt("cancel", l), kt("close", l);
        break;
      case "iframe":
      case "object":
        kt("load", l);
        break;
      case "video":
      case "audio":
        for (f = 0; f < Wr.length; f++)
          kt(Wr[f], l);
        break;
      case "image":
        kt("error", l), kt("load", l);
        break;
      case "details":
        kt("toggle", l);
        break;
      case "embed":
      case "source":
      case "link":
        kt("error", l), kt("load", l);
      case "area":
      case "base":
      case "br":
      case "col":
      case "hr":
      case "keygen":
      case "meta":
      case "param":
      case "track":
      case "wbr":
      case "menuitem":
        for (D in a)
          if (a.hasOwnProperty(D) && (f = a[D], f != null))
            switch (D) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(i(137, r));
              default:
                Nt(l, r, D, f, a, null);
            }
        return;
      default:
        if (af(r)) {
          for (L in a)
            a.hasOwnProperty(L) && (f = a[L], f !== void 0 && Wh(
              l,
              r,
              L,
              f,
              a,
              void 0
            ));
          return;
        }
    }
    for (b in a)
      a.hasOwnProperty(b) && (f = a[b], f != null && Nt(l, r, b, f, a, null));
  }
  function Hk(l, r, a, f) {
    switch (r) {
      case "div":
      case "span":
      case "svg":
      case "path":
      case "a":
      case "g":
      case "p":
      case "li":
        break;
      case "input":
        var d = null, g = null, v = null, b = null, T = null, D = null, L = null;
        for (B in a) {
          var j = a[B];
          if (a.hasOwnProperty(B) && j != null)
            switch (B) {
              case "checked":
                break;
              case "value":
                break;
              case "defaultValue":
                T = j;
              default:
                f.hasOwnProperty(B) || Nt(l, r, B, null, f, j);
            }
        }
        for (var q in f) {
          var B = f[q];
          if (j = a[q], f.hasOwnProperty(q) && (B != null || j != null))
            switch (q) {
              case "type":
                g = B;
                break;
              case "name":
                d = B;
                break;
              case "checked":
                D = B;
                break;
              case "defaultChecked":
                L = B;
                break;
              case "value":
                v = B;
                break;
              case "defaultValue":
                b = B;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                if (B != null)
                  throw Error(i(137, r));
                break;
              default:
                B !== j && Nt(
                  l,
                  r,
                  q,
                  B,
                  f,
                  j
                );
            }
        }
        rf(
          l,
          v,
          b,
          T,
          D,
          L,
          g,
          d
        );
        return;
      case "select":
        B = v = b = q = null;
        for (g in a)
          if (T = a[g], a.hasOwnProperty(g) && T != null)
            switch (g) {
              case "value":
                break;
              case "multiple":
                B = T;
              default:
                f.hasOwnProperty(g) || Nt(
                  l,
                  r,
                  g,
                  null,
                  f,
                  T
                );
            }
        for (d in f)
          if (g = f[d], T = a[d], f.hasOwnProperty(d) && (g != null || T != null))
            switch (d) {
              case "value":
                q = g;
                break;
              case "defaultValue":
                b = g;
                break;
              case "multiple":
                v = g;
              default:
                g !== T && Nt(
                  l,
                  r,
                  d,
                  g,
                  f,
                  T
                );
            }
        r = b, a = v, f = B, q != null ? Il(l, !!a, q, !1) : !!f != !!a && (r != null ? Il(l, !!a, r, !0) : Il(l, !!a, a ? [] : "", !1));
        return;
      case "textarea":
        B = q = null;
        for (b in a)
          if (d = a[b], a.hasOwnProperty(b) && d != null && !f.hasOwnProperty(b))
            switch (b) {
              case "value":
                break;
              case "children":
                break;
              default:
                Nt(l, r, b, null, f, d);
            }
        for (v in f)
          if (d = f[v], g = a[v], f.hasOwnProperty(v) && (d != null || g != null))
            switch (v) {
              case "value":
                q = d;
                break;
              case "defaultValue":
                B = d;
                break;
              case "children":
                break;
              case "dangerouslySetInnerHTML":
                if (d != null) throw Error(i(91));
                break;
              default:
                d !== g && Nt(l, r, v, d, f, g);
            }
        ug(l, q, B);
        return;
      case "option":
        for (var Ot in a)
          if (q = a[Ot], a.hasOwnProperty(Ot) && q != null && !f.hasOwnProperty(Ot))
            switch (Ot) {
              case "selected":
                l.selected = !1;
                break;
              default:
                Nt(
                  l,
                  r,
                  Ot,
                  null,
                  f,
                  q
                );
            }
        for (T in f)
          if (q = f[T], B = a[T], f.hasOwnProperty(T) && q !== B && (q != null || B != null))
            switch (T) {
              case "selected":
                l.selected = q && typeof q != "function" && typeof q != "symbol";
                break;
              default:
                Nt(
                  l,
                  r,
                  T,
                  q,
                  f,
                  B
                );
            }
        return;
      case "img":
      case "link":
      case "area":
      case "base":
      case "br":
      case "col":
      case "embed":
      case "hr":
      case "keygen":
      case "meta":
      case "param":
      case "source":
      case "track":
      case "wbr":
      case "menuitem":
        for (var pt in a)
          q = a[pt], a.hasOwnProperty(pt) && q != null && !f.hasOwnProperty(pt) && Nt(l, r, pt, null, f, q);
        for (D in f)
          if (q = f[D], B = a[D], f.hasOwnProperty(D) && q !== B && (q != null || B != null))
            switch (D) {
              case "children":
              case "dangerouslySetInnerHTML":
                if (q != null)
                  throw Error(i(137, r));
                break;
              default:
                Nt(
                  l,
                  r,
                  D,
                  q,
                  f,
                  B
                );
            }
        return;
      default:
        if (af(r)) {
          for (var Pt in a)
            q = a[Pt], a.hasOwnProperty(Pt) && q !== void 0 && !f.hasOwnProperty(Pt) && Wh(
              l,
              r,
              Pt,
              void 0,
              f,
              q
            );
          for (L in f)
            q = f[L], B = a[L], !f.hasOwnProperty(L) || q === B || q === void 0 && B === void 0 || Wh(
              l,
              r,
              L,
              q,
              f,
              B
            );
          return;
        }
    }
    for (var E in a)
      q = a[E], a.hasOwnProperty(E) && q != null && !f.hasOwnProperty(E) && Nt(l, r, E, null, f, q);
    for (j in f)
      q = f[j], B = a[j], !f.hasOwnProperty(j) || q === B || q == null && B == null || Nt(l, r, j, q, f, B);
  }
  var Gh = null, Yh = null;
  function iu(l) {
    return l.nodeType === 9 ? l : l.ownerDocument;
  }
  function fy(l) {
    switch (l) {
      case "http://www.w3.org/2000/svg":
        return 1;
      case "http://www.w3.org/1998/Math/MathML":
        return 2;
      default:
        return 0;
    }
  }
  function hy(l, r) {
    if (l === 0)
      switch (r) {
        case "svg":
          return 1;
        case "math":
          return 2;
        default:
          return 0;
      }
    return l === 1 && r === "foreignObject" ? 0 : l;
  }
  function Zh(l, r) {
    return l === "textarea" || l === "noscript" || typeof r.children == "string" || typeof r.children == "number" || typeof r.children == "bigint" || typeof r.dangerouslySetInnerHTML == "object" && r.dangerouslySetInnerHTML !== null && r.dangerouslySetInnerHTML.__html != null;
  }
  var Fh = null;
  function Xk() {
    var l = window.event;
    return l && l.type === "popstate" ? l === Fh ? !1 : (Fh = l, !0) : (Fh = null, !1);
  }
  var dy = typeof setTimeout == "function" ? setTimeout : void 0, $k = typeof clearTimeout == "function" ? clearTimeout : void 0, py = typeof Promise == "function" ? Promise : void 0, jk = typeof queueMicrotask == "function" ? queueMicrotask : typeof py < "u" ? function(l) {
    return py.resolve(null).then(l).catch(Wk);
  } : dy;
  function Wk(l) {
    setTimeout(function() {
      throw l;
    });
  }
  function Wn(l) {
    return l === "head";
  }
  function my(l, r) {
    var a = r, f = 0, d = 0;
    do {
      var g = a.nextSibling;
      if (l.removeChild(a), g && g.nodeType === 8)
        if (a = g.data, a === "/$") {
          if (0 < f && 8 > f) {
            a = f;
            var v = l.ownerDocument;
            if (a & 1 && Yr(v.documentElement), a & 2 && Yr(v.body), a & 4)
              for (a = v.head, Yr(a), v = a.firstChild; v; ) {
                var b = v.nextSibling, T = v.nodeName;
                v[ur] || T === "SCRIPT" || T === "STYLE" || T === "LINK" && v.rel.toLowerCase() === "stylesheet" || a.removeChild(v), v = b;
              }
          }
          if (d === 0) {
            l.removeChild(g), io(r);
            return;
          }
          d--;
        } else
          a === "$" || a === "$?" || a === "$!" ? d++ : f = a.charCodeAt(0) - 48;
      else f = 0;
      a = g;
    } while (a);
    io(r);
  }
  function Kh(l) {
    var r = l.firstChild;
    for (r && r.nodeType === 10 && (r = r.nextSibling); r; ) {
      var a = r;
      switch (r = r.nextSibling, a.nodeName) {
        case "HTML":
        case "HEAD":
        case "BODY":
          Kh(a), ef(a);
          continue;
        case "SCRIPT":
        case "STYLE":
          continue;
        case "LINK":
          if (a.rel.toLowerCase() === "stylesheet") continue;
      }
      l.removeChild(a);
    }
  }
  function Gk(l, r, a, f) {
    for (; l.nodeType === 1; ) {
      var d = a;
      if (l.nodeName.toLowerCase() !== r.toLowerCase()) {
        if (!f && (l.nodeName !== "INPUT" || l.type !== "hidden"))
          break;
      } else if (f) {
        if (!l[ur])
          switch (r) {
            case "meta":
              if (!l.hasAttribute("itemprop")) break;
              return l;
            case "link":
              if (g = l.getAttribute("rel"), g === "stylesheet" && l.hasAttribute("data-precedence"))
                break;
              if (g !== d.rel || l.getAttribute("href") !== (d.href == null || d.href === "" ? null : d.href) || l.getAttribute("crossorigin") !== (d.crossOrigin == null ? null : d.crossOrigin) || l.getAttribute("title") !== (d.title == null ? null : d.title))
                break;
              return l;
            case "style":
              if (l.hasAttribute("data-precedence")) break;
              return l;
            case "script":
              if (g = l.getAttribute("src"), (g !== (d.src == null ? null : d.src) || l.getAttribute("type") !== (d.type == null ? null : d.type) || l.getAttribute("crossorigin") !== (d.crossOrigin == null ? null : d.crossOrigin)) && g && l.hasAttribute("async") && !l.hasAttribute("itemprop"))
                break;
              return l;
            default:
              return l;
          }
      } else if (r === "input" && l.type === "hidden") {
        var g = d.name == null ? null : "" + d.name;
        if (d.type === "hidden" && l.getAttribute("name") === g)
          return l;
      } else return l;
      if (l = Ti(l.nextSibling), l === null) break;
    }
    return null;
  }
  function Yk(l, r, a) {
    if (r === "") return null;
    for (; l.nodeType !== 3; )
      if ((l.nodeType !== 1 || l.nodeName !== "INPUT" || l.type !== "hidden") && !a || (l = Ti(l.nextSibling), l === null)) return null;
    return l;
  }
  function Jh(l) {
    return l.data === "$!" || l.data === "$?" && l.ownerDocument.readyState === "complete";
  }
  function Zk(l, r) {
    var a = l.ownerDocument;
    if (l.data !== "$?" || a.readyState === "complete")
      r();
    else {
      var f = function() {
        r(), a.removeEventListener("DOMContentLoaded", f);
      };
      a.addEventListener("DOMContentLoaded", f), l._reactRetry = f;
    }
  }
  function Ti(l) {
    for (; l != null; l = l.nextSibling) {
      var r = l.nodeType;
      if (r === 1 || r === 3) break;
      if (r === 8) {
        if (r = l.data, r === "$" || r === "$!" || r === "$?" || r === "F!" || r === "F")
          break;
        if (r === "/$") return null;
      }
    }
    return l;
  }
  var Ih = null;
  function gy(l) {
    l = l.previousSibling;
    for (var r = 0; l; ) {
      if (l.nodeType === 8) {
        var a = l.data;
        if (a === "$" || a === "$!" || a === "$?") {
          if (r === 0) return l;
          r--;
        } else a === "/$" && r++;
      }
      l = l.previousSibling;
    }
    return null;
  }
  function Oy(l, r, a) {
    switch (r = iu(a), l) {
      case "html":
        if (l = r.documentElement, !l) throw Error(i(452));
        return l;
      case "head":
        if (l = r.head, !l) throw Error(i(453));
        return l;
      case "body":
        if (l = r.body, !l) throw Error(i(454));
        return l;
      default:
        throw Error(i(451));
    }
  }
  function Yr(l) {
    for (var r = l.attributes; r.length; )
      l.removeAttributeNode(r[0]);
    ef(l);
  }
  var mi = /* @__PURE__ */ new Map(), yy = /* @__PURE__ */ new Set();
  function nu(l) {
    return typeof l.getRootNode == "function" ? l.getRootNode() : l.nodeType === 9 ? l : l.ownerDocument;
  }
  var mn = P.d;
  P.d = {
    f: Fk,
    r: Kk,
    D: Jk,
    C: Ik,
    L: t2,
    m: e2,
    X: n2,
    S: i2,
    M: l2
  };
  function Fk() {
    var l = mn.f(), r = Ya();
    return l || r;
  }
  function Kk(l) {
    var r = Zl(l);
    r !== null && r.tag === 5 && r.type === "form" ? P0(r) : mn.r(l);
  }
  var Ms = typeof document > "u" ? null : document;
  function vy(l, r, a) {
    var f = Ms;
    if (f && typeof r == "string" && r) {
      var d = ai(r);
      d = 'link[rel="' + l + '"][href="' + d + '"]', typeof a == "string" && (d += '[crossorigin="' + a + '"]'), yy.has(d) || (yy.add(d), l = { rel: l, crossOrigin: a, href: r }, f.querySelector(d) === null && (r = f.createElement("link"), Se(r, "link", l), fe(r), f.head.appendChild(r)));
    }
  }
  function Jk(l) {
    mn.D(l), vy("dns-prefetch", l, null);
  }
  function Ik(l, r) {
    mn.C(l, r), vy("preconnect", l, r);
  }
  function t2(l, r, a) {
    mn.L(l, r, a);
    var f = Ms;
    if (f && l && r) {
      var d = 'link[rel="preload"][as="' + ai(r) + '"]';
      r === "image" && a && a.imageSrcSet ? (d += '[imagesrcset="' + ai(
        a.imageSrcSet
      ) + '"]', typeof a.imageSizes == "string" && (d += '[imagesizes="' + ai(
        a.imageSizes
      ) + '"]')) : d += '[href="' + ai(l) + '"]';
      var g = d;
      switch (r) {
        case "style":
          g = Qs(l);
          break;
        case "script":
          g = Rs(l);
      }
      mi.has(g) || (l = m(
        {
          rel: "preload",
          href: r === "image" && a && a.imageSrcSet ? void 0 : l,
          as: r
        },
        a
      ), mi.set(g, l), f.querySelector(d) !== null || r === "style" && f.querySelector(Zr(g)) || r === "script" && f.querySelector(Fr(g)) || (r = f.createElement("link"), Se(r, "link", l), fe(r), f.head.appendChild(r)));
    }
  }
  function e2(l, r) {
    mn.m(l, r);
    var a = Ms;
    if (a && l) {
      var f = r && typeof r.as == "string" ? r.as : "script", d = 'link[rel="modulepreload"][as="' + ai(f) + '"][href="' + ai(l) + '"]', g = d;
      switch (f) {
        case "audioworklet":
        case "paintworklet":
        case "serviceworker":
        case "sharedworker":
        case "worker":
        case "script":
          g = Rs(l);
      }
      if (!mi.has(g) && (l = m({ rel: "modulepreload", href: l }, r), mi.set(g, l), a.querySelector(d) === null)) {
        switch (f) {
          case "audioworklet":
          case "paintworklet":
          case "serviceworker":
          case "sharedworker":
          case "worker":
          case "script":
            if (a.querySelector(Fr(g)))
              return;
        }
        f = a.createElement("link"), Se(f, "link", l), fe(f), a.head.appendChild(f);
      }
    }
  }
  function i2(l, r, a) {
    mn.S(l, r, a);
    var f = Ms;
    if (f && l) {
      var d = Fl(f).hoistableStyles, g = Qs(l);
      r = r || "default";
      var v = d.get(g);
      if (!v) {
        var b = { loading: 0, preload: null };
        if (v = f.querySelector(
          Zr(g)
        ))
          b.loading = 5;
        else {
          l = m(
            { rel: "stylesheet", href: l, "data-precedence": r },
            a
          ), (a = mi.get(g)) && td(l, a);
          var T = v = f.createElement("link");
          fe(T), Se(T, "link", l), T._p = new Promise(function(D, L) {
            T.onload = D, T.onerror = L;
          }), T.addEventListener("load", function() {
            b.loading |= 1;
          }), T.addEventListener("error", function() {
            b.loading |= 2;
          }), b.loading |= 4, lu(v, r, f);
        }
        v = {
          type: "stylesheet",
          instance: v,
          count: 1,
          state: b
        }, d.set(g, v);
      }
    }
  }
  function n2(l, r) {
    mn.X(l, r);
    var a = Ms;
    if (a && l) {
      var f = Fl(a).hoistableScripts, d = Rs(l), g = f.get(d);
      g || (g = a.querySelector(Fr(d)), g || (l = m({ src: l, async: !0 }, r), (r = mi.get(d)) && ed(l, r), g = a.createElement("script"), fe(g), Se(g, "link", l), a.head.appendChild(g)), g = {
        type: "script",
        instance: g,
        count: 1,
        state: null
      }, f.set(d, g));
    }
  }
  function l2(l, r) {
    mn.M(l, r);
    var a = Ms;
    if (a && l) {
      var f = Fl(a).hoistableScripts, d = Rs(l), g = f.get(d);
      g || (g = a.querySelector(Fr(d)), g || (l = m({ src: l, async: !0, type: "module" }, r), (r = mi.get(d)) && ed(l, r), g = a.createElement("script"), fe(g), Se(g, "link", l), a.head.appendChild(g)), g = {
        type: "script",
        instance: g,
        count: 1,
        state: null
      }, f.set(d, g));
    }
  }
  function Sy(l, r, a, f) {
    var d = (d = gt.current) ? nu(d) : null;
    if (!d) throw Error(i(446));
    switch (l) {
      case "meta":
      case "title":
        return null;
      case "style":
        return typeof a.precedence == "string" && typeof a.href == "string" ? (r = Qs(a.href), a = Fl(
          d
        ).hoistableStyles, f = a.get(r), f || (f = {
          type: "style",
          instance: null,
          count: 0,
          state: null
        }, a.set(r, f)), f) : { type: "void", instance: null, count: 0, state: null };
      case "link":
        if (a.rel === "stylesheet" && typeof a.href == "string" && typeof a.precedence == "string") {
          l = Qs(a.href);
          var g = Fl(
            d
          ).hoistableStyles, v = g.get(l);
          if (v || (d = d.ownerDocument || d, v = {
            type: "stylesheet",
            instance: null,
            count: 0,
            state: { loading: 0, preload: null }
          }, g.set(l, v), (g = d.querySelector(
            Zr(l)
          )) && !g._p && (v.instance = g, v.state.loading = 5), mi.has(l) || (a = {
            rel: "preload",
            as: "style",
            href: a.href,
            crossOrigin: a.crossOrigin,
            integrity: a.integrity,
            media: a.media,
            hrefLang: a.hrefLang,
            referrerPolicy: a.referrerPolicy
          }, mi.set(l, a), g || s2(
            d,
            l,
            a,
            v.state
          ))), r && f === null)
            throw Error(i(528, ""));
          return v;
        }
        if (r && f !== null)
          throw Error(i(529, ""));
        return null;
      case "script":
        return r = a.async, a = a.src, typeof a == "string" && r && typeof r != "function" && typeof r != "symbol" ? (r = Rs(a), a = Fl(
          d
        ).hoistableScripts, f = a.get(r), f || (f = {
          type: "script",
          instance: null,
          count: 0,
          state: null
        }, a.set(r, f)), f) : { type: "void", instance: null, count: 0, state: null };
      default:
        throw Error(i(444, l));
    }
  }
  function Qs(l) {
    return 'href="' + ai(l) + '"';
  }
  function Zr(l) {
    return 'link[rel="stylesheet"][' + l + "]";
  }
  function by(l) {
    return m({}, l, {
      "data-precedence": l.precedence,
      precedence: null
    });
  }
  function s2(l, r, a, f) {
    l.querySelector('link[rel="preload"][as="style"][' + r + "]") ? f.loading = 1 : (r = l.createElement("link"), f.preload = r, r.addEventListener("load", function() {
      return f.loading |= 1;
    }), r.addEventListener("error", function() {
      return f.loading |= 2;
    }), Se(r, "link", a), fe(r), l.head.appendChild(r));
  }
  function Rs(l) {
    return '[src="' + ai(l) + '"]';
  }
  function Fr(l) {
    return "script[async]" + l;
  }
  function xy(l, r, a) {
    if (r.count++, r.instance === null)
      switch (r.type) {
        case "style":
          var f = l.querySelector(
            'style[data-href~="' + ai(a.href) + '"]'
          );
          if (f)
            return r.instance = f, fe(f), f;
          var d = m({}, a, {
            "data-href": a.href,
            "data-precedence": a.precedence,
            href: null,
            precedence: null
          });
          return f = (l.ownerDocument || l).createElement(
            "style"
          ), fe(f), Se(f, "style", d), lu(f, a.precedence, l), r.instance = f;
        case "stylesheet":
          d = Qs(a.href);
          var g = l.querySelector(
            Zr(d)
          );
          if (g)
            return r.state.loading |= 4, r.instance = g, fe(g), g;
          f = by(a), (d = mi.get(d)) && td(f, d), g = (l.ownerDocument || l).createElement("link"), fe(g);
          var v = g;
          return v._p = new Promise(function(b, T) {
            v.onload = b, v.onerror = T;
          }), Se(g, "link", f), r.state.loading |= 4, lu(g, a.precedence, l), r.instance = g;
        case "script":
          return g = Rs(a.src), (d = l.querySelector(
            Fr(g)
          )) ? (r.instance = d, fe(d), d) : (f = a, (d = mi.get(g)) && (f = m({}, a), ed(f, d)), l = l.ownerDocument || l, d = l.createElement("script"), fe(d), Se(d, "link", f), l.head.appendChild(d), r.instance = d);
        case "void":
          return null;
        default:
          throw Error(i(443, r.type));
      }
    else
      r.type === "stylesheet" && (r.state.loading & 4) === 0 && (f = r.instance, r.state.loading |= 4, lu(f, a.precedence, l));
    return r.instance;
  }
  function lu(l, r, a) {
    for (var f = a.querySelectorAll(
      'link[rel="stylesheet"][data-precedence],style[data-precedence]'
    ), d = f.length ? f[f.length - 1] : null, g = d, v = 0; v < f.length; v++) {
      var b = f[v];
      if (b.dataset.precedence === r) g = b;
      else if (g !== d) break;
    }
    g ? g.parentNode.insertBefore(l, g.nextSibling) : (r = a.nodeType === 9 ? a.head : a, r.insertBefore(l, r.firstChild));
  }
  function td(l, r) {
    l.crossOrigin == null && (l.crossOrigin = r.crossOrigin), l.referrerPolicy == null && (l.referrerPolicy = r.referrerPolicy), l.title == null && (l.title = r.title);
  }
  function ed(l, r) {
    l.crossOrigin == null && (l.crossOrigin = r.crossOrigin), l.referrerPolicy == null && (l.referrerPolicy = r.referrerPolicy), l.integrity == null && (l.integrity = r.integrity);
  }
  var su = null;
  function wy(l, r, a) {
    if (su === null) {
      var f = /* @__PURE__ */ new Map(), d = su = /* @__PURE__ */ new Map();
      d.set(a, f);
    } else
      d = su, f = d.get(a), f || (f = /* @__PURE__ */ new Map(), d.set(a, f));
    if (f.has(l)) return f;
    for (f.set(l, null), a = a.getElementsByTagName(l), d = 0; d < a.length; d++) {
      var g = a[d];
      if (!(g[ur] || g[Ae] || l === "link" && g.getAttribute("rel") === "stylesheet") && g.namespaceURI !== "http://www.w3.org/2000/svg") {
        var v = g.getAttribute(r) || "";
        v = l + v;
        var b = f.get(v);
        b ? b.push(g) : f.set(v, [g]);
      }
    }
    return f;
  }
  function Ty(l, r, a) {
    l = l.ownerDocument || l, l.head.insertBefore(
      a,
      r === "title" ? l.querySelector("head > title") : null
    );
  }
  function r2(l, r, a) {
    if (a === 1 || r.itemProp != null) return !1;
    switch (l) {
      case "meta":
      case "title":
        return !0;
      case "style":
        if (typeof r.precedence != "string" || typeof r.href != "string" || r.href === "")
          break;
        return !0;
      case "link":
        if (typeof r.rel != "string" || typeof r.href != "string" || r.href === "" || r.onLoad || r.onError)
          break;
        switch (r.rel) {
          case "stylesheet":
            return l = r.disabled, typeof r.precedence == "string" && l == null;
          default:
            return !0;
        }
      case "script":
        if (r.async && typeof r.async != "function" && typeof r.async != "symbol" && !r.onLoad && !r.onError && r.src && typeof r.src == "string")
          return !0;
    }
    return !1;
  }
  function ky(l) {
    return !(l.type === "stylesheet" && (l.state.loading & 3) === 0);
  }
  var Kr = null;
  function o2() {
  }
  function a2(l, r, a) {
    if (Kr === null) throw Error(i(475));
    var f = Kr;
    if (r.type === "stylesheet" && (typeof a.media != "string" || matchMedia(a.media).matches !== !1) && (r.state.loading & 4) === 0) {
      if (r.instance === null) {
        var d = Qs(a.href), g = l.querySelector(
          Zr(d)
        );
        if (g) {
          l = g._p, l !== null && typeof l == "object" && typeof l.then == "function" && (f.count++, f = ru.bind(f), l.then(f, f)), r.state.loading |= 4, r.instance = g, fe(g);
          return;
        }
        g = l.ownerDocument || l, a = by(a), (d = mi.get(d)) && td(a, d), g = g.createElement("link"), fe(g);
        var v = g;
        v._p = new Promise(function(b, T) {
          v.onload = b, v.onerror = T;
        }), Se(g, "link", a), r.instance = g;
      }
      f.stylesheets === null && (f.stylesheets = /* @__PURE__ */ new Map()), f.stylesheets.set(r, l), (l = r.state.preload) && (r.state.loading & 3) === 0 && (f.count++, r = ru.bind(f), l.addEventListener("load", r), l.addEventListener("error", r));
    }
  }
  function u2() {
    if (Kr === null) throw Error(i(475));
    var l = Kr;
    return l.stylesheets && l.count === 0 && id(l, l.stylesheets), 0 < l.count ? function(r) {
      var a = setTimeout(function() {
        if (l.stylesheets && id(l, l.stylesheets), l.unsuspend) {
          var f = l.unsuspend;
          l.unsuspend = null, f();
        }
      }, 6e4);
      return l.unsuspend = r, function() {
        l.unsuspend = null, clearTimeout(a);
      };
    } : null;
  }
  function ru() {
    if (this.count--, this.count === 0) {
      if (this.stylesheets) id(this, this.stylesheets);
      else if (this.unsuspend) {
        var l = this.unsuspend;
        this.unsuspend = null, l();
      }
    }
  }
  var ou = null;
  function id(l, r) {
    l.stylesheets = null, l.unsuspend !== null && (l.count++, ou = /* @__PURE__ */ new Map(), r.forEach(c2, l), ou = null, ru.call(l));
  }
  function c2(l, r) {
    if (!(r.state.loading & 4)) {
      var a = ou.get(l);
      if (a) var f = a.get(null);
      else {
        a = /* @__PURE__ */ new Map(), ou.set(l, a);
        for (var d = l.querySelectorAll(
          "link[data-precedence],style[data-precedence]"
        ), g = 0; g < d.length; g++) {
          var v = d[g];
          (v.nodeName === "LINK" || v.getAttribute("media") !== "not all") && (a.set(v.dataset.precedence, v), f = v);
        }
        f && a.set(null, f);
      }
      d = r.instance, v = d.getAttribute("data-precedence"), g = a.get(v) || f, g === f && a.set(null, d), a.set(v, d), this.count++, f = ru.bind(this), d.addEventListener("load", f), d.addEventListener("error", f), g ? g.parentNode.insertBefore(d, g.nextSibling) : (l = l.nodeType === 9 ? l.head : l, l.insertBefore(d, l.firstChild)), r.state.loading |= 4;
    }
  }
  var Jr = {
    $$typeof: W,
    Provider: null,
    Consumer: null,
    _currentValue: nt,
    _currentValue2: nt,
    _threadCount: 0
  };
  function f2(l, r, a, f, d, g, v, b) {
    this.tag = 1, this.containerInfo = l, this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = Kc(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Kc(0), this.hiddenUpdates = Kc(null), this.identifierPrefix = f, this.onUncaughtError = d, this.onCaughtError = g, this.onRecoverableError = v, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = b, this.incompleteTransitions = /* @__PURE__ */ new Map();
  }
  function Ay(l, r, a, f, d, g, v, b, T, D, L, j) {
    return l = new f2(
      l,
      r,
      a,
      v,
      b,
      T,
      D,
      j
    ), r = 1, g === !0 && (r |= 24), g = Fe(3, null, null, r), l.current = g, g.stateNode = l, r = Nf(), r.refCount++, l.pooledCache = r, r.refCount++, g.memoizedState = {
      element: f,
      isDehydrated: a,
      cache: r
    }, Vf(g), l;
  }
  function Cy(l) {
    return l ? (l = as, l) : as;
  }
  function Ey(l, r, a, f, d, g) {
    d = Cy(d), f.context === null ? f.context = d : f.pendingContext = d, f = zn(r), f.payload = { element: a }, g = g === void 0 ? null : g, g !== null && (f.callback = g), a = qn(l, f, r), a !== null && (ei(a, l, r), Er(a, l, r));
  }
  function My(l, r) {
    if (l = l.memoizedState, l !== null && l.dehydrated !== null) {
      var a = l.retryLane;
      l.retryLane = a !== 0 && a < r ? a : r;
    }
  }
  function nd(l, r) {
    My(l, r), (l = l.alternate) && My(l, r);
  }
  function Qy(l) {
    if (l.tag === 13) {
      var r = os(l, 67108864);
      r !== null && ei(r, l, 67108864), nd(l, 67108864);
    }
  }
  var au = !0;
  function h2(l, r, a, f) {
    var d = _.T;
    _.T = null;
    var g = P.p;
    try {
      P.p = 2, ld(l, r, a, f);
    } finally {
      P.p = g, _.T = d;
    }
  }
  function d2(l, r, a, f) {
    var d = _.T;
    _.T = null;
    var g = P.p;
    try {
      P.p = 8, ld(l, r, a, f);
    } finally {
      P.p = g, _.T = d;
    }
  }
  function ld(l, r, a, f) {
    if (au) {
      var d = sd(f);
      if (d === null)
        jh(
          l,
          r,
          f,
          uu,
          a
        ), Dy(l, f);
      else if (m2(
        d,
        l,
        r,
        a,
        f
      ))
        f.stopPropagation();
      else if (Dy(l, f), r & 4 && -1 < p2.indexOf(l)) {
        for (; d !== null; ) {
          var g = Zl(d);
          if (g !== null)
            switch (g.tag) {
              case 3:
                if (g = g.stateNode, g.current.memoizedState.isDehydrated) {
                  var v = dl(g.pendingLanes);
                  if (v !== 0) {
                    var b = g;
                    for (b.pendingLanes |= 2, b.entangledLanes |= 2; v; ) {
                      var T = 1 << 31 - Ye(v);
                      b.entanglements[1] |= T, v &= ~T;
                    }
                    _i(g), (qt & 6) === 0 && (Wa = Qi() + 500, jr(0));
                  }
                }
                break;
              case 13:
                b = os(g, 2), b !== null && ei(b, g, 2), Ya(), nd(g, 2);
            }
          if (g = sd(f), g === null && jh(
            l,
            r,
            f,
            uu,
            a
          ), g === d) break;
          d = g;
        }
        d !== null && f.stopPropagation();
      } else
        jh(
          l,
          r,
          f,
          null,
          a
        );
    }
  }
  function sd(l) {
    return l = cf(l), rd(l);
  }
  var uu = null;
  function rd(l) {
    if (uu = null, l = Yl(l), l !== null) {
      var r = o(l);
      if (r === null) l = null;
      else {
        var a = r.tag;
        if (a === 13) {
          if (l = u(r), l !== null) return l;
          l = null;
        } else if (a === 3) {
          if (r.stateNode.current.memoizedState.isDehydrated)
            return r.tag === 3 ? r.stateNode.containerInfo : null;
          l = null;
        } else r !== l && (l = null);
      }
    }
    return uu = l, null;
  }
  function Ry(l) {
    switch (l) {
      case "beforetoggle":
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "toggle":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 2;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 8;
      case "message":
        switch (Iw()) {
          case jm:
            return 2;
          case Wm:
            return 8;
          case ea:
          case tT:
            return 32;
          case Gm:
            return 268435456;
          default:
            return 32;
        }
      default:
        return 32;
    }
  }
  var od = !1, Gn = null, Yn = null, Zn = null, Ir = /* @__PURE__ */ new Map(), to = /* @__PURE__ */ new Map(), Fn = [], p2 = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
    " "
  );
  function Dy(l, r) {
    switch (l) {
      case "focusin":
      case "focusout":
        Gn = null;
        break;
      case "dragenter":
      case "dragleave":
        Yn = null;
        break;
      case "mouseover":
      case "mouseout":
        Zn = null;
        break;
      case "pointerover":
      case "pointerout":
        Ir.delete(r.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        to.delete(r.pointerId);
    }
  }
  function eo(l, r, a, f, d, g) {
    return l === null || l.nativeEvent !== g ? (l = {
      blockedOn: r,
      domEventName: a,
      eventSystemFlags: f,
      nativeEvent: g,
      targetContainers: [d]
    }, r !== null && (r = Zl(r), r !== null && Qy(r)), l) : (l.eventSystemFlags |= f, r = l.targetContainers, d !== null && r.indexOf(d) === -1 && r.push(d), l);
  }
  function m2(l, r, a, f, d) {
    switch (r) {
      case "focusin":
        return Gn = eo(
          Gn,
          l,
          r,
          a,
          f,
          d
        ), !0;
      case "dragenter":
        return Yn = eo(
          Yn,
          l,
          r,
          a,
          f,
          d
        ), !0;
      case "mouseover":
        return Zn = eo(
          Zn,
          l,
          r,
          a,
          f,
          d
        ), !0;
      case "pointerover":
        var g = d.pointerId;
        return Ir.set(
          g,
          eo(
            Ir.get(g) || null,
            l,
            r,
            a,
            f,
            d
          )
        ), !0;
      case "gotpointercapture":
        return g = d.pointerId, to.set(
          g,
          eo(
            to.get(g) || null,
            l,
            r,
            a,
            f,
            d
          )
        ), !0;
    }
    return !1;
  }
  function zy(l) {
    var r = Yl(l.target);
    if (r !== null) {
      var a = o(r);
      if (a !== null) {
        if (r = a.tag, r === 13) {
          if (r = u(a), r !== null) {
            l.blockedOn = r, aT(l.priority, function() {
              if (a.tag === 13) {
                var f = ti();
                f = Jc(f);
                var d = os(a, f);
                d !== null && ei(d, a, f), nd(a, f);
              }
            });
            return;
          }
        } else if (r === 3 && a.stateNode.current.memoizedState.isDehydrated) {
          l.blockedOn = a.tag === 3 ? a.stateNode.containerInfo : null;
          return;
        }
      }
    }
    l.blockedOn = null;
  }
  function cu(l) {
    if (l.blockedOn !== null) return !1;
    for (var r = l.targetContainers; 0 < r.length; ) {
      var a = sd(l.nativeEvent);
      if (a === null) {
        a = l.nativeEvent;
        var f = new a.constructor(
          a.type,
          a
        );
        uf = f, a.target.dispatchEvent(f), uf = null;
      } else
        return r = Zl(a), r !== null && Qy(r), l.blockedOn = a, !1;
      r.shift();
    }
    return !0;
  }
  function qy(l, r, a) {
    cu(l) && a.delete(r);
  }
  function g2() {
    od = !1, Gn !== null && cu(Gn) && (Gn = null), Yn !== null && cu(Yn) && (Yn = null), Zn !== null && cu(Zn) && (Zn = null), Ir.forEach(qy), to.forEach(qy);
  }
  function fu(l, r) {
    l.blockedOn === r && (l.blockedOn = null, od || (od = !0, n.unstable_scheduleCallback(
      n.unstable_NormalPriority,
      g2
    )));
  }
  var hu = null;
  function _y(l) {
    hu !== l && (hu = l, n.unstable_scheduleCallback(
      n.unstable_NormalPriority,
      function() {
        hu === l && (hu = null);
        for (var r = 0; r < l.length; r += 3) {
          var a = l[r], f = l[r + 1], d = l[r + 2];
          if (typeof f != "function") {
            if (rd(f || a) === null)
              continue;
            break;
          }
          var g = Zl(a);
          g !== null && (l.splice(r, 3), r -= 3, rh(
            g,
            {
              pending: !0,
              data: d,
              method: a.method,
              action: f
            },
            f,
            d
          ));
        }
      }
    ));
  }
  function io(l) {
    function r(T) {
      return fu(T, l);
    }
    Gn !== null && fu(Gn, l), Yn !== null && fu(Yn, l), Zn !== null && fu(Zn, l), Ir.forEach(r), to.forEach(r);
    for (var a = 0; a < Fn.length; a++) {
      var f = Fn[a];
      f.blockedOn === l && (f.blockedOn = null);
    }
    for (; 0 < Fn.length && (a = Fn[0], a.blockedOn === null); )
      zy(a), a.blockedOn === null && Fn.shift();
    if (a = (l.ownerDocument || l).$$reactFormReplay, a != null)
      for (f = 0; f < a.length; f += 3) {
        var d = a[f], g = a[f + 1], v = d[_e] || null;
        if (typeof g == "function")
          v || _y(a);
        else if (v) {
          var b = null;
          if (g && g.hasAttribute("formAction")) {
            if (d = g, v = g[_e] || null)
              b = v.formAction;
            else if (rd(d) !== null) continue;
          } else b = v.action;
          typeof b == "function" ? a[f + 1] = b : (a.splice(f, 3), f -= 3), _y(a);
        }
      }
  }
  function ad(l) {
    this._internalRoot = l;
  }
  du.prototype.render = ad.prototype.render = function(l) {
    var r = this._internalRoot;
    if (r === null) throw Error(i(409));
    var a = r.current, f = ti();
    Ey(a, f, l, r, null, null);
  }, du.prototype.unmount = ad.prototype.unmount = function() {
    var l = this._internalRoot;
    if (l !== null) {
      this._internalRoot = null;
      var r = l.containerInfo;
      Ey(l.current, 2, null, l, null, null), Ya(), r[Gl] = null;
    }
  };
  function du(l) {
    this._internalRoot = l;
  }
  du.prototype.unstable_scheduleHydration = function(l) {
    if (l) {
      var r = Jm();
      l = { blockedOn: null, target: l, priority: r };
      for (var a = 0; a < Fn.length && r !== 0 && r < Fn[a].priority; a++) ;
      Fn.splice(a, 0, l), a === 0 && zy(l);
    }
  };
  var By = t.version;
  if (By !== "19.1.0")
    throw Error(
      i(
        527,
        By,
        "19.1.0"
      )
    );
  P.findDOMNode = function(l) {
    var r = l._reactInternals;
    if (r === void 0)
      throw typeof l.render == "function" ? Error(i(188)) : (l = Object.keys(l).join(","), Error(i(268, l)));
    return l = h(r), l = l !== null ? p(l) : null, l = l === null ? null : l.stateNode, l;
  };
  var O2 = {
    bundleType: 0,
    version: "19.1.0",
    rendererPackageName: "react-dom",
    currentDispatcherRef: _,
    reconcilerVersion: "19.1.0"
  };
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
    var pu = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!pu.isDisabled && pu.supportsFiber)
      try {
        rr = pu.inject(
          O2
        ), Ge = pu;
      } catch {
      }
  }
  return no.createRoot = function(l, r) {
    if (!s(l)) throw Error(i(299));
    var a = !1, f = "", d = J0, g = I0, v = tO, b = null;
    return r != null && (r.unstable_strictMode === !0 && (a = !0), r.identifierPrefix !== void 0 && (f = r.identifierPrefix), r.onUncaughtError !== void 0 && (d = r.onUncaughtError), r.onCaughtError !== void 0 && (g = r.onCaughtError), r.onRecoverableError !== void 0 && (v = r.onRecoverableError), r.unstable_transitionCallbacks !== void 0 && (b = r.unstable_transitionCallbacks)), r = Ay(
      l,
      1,
      !1,
      null,
      null,
      a,
      f,
      d,
      g,
      v,
      b,
      null
    ), l[Gl] = r.current, $h(l), new ad(r);
  }, no.hydrateRoot = function(l, r, a) {
    if (!s(l)) throw Error(i(299));
    var f = !1, d = "", g = J0, v = I0, b = tO, T = null, D = null;
    return a != null && (a.unstable_strictMode === !0 && (f = !0), a.identifierPrefix !== void 0 && (d = a.identifierPrefix), a.onUncaughtError !== void 0 && (g = a.onUncaughtError), a.onCaughtError !== void 0 && (v = a.onCaughtError), a.onRecoverableError !== void 0 && (b = a.onRecoverableError), a.unstable_transitionCallbacks !== void 0 && (T = a.unstable_transitionCallbacks), a.formState !== void 0 && (D = a.formState)), r = Ay(
      l,
      1,
      !0,
      r,
      a ?? null,
      f,
      d,
      g,
      v,
      b,
      T,
      D
    ), r.context = Cy(null), a = r.current, f = ti(), f = Jc(f), d = zn(f), d.callback = null, qn(a, d, f), a = f, r.current.lanes = a, ar(r, a), _i(r), l[Gl] = r.current, $h(l), new du(r);
  }, no.version = "19.1.0", no;
}
var $y;
function A2() {
  if ($y) return cd.exports;
  $y = 1;
  function n() {
    if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(n);
      } catch (t) {
        console.error(t);
      }
  }
  return n(), cd.exports = k2(), cd.exports;
}
var C2 = A2();
const po = {}, jy = (n, t) => n.unstable_is ? n.unstable_is(t) : t === n, Wy = (n) => "init" in n, pd = (n) => !!n.write, Gy = (n) => "v" in n || "e" in n, mu = (n) => {
  if ("e" in n)
    throw n.e;
  if ((po ? "production" : void 0) !== "production" && !("v" in n))
    throw new Error("[Bug] atom state is not initialized");
  return n.v;
}, nc = /* @__PURE__ */ new WeakMap(), Yy = (n) => {
  var t;
  return lc(n) && !!((t = nc.get(n)) != null && t[0]);
}, E2 = (n) => {
  const t = nc.get(n);
  t != null && t[0] && (t[0] = !1, t[1].forEach((e) => e()));
}, aS = (n, t) => {
  let e = nc.get(n);
  if (!e) {
    e = [!0, /* @__PURE__ */ new Set()], nc.set(n, e);
    const i = () => {
      e[0] = !1;
    };
    n.then(i, i);
  }
  e[1].add(t);
}, lc = (n) => typeof (n == null ? void 0 : n.then) == "function", uS = (n, t, e) => {
  e.p.has(n) || (e.p.add(n), t.then(
    () => {
      e.p.delete(n);
    },
    () => {
      e.p.delete(n);
    }
  ));
}, md = (n, t, e) => {
  const i = e(n), s = "v" in i, o = i.v;
  if (lc(t))
    for (const u of i.d.keys())
      uS(n, t, e(u));
  i.v = t, delete i.e, (!s || !Object.is(o, i.v)) && (++i.n, lc(o) && E2(o));
}, Zy = (n, t, e) => {
  var i;
  const s = /* @__PURE__ */ new Set();
  for (const o of ((i = e.get(n)) == null ? void 0 : i.t) || [])
    e.has(o) && s.add(o);
  for (const o of t.p)
    s.add(o);
  return s;
}, M2 = () => {
  const n = /* @__PURE__ */ new Set(), t = () => {
    n.forEach((e) => e());
  };
  return t.add = (e) => (n.add(e), () => {
    n.delete(e);
  }), t;
}, gd = () => {
  const n = {}, t = /* @__PURE__ */ new WeakMap(), e = (i) => {
    var s, o;
    (s = t.get(n)) == null || s.forEach((u) => u(i)), (o = t.get(i)) == null || o.forEach((u) => u());
  };
  return e.add = (i, s) => {
    const o = i || n, u = (t.has(o) ? t : t.set(o, /* @__PURE__ */ new Set())).get(o);
    return u.add(s), () => {
      u == null || u.delete(s), u.size || t.delete(o);
    };
  }, e;
}, Q2 = (n) => (n.c || (n.c = gd()), n.m || (n.m = gd()), n.u || (n.u = gd()), n.f || (n.f = M2()), n), R2 = Symbol(), D2 = (n = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap(), e = /* @__PURE__ */ new WeakMap(), i = /* @__PURE__ */ new Set(), s = /* @__PURE__ */ new Set(), o = /* @__PURE__ */ new Set(), u = {}, c = (y, ...S) => y.read(...S), h = (y, ...S) => y.write(...S), p = (y, S) => {
  var x;
  return (x = y.unstable_onInit) == null ? void 0 : x.call(y, S);
}, m = (y, S) => {
  var x;
  return (x = y.onMount) == null ? void 0 : x.call(y, S);
}, ...O) => {
  const y = O[0] || ((R) => {
    if ((po ? "production" : void 0) !== "production" && !R)
      throw new Error("Atom is undefined or null");
    let K = n.get(R);
    return K || (K = { d: /* @__PURE__ */ new Map(), p: /* @__PURE__ */ new Set(), n: 0 }, n.set(R, K), p == null || p(R, Y)), K;
  }), S = O[1] || (() => {
    const R = [], K = (G) => {
      try {
        G();
      } catch (J) {
        R.push(J);
      }
    };
    do {
      u.f && K(u.f);
      const G = /* @__PURE__ */ new Set(), J = G.add.bind(G);
      i.forEach((F) => {
        var V;
        return (V = t.get(F)) == null ? void 0 : V.l.forEach(J);
      }), i.clear(), o.forEach(J), o.clear(), s.forEach(J), s.clear(), G.forEach(K), i.size && x();
    } while (i.size || o.size || s.size);
    if (R.length)
      throw new AggregateError(R);
  }), x = O[2] || (() => {
    const R = [], K = /* @__PURE__ */ new WeakSet(), G = /* @__PURE__ */ new WeakSet(), J = Array.from(i);
    for (; J.length; ) {
      const F = J[J.length - 1], V = y(F);
      if (G.has(F)) {
        J.pop();
        continue;
      }
      if (K.has(F)) {
        if (e.get(F) === V.n)
          R.push([F, V]);
        else if ((po ? "production" : void 0) !== "production" && e.has(F))
          throw new Error("[Bug] invalidated atom exists");
        G.add(F), J.pop();
        continue;
      }
      K.add(F);
      for (const at of Zy(F, V, t))
        K.has(at) || J.push(at);
    }
    for (let F = R.length - 1; F >= 0; --F) {
      const [V, at] = R[F];
      let ot = !1;
      for (const ht of at.d.keys())
        if (ht !== V && i.has(ht)) {
          ot = !0;
          break;
        }
      ot && (w(V), U(V)), e.delete(V);
    }
  }), w = O[3] || ((R) => {
    var K;
    const G = y(R);
    if (Gy(G) && (t.has(R) && e.get(R) !== G.n || Array.from(G.d).every(
      ([P, nt]) => (
        // Recursively, read the atom state of the dependency, and
        // check if the atom epoch number is unchanged
        w(P).n === nt
      )
    )))
      return G;
    G.d.clear();
    let J = !0;
    const F = () => {
      t.has(R) && (U(R), x(), S());
    }, V = (P) => {
      var nt;
      if (jy(R, P)) {
        const k = y(P);
        if (!Gy(k))
          if (Wy(P))
            md(P, P.init, y);
          else
            throw new Error("no atom init");
        return mu(k);
      }
      const dt = w(P);
      try {
        return mu(dt);
      } finally {
        G.d.set(P, dt.n), Yy(G.v) && uS(R, G.v, dt), (nt = t.get(P)) == null || nt.t.add(R), J || F();
      }
    };
    let at, ot;
    const ht = {
      get signal() {
        return at || (at = new AbortController()), at.signal;
      },
      get setSelf() {
        return (po ? "production" : void 0) !== "production" && !pd(R) && console.warn("setSelf function cannot be used with read-only atom"), !ot && pd(R) && (ot = (...P) => {
          if ((po ? "production" : void 0) !== "production" && J && console.warn("setSelf function cannot be called in sync"), !J)
            try {
              return M(R, ...P);
            } finally {
              x(), S();
            }
        }), ot;
      }
    }, _ = G.n;
    try {
      const P = c(R, V, ht);
      return md(R, P, y), lc(P) && (aS(P, () => at == null ? void 0 : at.abort()), P.then(
        F,
        F
      )), G;
    } catch (P) {
      return delete G.v, G.e = P, ++G.n, G;
    } finally {
      J = !1, _ !== G.n && e.get(R) === _ && (e.set(R, G.n), i.add(R), (K = u.c) == null || K.call(u, R));
    }
  }), C = O[4] || ((R) => {
    const K = [R];
    for (; K.length; ) {
      const G = K.pop(), J = y(G);
      for (const F of Zy(G, J, t)) {
        const V = y(F);
        e.set(F, V.n), K.push(F);
      }
    }
  }), M = O[5] || ((R, ...K) => {
    let G = !0;
    const J = (V) => mu(w(V)), F = (V, ...at) => {
      var ot;
      const ht = y(V);
      try {
        if (jy(R, V)) {
          if (!Wy(V))
            throw new Error("atom not writable");
          const _ = ht.n, P = at[0];
          md(V, P, y), U(V), _ !== ht.n && (i.add(V), (ot = u.c) == null || ot.call(u, V), C(V));
          return;
        } else
          return M(V, ...at);
      } finally {
        G || (x(), S());
      }
    };
    try {
      return h(R, J, F, ...K);
    } finally {
      G = !1;
    }
  }), U = O[6] || ((R) => {
    var K;
    const G = y(R), J = t.get(R);
    if (J && !Yy(G.v)) {
      for (const [F, V] of G.d)
        if (!J.d.has(F)) {
          const at = y(F);
          W(F).t.add(R), J.d.add(F), V !== at.n && (i.add(F), (K = u.c) == null || K.call(u, F), C(F));
        }
      for (const F of J.d || [])
        if (!G.d.has(F)) {
          J.d.delete(F);
          const V = Z(F);
          V == null || V.t.delete(R);
        }
    }
  }), W = O[7] || ((R) => {
    var K;
    const G = y(R);
    let J = t.get(R);
    if (!J) {
      w(R);
      for (const F of G.d.keys())
        W(F).t.add(R);
      if (J = {
        l: /* @__PURE__ */ new Set(),
        d: new Set(G.d.keys()),
        t: /* @__PURE__ */ new Set()
      }, t.set(R, J), (K = u.m) == null || K.call(u, R), pd(R)) {
        const F = () => {
          let V = !0;
          const at = (...ot) => {
            try {
              return M(R, ...ot);
            } finally {
              V || (x(), S());
            }
          };
          try {
            const ot = m(R, at);
            ot && (J.u = () => {
              V = !0;
              try {
                ot();
              } finally {
                V = !1;
              }
            });
          } finally {
            V = !1;
          }
        };
        s.add(F);
      }
    }
    return J;
  }), Z = O[8] || ((R) => {
    var K;
    const G = y(R);
    let J = t.get(R);
    if (J && !J.l.size && !Array.from(J.t).some((F) => {
      var V;
      return (V = t.get(F)) == null ? void 0 : V.d.has(R);
    })) {
      J.u && o.add(J.u), J = void 0, t.delete(R), (K = u.u) == null || K.call(u, R);
      for (const F of G.d.keys()) {
        const V = Z(F);
        V == null || V.t.delete(R);
      }
      return;
    }
    return J;
  }), N = [
    // store state
    n,
    t,
    e,
    i,
    s,
    o,
    u,
    // atom interceptors
    c,
    h,
    p,
    m,
    // building-block functions
    y,
    S,
    x,
    w,
    C,
    M,
    U,
    W,
    Z
  ], Y = {
    get: (R) => mu(w(R)),
    set: (R, ...K) => {
      try {
        return M(R, ...K);
      } finally {
        x(), S();
      }
    },
    sub: (R, K) => {
      const J = W(R).l;
      return J.add(K), S(), () => {
        J.delete(K), Z(R), S();
      };
    }
  };
  return Object.defineProperty(Y, R2, { value: N }), Y;
}, cS = D2, z2 = Q2, Fy = aS, im = {};
let q2 = 0;
function lo(n, t) {
  const e = `atom${++q2}`, i = {
    toString() {
      return (im ? "production" : void 0) !== "production" && this.debugLabel ? e + ":" + this.debugLabel : e;
    }
  };
  return typeof n == "function" ? i.read = n : (i.init = n, i.read = _2, i.write = B2), t && (i.write = t), i;
}
function _2(n) {
  return n(this);
}
function B2(n, t, e) {
  return t(
    this,
    typeof e == "function" ? e(n(this)) : e
  );
}
const N2 = () => {
  let n = 0;
  const t = z2({}), e = /* @__PURE__ */ new WeakMap(), i = /* @__PURE__ */ new WeakMap(), s = cS(
    e,
    i,
    void 0,
    void 0,
    void 0,
    void 0,
    t,
    void 0,
    (c, h, p, ...m) => n ? p(c, ...m) : c.write(h, p, ...m)
  ), o = /* @__PURE__ */ new Set();
  return t.m.add(void 0, (c) => {
    o.add(c);
    const h = e.get(c);
    h.m = i.get(c);
  }), t.u.add(void 0, (c) => {
    o.delete(c);
    const h = e.get(c);
    delete h.m;
  }), Object.assign(s, {
    // store dev methods (these are tentative and subject to change without notice)
    dev4_get_internal_weak_map: () => (console.log("Deprecated: Use devstore from the devtools library"), e),
    dev4_get_mounted_atoms: () => o,
    dev4_restore_atoms: (c) => {
      const h = {
        read: () => null,
        write: (p, m) => {
          ++n;
          try {
            for (const [O, y] of c)
              "init" in O && m(O, y);
          } finally {
            --n;
          }
        }
      };
      s.set(h);
    }
  });
};
function fS() {
  return (im ? "production" : void 0) !== "production" ? N2() : cS();
}
let so;
function P2() {
  return so || (so = fS(), (im ? "production" : void 0) !== "production" && (globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = so), globalThis.__JOTAI_DEFAULT_STORE__ !== so && console.warn(
    "Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044"
  ))), so;
}
const L2 = {}, hS = Qt.createContext(
  void 0
);
function dS(n) {
  return Qt.useContext(hS) || P2();
}
function U2({
  children: n,
  store: t
}) {
  const e = Qt.useRef(void 0);
  return !t && !e.current && (e.current = fS()), Qt.createElement(
    hS.Provider,
    {
      value: t || e.current
    },
    n
  );
}
const tp = (n) => typeof (n == null ? void 0 : n.then) == "function", ep = (n) => {
  n.status || (n.status = "pending", n.then(
    (t) => {
      n.status = "fulfilled", n.value = t;
    },
    (t) => {
      n.status = "rejected", n.reason = t;
    }
  ));
}, V2 = ki.use || // A shim for older React versions
((n) => {
  if (n.status === "pending")
    throw n;
  if (n.status === "fulfilled")
    return n.value;
  throw n.status === "rejected" ? n.reason : (ep(n), n);
}), Od = /* @__PURE__ */ new WeakMap(), Ky = (n, t) => {
  let e = Od.get(n);
  return e || (e = new Promise((i, s) => {
    let o = n;
    const u = (p) => (m) => {
      o === p && i(m);
    }, c = (p) => (m) => {
      o === p && s(m);
    }, h = () => {
      try {
        const p = t();
        tp(p) ? (Od.set(p, e), o = p, p.then(u(p), c(p)), Fy(p, h)) : i(p);
      } catch (p) {
        s(p);
      }
    };
    n.then(u(n), c(n)), Fy(n, h);
  }), Od.set(n, e)), e;
};
function H2(n, t) {
  const { delay: e, unstable_promiseStatus: i = !ki.use } = {}, s = dS(), [[o, u, c], h] = Qt.useReducer(
    (m) => {
      const O = s.get(n);
      return Object.is(m[0], O) && m[1] === s && m[2] === n ? m : [O, s, n];
    },
    void 0,
    () => [s.get(n), s, n]
  );
  let p = o;
  if ((u !== s || c !== n) && (h(), p = s.get(n)), Qt.useEffect(() => {
    const m = s.sub(n, () => {
      if (i)
        try {
          const O = s.get(n);
          tp(O) && ep(
            Ky(O, () => s.get(n))
          );
        } catch {
        }
      if (typeof e == "number") {
        setTimeout(h, e);
        return;
      }
      h();
    });
    return h(), m;
  }, [s, n, e, i]), Qt.useDebugValue(p), tp(p)) {
    const m = Ky(p, () => s.get(n));
    return i && ep(m), V2(m);
  }
  return p;
}
function X2(n, t) {
  const e = dS();
  return Qt.useCallback(
    (...s) => {
      if ((L2 ? "production" : void 0) !== "production" && !("write" in n))
        throw new Error("not writable atom");
      return e.set(n, ...s);
    },
    [e, n]
  );
}
function mo(n, t) {
  return [
    H2(n),
    // We do wrong type assertion here, which results in throwing an error.
    X2(n)
  ];
}
function ip() {
  return ip = Object.assign ? Object.assign.bind() : function(n) {
    for (var t = 1; t < arguments.length; t++) {
      var e = arguments[t];
      for (var i in e) ({}).hasOwnProperty.call(e, i) && (n[i] = e[i]);
    }
    return n;
  }, ip.apply(null, arguments);
}
function $2(n, t) {
  if (n == null) return {};
  var e = {};
  for (var i in n) if ({}.hasOwnProperty.call(n, i)) {
    if (t.indexOf(i) !== -1) continue;
    e[i] = n[i];
  }
  return e;
}
let np = [], pS = [];
(() => {
  let n = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((t) => t ? parseInt(t, 36) : 1);
  for (let t = 0, e = 0; t < n.length; t++)
    (t % 2 ? pS : np).push(e = e + n[t]);
})();
function j2(n) {
  if (n < 768) return !1;
  for (let t = 0, e = np.length; ; ) {
    let i = t + e >> 1;
    if (n < np[i]) e = i;
    else if (n >= pS[i]) t = i + 1;
    else return !0;
    if (t == e) return !1;
  }
}
function Jy(n) {
  return n >= 127462 && n <= 127487;
}
const Iy = 8205;
function W2(n, t, e = !0, i = !0) {
  return (e ? mS : G2)(n, t, i);
}
function mS(n, t, e) {
  if (t == n.length) return t;
  t && gS(n.charCodeAt(t)) && OS(n.charCodeAt(t - 1)) && t--;
  let i = yd(n, t);
  for (t += t1(i); t < n.length; ) {
    let s = yd(n, t);
    if (i == Iy || s == Iy || e && j2(s))
      t += t1(s), i = s;
    else if (Jy(s)) {
      let o = 0, u = t - 2;
      for (; u >= 0 && Jy(yd(n, u)); )
        o++, u -= 2;
      if (o % 2 == 0) break;
      t += 2;
    } else
      break;
  }
  return t;
}
function G2(n, t, e) {
  for (; t > 0; ) {
    let i = mS(n, t - 2, e);
    if (i < t) return i;
    t--;
  }
  return 0;
}
function yd(n, t) {
  let e = n.charCodeAt(t);
  if (!OS(e) || t + 1 == n.length) return e;
  let i = n.charCodeAt(t + 1);
  return gS(i) ? (e - 55296 << 10) + (i - 56320) + 65536 : e;
}
function gS(n) {
  return n >= 56320 && n < 57344;
}
function OS(n) {
  return n >= 55296 && n < 56320;
}
function t1(n) {
  return n < 65536 ? 1 : 2;
}
class Et {
  /**
  Get the line description around the given position.
  */
  lineAt(t) {
    if (t < 0 || t > this.length)
      throw new RangeError(`Invalid position ${t} in document of length ${this.length}`);
    return this.lineInner(t, !1, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(t) {
    if (t < 1 || t > this.lines)
      throw new RangeError(`Invalid line number ${t} in ${this.lines}-line document`);
    return this.lineInner(t, !0, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(t, e, i) {
    [t, e] = Gs(this, t, e);
    let s = [];
    return this.decompose(
      0,
      t,
      s,
      2
      /* Open.To */
    ), i.length && i.decompose(
      0,
      i.length,
      s,
      3
      /* Open.To */
    ), this.decompose(
      e,
      this.length,
      s,
      1
      /* Open.From */
    ), Vi.from(s, this.length - (e - t) + i.length);
  }
  /**
  Append another document to this one.
  */
  append(t) {
    return this.replace(this.length, this.length, t);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(t, e = this.length) {
    [t, e] = Gs(this, t, e);
    let i = [];
    return this.decompose(t, e, i, 0), Vi.from(i, e - t);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(t) {
    if (t == this)
      return !0;
    if (t.length != this.length || t.lines != this.lines)
      return !1;
    let e = this.scanIdentical(t, 1), i = this.length - this.scanIdentical(t, -1), s = new bo(this), o = new bo(t);
    for (let u = e, c = e; ; ) {
      if (s.next(u), o.next(u), u = 0, s.lineBreak != o.lineBreak || s.done != o.done || s.value != o.value)
        return !1;
      if (c += s.value.length, s.done || c >= i)
        return !0;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(t = 1) {
    return new bo(this, t);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(t, e = this.length) {
    return new yS(this, t, e);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(t, e) {
    let i;
    if (t == null)
      i = this.iter();
    else {
      e == null && (e = this.lines + 1);
      let s = this.line(t).from;
      i = this.iterRange(s, Math.max(s, e == this.lines + 1 ? this.length : e <= 1 ? 0 : this.line(e - 1).to));
    }
    return new vS(i);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let t = [];
    return this.flatten(t), t;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(t) {
    if (t.length == 0)
      throw new RangeError("A document must have at least one line");
    return t.length == 1 && !t[0] ? Et.empty : t.length <= 32 ? new te(t) : Vi.from(te.split(t, []));
  }
}
class te extends Et {
  constructor(t, e = Y2(t)) {
    super(), this.text = t, this.length = e;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(t, e, i, s) {
    for (let o = 0; ; o++) {
      let u = this.text[o], c = s + u.length;
      if ((e ? i : c) >= t)
        return new Z2(s, c, i, u);
      s = c + 1, i++;
    }
  }
  decompose(t, e, i, s) {
    let o = t <= 0 && e >= this.length ? this : new te(e1(this.text, t, e), Math.min(e, this.length) - Math.max(0, t));
    if (s & 1) {
      let u = i.pop(), c = Hu(o.text, u.text.slice(), 0, o.length);
      if (c.length <= 32)
        i.push(new te(c, u.length + o.length));
      else {
        let h = c.length >> 1;
        i.push(new te(c.slice(0, h)), new te(c.slice(h)));
      }
    } else
      i.push(o);
  }
  replace(t, e, i) {
    if (!(i instanceof te))
      return super.replace(t, e, i);
    [t, e] = Gs(this, t, e);
    let s = Hu(this.text, Hu(i.text, e1(this.text, 0, t)), e), o = this.length + i.length - (e - t);
    return s.length <= 32 ? new te(s, o) : Vi.from(te.split(s, []), o);
  }
  sliceString(t, e = this.length, i = `
`) {
    [t, e] = Gs(this, t, e);
    let s = "";
    for (let o = 0, u = 0; o <= e && u < this.text.length; u++) {
      let c = this.text[u], h = o + c.length;
      o > t && u && (s += i), t < h && e > o && (s += c.slice(Math.max(0, t - o), e - o)), o = h + 1;
    }
    return s;
  }
  flatten(t) {
    for (let e of this.text)
      t.push(e);
  }
  scanIdentical() {
    return 0;
  }
  static split(t, e) {
    let i = [], s = -1;
    for (let o of t)
      i.push(o), s += o.length + 1, i.length == 32 && (e.push(new te(i, s)), i = [], s = -1);
    return s > -1 && e.push(new te(i, s)), e;
  }
}
class Vi extends Et {
  constructor(t, e) {
    super(), this.children = t, this.length = e, this.lines = 0;
    for (let i of t)
      this.lines += i.lines;
  }
  lineInner(t, e, i, s) {
    for (let o = 0; ; o++) {
      let u = this.children[o], c = s + u.length, h = i + u.lines - 1;
      if ((e ? h : c) >= t)
        return u.lineInner(t, e, i, s);
      s = c + 1, i = h + 1;
    }
  }
  decompose(t, e, i, s) {
    for (let o = 0, u = 0; u <= e && o < this.children.length; o++) {
      let c = this.children[o], h = u + c.length;
      if (t <= h && e >= u) {
        let p = s & ((u <= t ? 1 : 0) | (h >= e ? 2 : 0));
        u >= t && h <= e && !p ? i.push(c) : c.decompose(t - u, e - u, i, p);
      }
      u = h + 1;
    }
  }
  replace(t, e, i) {
    if ([t, e] = Gs(this, t, e), i.lines < this.lines)
      for (let s = 0, o = 0; s < this.children.length; s++) {
        let u = this.children[s], c = o + u.length;
        if (t >= o && e <= c) {
          let h = u.replace(t - o, e - o, i), p = this.lines - u.lines + h.lines;
          if (h.lines < p >> 4 && h.lines > p >> 6) {
            let m = this.children.slice();
            return m[s] = h, new Vi(m, this.length - (e - t) + i.length);
          }
          return super.replace(o, c, h);
        }
        o = c + 1;
      }
    return super.replace(t, e, i);
  }
  sliceString(t, e = this.length, i = `
`) {
    [t, e] = Gs(this, t, e);
    let s = "";
    for (let o = 0, u = 0; o < this.children.length && u <= e; o++) {
      let c = this.children[o], h = u + c.length;
      u > t && o && (s += i), t < h && e > u && (s += c.sliceString(t - u, e - u, i)), u = h + 1;
    }
    return s;
  }
  flatten(t) {
    for (let e of this.children)
      e.flatten(t);
  }
  scanIdentical(t, e) {
    if (!(t instanceof Vi))
      return 0;
    let i = 0, [s, o, u, c] = e > 0 ? [0, 0, this.children.length, t.children.length] : [this.children.length - 1, t.children.length - 1, -1, -1];
    for (; ; s += e, o += e) {
      if (s == u || o == c)
        return i;
      let h = this.children[s], p = t.children[o];
      if (h != p)
        return i + h.scanIdentical(p, e);
      i += h.length + 1;
    }
  }
  static from(t, e = t.reduce((i, s) => i + s.length + 1, -1)) {
    let i = 0;
    for (let S of t)
      i += S.lines;
    if (i < 32) {
      let S = [];
      for (let x of t)
        x.flatten(S);
      return new te(S, e);
    }
    let s = Math.max(
      32,
      i >> 5
      /* Tree.BranchShift */
    ), o = s << 1, u = s >> 1, c = [], h = 0, p = -1, m = [];
    function O(S) {
      let x;
      if (S.lines > o && S instanceof Vi)
        for (let w of S.children)
          O(w);
      else S.lines > u && (h > u || !h) ? (y(), c.push(S)) : S instanceof te && h && (x = m[m.length - 1]) instanceof te && S.lines + x.lines <= 32 ? (h += S.lines, p += S.length + 1, m[m.length - 1] = new te(x.text.concat(S.text), x.length + 1 + S.length)) : (h + S.lines > s && y(), h += S.lines, p += S.length + 1, m.push(S));
    }
    function y() {
      h != 0 && (c.push(m.length == 1 ? m[0] : Vi.from(m, p)), p = -1, h = m.length = 0);
    }
    for (let S of t)
      O(S);
    return y(), c.length == 1 ? c[0] : new Vi(c, e);
  }
}
Et.empty = /* @__PURE__ */ new te([""], 0);
function Y2(n) {
  let t = -1;
  for (let e of n)
    t += e.length + 1;
  return t;
}
function Hu(n, t, e = 0, i = 1e9) {
  for (let s = 0, o = 0, u = !0; o < n.length && s <= i; o++) {
    let c = n[o], h = s + c.length;
    h >= e && (h > i && (c = c.slice(0, i - s)), s < e && (c = c.slice(e - s)), u ? (t[t.length - 1] += c, u = !1) : t.push(c)), s = h + 1;
  }
  return t;
}
function e1(n, t, e) {
  return Hu(n, [""], t, e);
}
class bo {
  constructor(t, e = 1) {
    this.dir = e, this.done = !1, this.lineBreak = !1, this.value = "", this.nodes = [t], this.offsets = [e > 0 ? 1 : (t instanceof te ? t.text.length : t.children.length) << 1];
  }
  nextInner(t, e) {
    for (this.done = this.lineBreak = !1; ; ) {
      let i = this.nodes.length - 1, s = this.nodes[i], o = this.offsets[i], u = o >> 1, c = s instanceof te ? s.text.length : s.children.length;
      if (u == (e > 0 ? c : 0)) {
        if (i == 0)
          return this.done = !0, this.value = "", this;
        e > 0 && this.offsets[i - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((o & 1) == (e > 0 ? 0 : 1)) {
        if (this.offsets[i] += e, t == 0)
          return this.lineBreak = !0, this.value = `
`, this;
        t--;
      } else if (s instanceof te) {
        let h = s.text[u + (e < 0 ? -1 : 0)];
        if (this.offsets[i] += e, h.length > Math.max(0, t))
          return this.value = t == 0 ? h : e > 0 ? h.slice(t) : h.slice(0, h.length - t), this;
        t -= h.length;
      } else {
        let h = s.children[u + (e < 0 ? -1 : 0)];
        t > h.length ? (t -= h.length, this.offsets[i] += e) : (e < 0 && this.offsets[i]--, this.nodes.push(h), this.offsets.push(e > 0 ? 1 : (h instanceof te ? h.text.length : h.children.length) << 1));
      }
    }
  }
  next(t = 0) {
    return t < 0 && (this.nextInner(-t, -this.dir), t = this.value.length), this.nextInner(t, this.dir);
  }
}
class yS {
  constructor(t, e, i) {
    this.value = "", this.done = !1, this.cursor = new bo(t, e > i ? -1 : 1), this.pos = e > i ? t.length : 0, this.from = Math.min(e, i), this.to = Math.max(e, i);
  }
  nextInner(t, e) {
    if (e < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = !0, this;
    t += Math.max(0, e < 0 ? this.pos - this.to : this.from - this.pos);
    let i = e < 0 ? this.pos - this.from : this.to - this.pos;
    t > i && (t = i), i -= t;
    let { value: s } = this.cursor.next(t);
    return this.pos += (s.length + t) * e, this.value = s.length <= i ? s : e < 0 ? s.slice(s.length - i) : s.slice(0, i), this.done = !this.value, this;
  }
  next(t = 0) {
    return t < 0 ? t = Math.max(t, this.from - this.pos) : t > 0 && (t = Math.min(t, this.to - this.pos)), this.nextInner(t, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class vS {
  constructor(t) {
    this.inner = t, this.afterBreak = !0, this.value = "", this.done = !1;
  }
  next(t = 0) {
    let { done: e, lineBreak: i, value: s } = this.inner.next(t);
    return e && this.afterBreak ? (this.value = "", this.afterBreak = !1) : e ? (this.done = !0, this.value = "") : i ? this.afterBreak ? this.value = "" : (this.afterBreak = !0, this.next()) : (this.value = s, this.afterBreak = !1), this;
  }
  get lineBreak() {
    return !1;
  }
}
typeof Symbol < "u" && (Et.prototype[Symbol.iterator] = function() {
  return this.iter();
}, bo.prototype[Symbol.iterator] = yS.prototype[Symbol.iterator] = vS.prototype[Symbol.iterator] = function() {
  return this;
});
class Z2 {
  /**
  @internal
  */
  constructor(t, e, i, s) {
    this.from = t, this.to = e, this.number = i, this.text = s;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
}
function Gs(n, t, e) {
  return t = Math.max(0, Math.min(n.length, t)), [t, Math.max(t, Math.min(n.length, e))];
}
function Te(n, t, e = !0, i = !0) {
  return W2(n, t, e, i);
}
function F2(n) {
  return n >= 56320 && n < 57344;
}
function K2(n) {
  return n >= 55296 && n < 56320;
}
function Ue(n, t) {
  let e = n.charCodeAt(t);
  if (!K2(e) || t + 1 == n.length)
    return e;
  let i = n.charCodeAt(t + 1);
  return F2(i) ? (e - 55296 << 10) + (i - 56320) + 65536 : e;
}
function nm(n) {
  return n <= 65535 ? String.fromCharCode(n) : (n -= 65536, String.fromCharCode((n >> 10) + 55296, (n & 1023) + 56320));
}
function Hi(n) {
  return n < 65536 ? 1 : 2;
}
const lp = /\r\n?|\n/;
var we = /* @__PURE__ */ function(n) {
  return n[n.Simple = 0] = "Simple", n[n.TrackDel = 1] = "TrackDel", n[n.TrackBefore = 2] = "TrackBefore", n[n.TrackAfter = 3] = "TrackAfter", n;
}(we || (we = {}));
class Gi {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(t) {
    this.sections = t;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let t = 0;
    for (let e = 0; e < this.sections.length; e += 2)
      t += this.sections[e];
    return t;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let t = 0;
    for (let e = 0; e < this.sections.length; e += 2) {
      let i = this.sections[e + 1];
      t += i < 0 ? this.sections[e] : i;
    }
    return t;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(t) {
    for (let e = 0, i = 0, s = 0; e < this.sections.length; ) {
      let o = this.sections[e++], u = this.sections[e++];
      u < 0 ? (t(i, s, o), s += o) : s += u, i += o;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(t, e = !1) {
    sp(this, t, e);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let t = [];
    for (let e = 0; e < this.sections.length; ) {
      let i = this.sections[e++], s = this.sections[e++];
      s < 0 ? t.push(i, s) : t.push(s, i);
    }
    return new Gi(t);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(t) {
    return this.empty ? t : t.empty ? this : SS(this, t);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `this` happened before the ones in `other`.
  */
  mapDesc(t, e = !1) {
    return t.empty ? this : rp(this, t, e);
  }
  mapPos(t, e = -1, i = we.Simple) {
    let s = 0, o = 0;
    for (let u = 0; u < this.sections.length; ) {
      let c = this.sections[u++], h = this.sections[u++], p = s + c;
      if (h < 0) {
        if (p > t)
          return o + (t - s);
        o += c;
      } else {
        if (i != we.Simple && p >= t && (i == we.TrackDel && s < t && p > t || i == we.TrackBefore && s < t || i == we.TrackAfter && p > t))
          return null;
        if (p > t || p == t && e < 0 && !c)
          return t == s || e < 0 ? o : o + h;
        o += h;
      }
      s = p;
    }
    if (t > s)
      throw new RangeError(`Position ${t} is out of range for changeset of length ${s}`);
    return o;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(t, e = t) {
    for (let i = 0, s = 0; i < this.sections.length && s <= e; ) {
      let o = this.sections[i++], u = this.sections[i++], c = s + o;
      if (u >= 0 && s <= e && c >= t)
        return s < t && c > e ? "cover" : !0;
      s = c;
    }
    return !1;
  }
  /**
  @internal
  */
  toString() {
    let t = "";
    for (let e = 0; e < this.sections.length; ) {
      let i = this.sections[e++], s = this.sections[e++];
      t += (t ? " " : "") + i + (s >= 0 ? ":" + s : "");
    }
    return t;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(t) {
    if (!Array.isArray(t) || t.length % 2 || t.some((e) => typeof e != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Gi(t);
  }
  /**
  @internal
  */
  static create(t) {
    return new Gi(t);
  }
}
class ue extends Gi {
  constructor(t, e) {
    super(t), this.inserted = e;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(t) {
    if (this.length != t.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return sp(this, (e, i, s, o, u) => t = t.replace(s, s + (i - e), u), !1), t;
  }
  mapDesc(t, e = !1) {
    return rp(this, t, e, !0);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(t) {
    let e = this.sections.slice(), i = [];
    for (let s = 0, o = 0; s < e.length; s += 2) {
      let u = e[s], c = e[s + 1];
      if (c >= 0) {
        e[s] = c, e[s + 1] = u;
        let h = s >> 1;
        for (; i.length < h; )
          i.push(Et.empty);
        i.push(u ? t.slice(o, o + u) : Et.empty);
      }
      o += u;
    }
    return new ue(e, i);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(t) {
    return this.empty ? t : t.empty ? this : SS(this, t, !0);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(t, e = !1) {
    return t.empty ? this : rp(this, t, e, !0);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(t, e = !1) {
    sp(this, t, e);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return Gi.create(this.sections);
  }
  /**
  @internal
  */
  filter(t) {
    let e = [], i = [], s = [], o = new Co(this);
    t: for (let u = 0, c = 0; ; ) {
      let h = u == t.length ? 1e9 : t[u++];
      for (; c < h || c == h && o.len == 0; ) {
        if (o.done)
          break t;
        let m = Math.min(o.len, h - c);
        Me(s, m, -1);
        let O = o.ins == -1 ? -1 : o.off == 0 ? o.ins : 0;
        Me(e, m, O), O > 0 && el(i, e, o.text), o.forward(m), c += m;
      }
      let p = t[u++];
      for (; c < p; ) {
        if (o.done)
          break t;
        let m = Math.min(o.len, p - c);
        Me(e, m, -1), Me(s, m, o.ins == -1 ? -1 : o.off == 0 ? o.ins : 0), o.forward(m), c += m;
      }
    }
    return {
      changes: new ue(e, i),
      filtered: Gi.create(s)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let t = [];
    for (let e = 0; e < this.sections.length; e += 2) {
      let i = this.sections[e], s = this.sections[e + 1];
      s < 0 ? t.push(i) : s == 0 ? t.push([i]) : t.push([i].concat(this.inserted[e >> 1].toJSON()));
    }
    return t;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(t, e, i) {
    let s = [], o = [], u = 0, c = null;
    function h(m = !1) {
      if (!m && !s.length)
        return;
      u < e && Me(s, e - u, -1);
      let O = new ue(s, o);
      c = c ? c.compose(O.map(c)) : O, s = [], o = [], u = 0;
    }
    function p(m) {
      if (Array.isArray(m))
        for (let O of m)
          p(O);
      else if (m instanceof ue) {
        if (m.length != e)
          throw new RangeError(`Mismatched change set length (got ${m.length}, expected ${e})`);
        h(), c = c ? c.compose(m.map(c)) : m;
      } else {
        let { from: O, to: y = O, insert: S } = m;
        if (O > y || O < 0 || y > e)
          throw new RangeError(`Invalid change range ${O} to ${y} (in doc of length ${e})`);
        let x = S ? typeof S == "string" ? Et.of(S.split(i || lp)) : S : Et.empty, w = x.length;
        if (O == y && w == 0)
          return;
        O < u && h(), O > u && Me(s, O - u, -1), Me(s, y - O, w), el(o, s, x), u = y;
      }
    }
    return p(t), h(!c), c;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(t) {
    return new ue(t ? [t, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(t) {
    if (!Array.isArray(t))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let e = [], i = [];
    for (let s = 0; s < t.length; s++) {
      let o = t[s];
      if (typeof o == "number")
        e.push(o, -1);
      else {
        if (!Array.isArray(o) || typeof o[0] != "number" || o.some((u, c) => c && typeof u != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (o.length == 1)
          e.push(o[0], 0);
        else {
          for (; i.length < s; )
            i.push(Et.empty);
          i[s] = Et.of(o.slice(1)), e.push(o[0], i[s].length);
        }
      }
    }
    return new ue(e, i);
  }
  /**
  @internal
  */
  static createSet(t, e) {
    return new ue(t, e);
  }
}
function Me(n, t, e, i = !1) {
  if (t == 0 && e <= 0)
    return;
  let s = n.length - 2;
  s >= 0 && e <= 0 && e == n[s + 1] ? n[s] += t : s >= 0 && t == 0 && n[s] == 0 ? n[s + 1] += e : i ? (n[s] += t, n[s + 1] += e) : n.push(t, e);
}
function el(n, t, e) {
  if (e.length == 0)
    return;
  let i = t.length - 2 >> 1;
  if (i < n.length)
    n[n.length - 1] = n[n.length - 1].append(e);
  else {
    for (; n.length < i; )
      n.push(Et.empty);
    n.push(e);
  }
}
function sp(n, t, e) {
  let i = n.inserted;
  for (let s = 0, o = 0, u = 0; u < n.sections.length; ) {
    let c = n.sections[u++], h = n.sections[u++];
    if (h < 0)
      s += c, o += c;
    else {
      let p = s, m = o, O = Et.empty;
      for (; p += c, m += h, h && i && (O = O.append(i[u - 2 >> 1])), !(e || u == n.sections.length || n.sections[u + 1] < 0); )
        c = n.sections[u++], h = n.sections[u++];
      t(s, p, o, m, O), s = p, o = m;
    }
  }
}
function rp(n, t, e, i = !1) {
  let s = [], o = i ? [] : null, u = new Co(n), c = new Co(t);
  for (let h = -1; ; ) {
    if (u.done && c.len || c.done && u.len)
      throw new Error("Mismatched change set lengths");
    if (u.ins == -1 && c.ins == -1) {
      let p = Math.min(u.len, c.len);
      Me(s, p, -1), u.forward(p), c.forward(p);
    } else if (c.ins >= 0 && (u.ins < 0 || h == u.i || u.off == 0 && (c.len < u.len || c.len == u.len && !e))) {
      let p = c.len;
      for (Me(s, c.ins, -1); p; ) {
        let m = Math.min(u.len, p);
        u.ins >= 0 && h < u.i && u.len <= m && (Me(s, 0, u.ins), o && el(o, s, u.text), h = u.i), u.forward(m), p -= m;
      }
      c.next();
    } else if (u.ins >= 0) {
      let p = 0, m = u.len;
      for (; m; )
        if (c.ins == -1) {
          let O = Math.min(m, c.len);
          p += O, m -= O, c.forward(O);
        } else if (c.ins == 0 && c.len < m)
          m -= c.len, c.next();
        else
          break;
      Me(s, p, h < u.i ? u.ins : 0), o && h < u.i && el(o, s, u.text), h = u.i, u.forward(u.len - m);
    } else {
      if (u.done && c.done)
        return o ? ue.createSet(s, o) : Gi.create(s);
      throw new Error("Mismatched change set lengths");
    }
  }
}
function SS(n, t, e = !1) {
  let i = [], s = e ? [] : null, o = new Co(n), u = new Co(t);
  for (let c = !1; ; ) {
    if (o.done && u.done)
      return s ? ue.createSet(i, s) : Gi.create(i);
    if (o.ins == 0)
      Me(i, o.len, 0, c), o.next();
    else if (u.len == 0 && !u.done)
      Me(i, 0, u.ins, c), s && el(s, i, u.text), u.next();
    else {
      if (o.done || u.done)
        throw new Error("Mismatched change set lengths");
      {
        let h = Math.min(o.len2, u.len), p = i.length;
        if (o.ins == -1) {
          let m = u.ins == -1 ? -1 : u.off ? 0 : u.ins;
          Me(i, h, m, c), s && m && el(s, i, u.text);
        } else u.ins == -1 ? (Me(i, o.off ? 0 : o.len, h, c), s && el(s, i, o.textBit(h))) : (Me(i, o.off ? 0 : o.len, u.off ? 0 : u.ins, c), s && !u.off && el(s, i, u.text));
        c = (o.ins > h || u.ins >= 0 && u.len > h) && (c || i.length > p), o.forward2(h), u.forward(h);
      }
    }
  }
}
class Co {
  constructor(t) {
    this.set = t, this.i = 0, this.next();
  }
  next() {
    let { sections: t } = this.set;
    this.i < t.length ? (this.len = t[this.i++], this.ins = t[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: t } = this.set, e = this.i - 2 >> 1;
    return e >= t.length ? Et.empty : t[e];
  }
  textBit(t) {
    let { inserted: e } = this.set, i = this.i - 2 >> 1;
    return i >= e.length && !t ? Et.empty : e[i].slice(this.off, t == null ? void 0 : this.off + t);
  }
  forward(t) {
    t == this.len ? this.next() : (this.len -= t, this.off += t);
  }
  forward2(t) {
    this.ins == -1 ? this.forward(t) : t == this.ins ? this.next() : (this.ins -= t, this.off += t);
  }
}
class Nl {
  constructor(t, e, i) {
    this.from = t, this.to = e, this.flags = i;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let t = this.flags & 7;
    return t == 7 ? null : t;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let t = this.flags >> 6;
    return t == 16777215 ? void 0 : t;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(t, e = -1) {
    let i, s;
    return this.empty ? i = s = t.mapPos(this.from, e) : (i = t.mapPos(this.from, 1), s = t.mapPos(this.to, -1)), i == this.from && s == this.to ? this : new Nl(i, s, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(t, e = t) {
    if (t <= this.anchor && e >= this.anchor)
      return X.range(t, e);
    let i = Math.abs(t - this.anchor) > Math.abs(e - this.anchor) ? t : e;
    return X.range(this.anchor, i);
  }
  /**
  Compare this range to another range.
  */
  eq(t, e = !1) {
    return this.anchor == t.anchor && this.head == t.head && (!e || !this.empty || this.assoc == t.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(t) {
    if (!t || typeof t.anchor != "number" || typeof t.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return X.range(t.anchor, t.head);
  }
  /**
  @internal
  */
  static create(t, e, i) {
    return new Nl(t, e, i);
  }
}
class X {
  constructor(t, e) {
    this.ranges = t, this.mainIndex = e;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(t, e = -1) {
    return t.empty ? this : X.create(this.ranges.map((i) => i.map(t, e)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(t, e = !1) {
    if (this.ranges.length != t.ranges.length || this.mainIndex != t.mainIndex)
      return !1;
    for (let i = 0; i < this.ranges.length; i++)
      if (!this.ranges[i].eq(t.ranges[i], e))
        return !1;
    return !0;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new X([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(t, e = !0) {
    return X.create([t].concat(this.ranges), e ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(t, e = this.mainIndex) {
    let i = this.ranges.slice();
    return i[e] = t, X.create(i, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((t) => t.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(t) {
    if (!t || !Array.isArray(t.ranges) || typeof t.main != "number" || t.main >= t.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new X(t.ranges.map((e) => Nl.fromJSON(e)), t.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(t, e = t) {
    return new X([X.range(t, e)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(t, e = 0) {
    if (t.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let i = 0, s = 0; s < t.length; s++) {
      let o = t[s];
      if (o.empty ? o.from <= i : o.from < i)
        return X.normalized(t.slice(), e);
      i = o.to;
    }
    return new X(t, e);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(t, e = 0, i, s) {
    return Nl.create(t, t, (e == 0 ? 0 : e < 0 ? 8 : 16) | (i == null ? 7 : Math.min(6, i)) | (s ?? 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(t, e, i, s) {
    let o = (i ?? 16777215) << 6 | (s == null ? 7 : Math.min(6, s));
    return e < t ? Nl.create(e, t, 48 | o) : Nl.create(t, e, (e > t ? 8 : 0) | o);
  }
  /**
  @internal
  */
  static normalized(t, e = 0) {
    let i = t[e];
    t.sort((s, o) => s.from - o.from), e = t.indexOf(i);
    for (let s = 1; s < t.length; s++) {
      let o = t[s], u = t[s - 1];
      if (o.empty ? o.from <= u.to : o.from < u.to) {
        let c = u.from, h = Math.max(o.to, u.to);
        s <= e && e--, t.splice(--s, 2, o.anchor > o.head ? X.range(h, c) : X.range(c, h));
      }
    }
    return new X(t, e);
  }
}
function bS(n, t) {
  for (let e of n.ranges)
    if (e.to > t)
      throw new RangeError("Selection points outside of document");
}
let lm = 0;
class lt {
  constructor(t, e, i, s, o) {
    this.combine = t, this.compareInput = e, this.compare = i, this.isStatic = s, this.id = lm++, this.default = t([]), this.extensions = typeof o == "function" ? o(this) : o;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(t = {}) {
    return new lt(t.combine || ((e) => e), t.compareInput || ((e, i) => e === i), t.compare || (t.combine ? (e, i) => e === i : sm), !!t.static, t.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(t) {
    return new Xu([], this, 0, t);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(t, e) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Xu(t, this, 1, e);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(t, e) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Xu(t, this, 2, e);
  }
  from(t, e) {
    return e || (e = (i) => i), this.compute([t], (i) => e(i.field(t)));
  }
}
function sm(n, t) {
  return n == t || n.length == t.length && n.every((e, i) => e === t[i]);
}
class Xu {
  constructor(t, e, i, s) {
    this.dependencies = t, this.facet = e, this.type = i, this.value = s, this.id = lm++;
  }
  dynamicSlot(t) {
    var e;
    let i = this.value, s = this.facet.compareInput, o = this.id, u = t[o] >> 1, c = this.type == 2, h = !1, p = !1, m = [];
    for (let O of this.dependencies)
      O == "doc" ? h = !0 : O == "selection" ? p = !0 : (((e = t[O.id]) !== null && e !== void 0 ? e : 1) & 1) == 0 && m.push(t[O.id]);
    return {
      create(O) {
        return O.values[u] = i(O), 1;
      },
      update(O, y) {
        if (h && y.docChanged || p && (y.docChanged || y.selection) || op(O, m)) {
          let S = i(O);
          if (c ? !i1(S, O.values[u], s) : !s(S, O.values[u]))
            return O.values[u] = S, 1;
        }
        return 0;
      },
      reconfigure: (O, y) => {
        let S, x = y.config.address[o];
        if (x != null) {
          let w = rc(y, x);
          if (this.dependencies.every((C) => C instanceof lt ? y.facet(C) === O.facet(C) : C instanceof Oe ? y.field(C, !1) == O.field(C, !1) : !0) || (c ? i1(S = i(O), w, s) : s(S = i(O), w)))
            return O.values[u] = w, 0;
        } else
          S = i(O);
        return O.values[u] = S, 1;
      }
    };
  }
}
function i1(n, t, e) {
  if (n.length != t.length)
    return !1;
  for (let i = 0; i < n.length; i++)
    if (!e(n[i], t[i]))
      return !1;
  return !0;
}
function op(n, t) {
  let e = !1;
  for (let i of t)
    xo(n, i) & 1 && (e = !0);
  return e;
}
function J2(n, t, e) {
  let i = e.map((h) => n[h.id]), s = e.map((h) => h.type), o = i.filter((h) => !(h & 1)), u = n[t.id] >> 1;
  function c(h) {
    let p = [];
    for (let m = 0; m < i.length; m++) {
      let O = rc(h, i[m]);
      if (s[m] == 2)
        for (let y of O)
          p.push(y);
      else
        p.push(O);
    }
    return t.combine(p);
  }
  return {
    create(h) {
      for (let p of i)
        xo(h, p);
      return h.values[u] = c(h), 1;
    },
    update(h, p) {
      if (!op(h, o))
        return 0;
      let m = c(h);
      return t.compare(m, h.values[u]) ? 0 : (h.values[u] = m, 1);
    },
    reconfigure(h, p) {
      let m = op(h, i), O = p.config.facets[t.id], y = p.facet(t);
      if (O && !m && sm(e, O))
        return h.values[u] = y, 0;
      let S = c(h);
      return t.compare(S, y) ? (h.values[u] = y, 0) : (h.values[u] = S, 1);
    }
  };
}
const gu = /* @__PURE__ */ lt.define({ static: !0 });
class Oe {
  constructor(t, e, i, s, o) {
    this.id = t, this.createF = e, this.updateF = i, this.compareF = s, this.spec = o, this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(t) {
    let e = new Oe(lm++, t.create, t.update, t.compare || ((i, s) => i === s), t);
    return t.provide && (e.provides = t.provide(e)), e;
  }
  create(t) {
    let e = t.facet(gu).find((i) => i.field == this);
    return ((e == null ? void 0 : e.create) || this.createF)(t);
  }
  /**
  @internal
  */
  slot(t) {
    let e = t[this.id] >> 1;
    return {
      create: (i) => (i.values[e] = this.create(i), 1),
      update: (i, s) => {
        let o = i.values[e], u = this.updateF(o, s);
        return this.compareF(o, u) ? 0 : (i.values[e] = u, 1);
      },
      reconfigure: (i, s) => {
        let o = i.facet(gu), u = s.facet(gu), c;
        return (c = o.find((h) => h.field == this)) && c != u.find((h) => h.field == this) ? (i.values[e] = c.create(i), 1) : s.config.address[this.id] != null ? (i.values[e] = s.field(this), 0) : (i.values[e] = this.create(i), 1);
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(t) {
    return [this, gu.of({ field: this, create: t })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
}
const _l = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function ro(n) {
  return (t) => new xS(t, n);
}
const fl = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ ro(_l.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ ro(_l.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ ro(_l.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ ro(_l.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ ro(_l.lowest)
};
class xS {
  constructor(t, e) {
    this.inner = t, this.prec = e;
  }
}
class zc {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(t) {
    return new ap(this, t);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(t) {
    return zc.reconfigure.of({ compartment: this, extension: t });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(t) {
    return t.config.compartments.get(this);
  }
}
class ap {
  constructor(t, e) {
    this.compartment = t, this.inner = e;
  }
}
class sc {
  constructor(t, e, i, s, o, u) {
    for (this.base = t, this.compartments = e, this.dynamicSlots = i, this.address = s, this.staticValues = o, this.facets = u, this.statusTemplate = []; this.statusTemplate.length < i.length; )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(t) {
    let e = this.address[t.id];
    return e == null ? t.default : this.staticValues[e >> 1];
  }
  static resolve(t, e, i) {
    let s = [], o = /* @__PURE__ */ Object.create(null), u = /* @__PURE__ */ new Map();
    for (let y of I2(t, e, u))
      y instanceof Oe ? s.push(y) : (o[y.facet.id] || (o[y.facet.id] = [])).push(y);
    let c = /* @__PURE__ */ Object.create(null), h = [], p = [];
    for (let y of s)
      c[y.id] = p.length << 1, p.push((S) => y.slot(S));
    let m = i == null ? void 0 : i.config.facets;
    for (let y in o) {
      let S = o[y], x = S[0].facet, w = m && m[y] || [];
      if (S.every(
        (C) => C.type == 0
        /* Provider.Static */
      ))
        if (c[x.id] = h.length << 1 | 1, sm(w, S))
          h.push(i.facet(x));
        else {
          let C = x.combine(S.map((M) => M.value));
          h.push(i && x.compare(C, i.facet(x)) ? i.facet(x) : C);
        }
      else {
        for (let C of S)
          C.type == 0 ? (c[C.id] = h.length << 1 | 1, h.push(C.value)) : (c[C.id] = p.length << 1, p.push((M) => C.dynamicSlot(M)));
        c[x.id] = p.length << 1, p.push((C) => J2(C, x, S));
      }
    }
    let O = p.map((y) => y(c));
    return new sc(t, u, O, c, h, o);
  }
}
function I2(n, t, e) {
  let i = [[], [], [], [], []], s = /* @__PURE__ */ new Map();
  function o(u, c) {
    let h = s.get(u);
    if (h != null) {
      if (h <= c)
        return;
      let p = i[h].indexOf(u);
      p > -1 && i[h].splice(p, 1), u instanceof ap && e.delete(u.compartment);
    }
    if (s.set(u, c), Array.isArray(u))
      for (let p of u)
        o(p, c);
    else if (u instanceof ap) {
      if (e.has(u.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let p = t.get(u.compartment) || u.inner;
      e.set(u.compartment, p), o(p, c);
    } else if (u instanceof xS)
      o(u.inner, u.prec);
    else if (u instanceof Oe)
      i[c].push(u), u.provides && o(u.provides, c);
    else if (u instanceof Xu)
      i[c].push(u), u.facet.extensions && o(u.facet.extensions, _l.default);
    else {
      let p = u.extension;
      if (!p)
        throw new Error(`Unrecognized extension value in extension set (${u}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      o(p, c);
    }
  }
  return o(n, _l.default), i.reduce((u, c) => u.concat(c));
}
function xo(n, t) {
  if (t & 1)
    return 2;
  let e = t >> 1, i = n.status[e];
  if (i == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (i & 2)
    return i;
  n.status[e] = 4;
  let s = n.computeSlot(n, n.config.dynamicSlots[e]);
  return n.status[e] = 2 | s;
}
function rc(n, t) {
  return t & 1 ? n.config.staticValues[t >> 1] : n.values[t >> 1];
}
const wS = /* @__PURE__ */ lt.define(), up = /* @__PURE__ */ lt.define({
  combine: (n) => n.some((t) => t),
  static: !0
}), TS = /* @__PURE__ */ lt.define({
  combine: (n) => n.length ? n[0] : void 0,
  static: !0
}), kS = /* @__PURE__ */ lt.define(), AS = /* @__PURE__ */ lt.define(), CS = /* @__PURE__ */ lt.define(), ES = /* @__PURE__ */ lt.define({
  combine: (n) => n.length ? n[0] : !1
});
class Zi {
  /**
  @internal
  */
  constructor(t, e) {
    this.type = t, this.value = e;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new tA();
  }
}
class tA {
  /**
  Create an instance of this annotation.
  */
  of(t) {
    return new Zi(this, t);
  }
}
class eA {
  /**
  @internal
  */
  constructor(t) {
    this.map = t;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(t) {
    return new yt(this, t);
  }
}
class yt {
  /**
  @internal
  */
  constructor(t, e) {
    this.type = t, this.value = e;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(t) {
    let e = this.type.map(this.value, t);
    return e === void 0 ? void 0 : e == this.value ? this : new yt(this.type, e);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(t) {
    return this.type == t;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(t = {}) {
    return new eA(t.map || ((e) => e));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(t, e) {
    if (!t.length)
      return t;
    let i = [];
    for (let s of t) {
      let o = s.map(e);
      o && i.push(o);
    }
    return i;
  }
}
yt.reconfigure = /* @__PURE__ */ yt.define();
yt.appendConfig = /* @__PURE__ */ yt.define();
class se {
  constructor(t, e, i, s, o, u) {
    this.startState = t, this.changes = e, this.selection = i, this.effects = s, this.annotations = o, this.scrollIntoView = u, this._doc = null, this._state = null, i && bS(i, e.newLength), o.some((c) => c.type == se.time) || (this.annotations = o.concat(se.time.of(Date.now())));
  }
  /**
  @internal
  */
  static create(t, e, i, s, o, u) {
    return new se(t, e, i, s, o, u);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(t) {
    for (let e of this.annotations)
      if (e.type == t)
        return e.value;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(t) {
    let e = this.annotation(se.userEvent);
    return !!(e && (e == t || e.length > t.length && e.slice(0, t.length) == t && e[t.length] == "."));
  }
}
se.time = /* @__PURE__ */ Zi.define();
se.userEvent = /* @__PURE__ */ Zi.define();
se.addToHistory = /* @__PURE__ */ Zi.define();
se.remote = /* @__PURE__ */ Zi.define();
function iA(n, t) {
  let e = [];
  for (let i = 0, s = 0; ; ) {
    let o, u;
    if (i < n.length && (s == t.length || t[s] >= n[i]))
      o = n[i++], u = n[i++];
    else if (s < t.length)
      o = t[s++], u = t[s++];
    else
      return e;
    !e.length || e[e.length - 1] < o ? e.push(o, u) : e[e.length - 1] < u && (e[e.length - 1] = u);
  }
}
function MS(n, t, e) {
  var i;
  let s, o, u;
  return e ? (s = t.changes, o = ue.empty(t.changes.length), u = n.changes.compose(t.changes)) : (s = t.changes.map(n.changes), o = n.changes.mapDesc(t.changes, !0), u = n.changes.compose(s)), {
    changes: u,
    selection: t.selection ? t.selection.map(o) : (i = n.selection) === null || i === void 0 ? void 0 : i.map(s),
    effects: yt.mapEffects(n.effects, s).concat(yt.mapEffects(t.effects, o)),
    annotations: n.annotations.length ? n.annotations.concat(t.annotations) : t.annotations,
    scrollIntoView: n.scrollIntoView || t.scrollIntoView
  };
}
function cp(n, t, e) {
  let i = t.selection, s = Vs(t.annotations);
  return t.userEvent && (s = s.concat(se.userEvent.of(t.userEvent))), {
    changes: t.changes instanceof ue ? t.changes : ue.of(t.changes || [], e, n.facet(TS)),
    selection: i && (i instanceof X ? i : X.single(i.anchor, i.head)),
    effects: Vs(t.effects),
    annotations: s,
    scrollIntoView: !!t.scrollIntoView
  };
}
function QS(n, t, e) {
  let i = cp(n, t.length ? t[0] : {}, n.doc.length);
  t.length && t[0].filter === !1 && (e = !1);
  for (let o = 1; o < t.length; o++) {
    t[o].filter === !1 && (e = !1);
    let u = !!t[o].sequential;
    i = MS(i, cp(n, t[o], u ? i.changes.newLength : n.doc.length), u);
  }
  let s = se.create(n, i.changes, i.selection, i.effects, i.annotations, i.scrollIntoView);
  return lA(e ? nA(s) : s);
}
function nA(n) {
  let t = n.startState, e = !0;
  for (let s of t.facet(kS)) {
    let o = s(n);
    if (o === !1) {
      e = !1;
      break;
    }
    Array.isArray(o) && (e = e === !0 ? o : iA(e, o));
  }
  if (e !== !0) {
    let s, o;
    if (e === !1)
      o = n.changes.invertedDesc, s = ue.empty(t.doc.length);
    else {
      let u = n.changes.filter(e);
      s = u.changes, o = u.filtered.mapDesc(u.changes).invertedDesc;
    }
    n = se.create(t, s, n.selection && n.selection.map(o), yt.mapEffects(n.effects, o), n.annotations, n.scrollIntoView);
  }
  let i = t.facet(AS);
  for (let s = i.length - 1; s >= 0; s--) {
    let o = i[s](n);
    o instanceof se ? n = o : Array.isArray(o) && o.length == 1 && o[0] instanceof se ? n = o[0] : n = QS(t, Vs(o), !1);
  }
  return n;
}
function lA(n) {
  let t = n.startState, e = t.facet(CS), i = n;
  for (let s = e.length - 1; s >= 0; s--) {
    let o = e[s](n);
    o && Object.keys(o).length && (i = MS(i, cp(t, o, n.changes.newLength), !0));
  }
  return i == n ? n : se.create(t, n.changes, n.selection, i.effects, i.annotations, i.scrollIntoView);
}
const sA = [];
function Vs(n) {
  return n == null ? sA : Array.isArray(n) ? n : [n];
}
var Yt = /* @__PURE__ */ function(n) {
  return n[n.Word = 0] = "Word", n[n.Space = 1] = "Space", n[n.Other = 2] = "Other", n;
}(Yt || (Yt = {}));
const rA = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let fp;
try {
  fp = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function oA(n) {
  if (fp)
    return fp.test(n);
  for (let t = 0; t < n.length; t++) {
    let e = n[t];
    if (/\w/.test(e) || e > "" && (e.toUpperCase() != e.toLowerCase() || rA.test(e)))
      return !0;
  }
  return !1;
}
function aA(n) {
  return (t) => {
    if (!/\S/.test(t))
      return Yt.Space;
    if (oA(t))
      return Yt.Word;
    for (let e = 0; e < n.length; e++)
      if (t.indexOf(n[e]) > -1)
        return Yt.Word;
    return Yt.Other;
  };
}
class At {
  constructor(t, e, i, s, o, u) {
    this.config = t, this.doc = e, this.selection = i, this.values = s, this.status = t.statusTemplate.slice(), this.computeSlot = o, u && (u._state = this);
    for (let c = 0; c < this.config.dynamicSlots.length; c++)
      xo(this, c << 1);
    this.computeSlot = null;
  }
  field(t, e = !0) {
    let i = this.config.address[t.id];
    if (i == null) {
      if (e)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return xo(this, i), rc(this, i);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...t) {
    return QS(this, t, !0);
  }
  /**
  @internal
  */
  applyTransaction(t) {
    let e = this.config, { base: i, compartments: s } = e;
    for (let c of t.effects)
      c.is(zc.reconfigure) ? (e && (s = /* @__PURE__ */ new Map(), e.compartments.forEach((h, p) => s.set(p, h)), e = null), s.set(c.value.compartment, c.value.extension)) : c.is(yt.reconfigure) ? (e = null, i = c.value) : c.is(yt.appendConfig) && (e = null, i = Vs(i).concat(c.value));
    let o;
    e ? o = t.startState.values.slice() : (e = sc.resolve(i, s, this), o = new At(e, this.doc, this.selection, e.dynamicSlots.map(() => null), (h, p) => p.reconfigure(h, this), null).values);
    let u = t.startState.facet(up) ? t.newSelection : t.newSelection.asSingle();
    new At(e, t.newDoc, u, o, (c, h) => h.update(c, t), t);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(t) {
    return typeof t == "string" && (t = this.toText(t)), this.changeByRange((e) => ({
      changes: { from: e.from, to: e.to, insert: t },
      range: X.cursor(e.from + t.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(t) {
    let e = this.selection, i = t(e.ranges[0]), s = this.changes(i.changes), o = [i.range], u = Vs(i.effects);
    for (let c = 1; c < e.ranges.length; c++) {
      let h = t(e.ranges[c]), p = this.changes(h.changes), m = p.map(s);
      for (let y = 0; y < c; y++)
        o[y] = o[y].map(m);
      let O = s.mapDesc(p, !0);
      o.push(h.range.map(O)), s = s.compose(m), u = yt.mapEffects(u, m).concat(yt.mapEffects(Vs(h.effects), O));
    }
    return {
      changes: s,
      selection: X.create(o, e.mainIndex),
      effects: u
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(t = []) {
    return t instanceof ue ? t : ue.of(t, this.doc.length, this.facet(At.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(t) {
    return Et.of(t.split(this.facet(At.lineSeparator) || lp));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(t = 0, e = this.doc.length) {
    return this.doc.sliceString(t, e, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(t) {
    let e = this.config.address[t.id];
    return e == null ? t.default : (xo(this, e), rc(this, e));
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(t) {
    let e = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (t)
      for (let i in t) {
        let s = t[i];
        s instanceof Oe && this.config.address[s.id] != null && (e[i] = s.spec.toJSON(this.field(t[i]), this));
      }
    return e;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(t, e = {}, i) {
    if (!t || typeof t.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let s = [];
    if (i) {
      for (let o in i)
        if (Object.prototype.hasOwnProperty.call(t, o)) {
          let u = i[o], c = t[o];
          s.push(u.init((h) => u.spec.fromJSON(c, h)));
        }
    }
    return At.create({
      doc: t.doc,
      selection: X.fromJSON(t.selection),
      extensions: e.extensions ? s.concat([e.extensions]) : s
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(t = {}) {
    let e = sc.resolve(t.extensions || [], /* @__PURE__ */ new Map()), i = t.doc instanceof Et ? t.doc : Et.of((t.doc || "").split(e.staticFacet(At.lineSeparator) || lp)), s = t.selection ? t.selection instanceof X ? t.selection : X.single(t.selection.anchor, t.selection.head) : X.single(0);
    return bS(s, i.length), e.staticFacet(up) || (s = s.asSingle()), new At(e, i, s, e.dynamicSlots.map(() => null), (o, u) => u.create(o), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(At.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(At.lineSeparator) || `
`;
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(ES);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(t, ...e) {
    for (let i of this.facet(At.phrases))
      if (Object.prototype.hasOwnProperty.call(i, t)) {
        t = i[t];
        break;
      }
    return e.length && (t = t.replace(/\$(\$|\d*)/g, (i, s) => {
      if (s == "$")
        return "$";
      let o = +(s || 1);
      return !o || o > e.length ? i : e[o - 1];
    })), t;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(t, e, i = -1) {
    let s = [];
    for (let o of this.facet(wS))
      for (let u of o(this, e, i))
        Object.prototype.hasOwnProperty.call(u, t) && s.push(u[t]);
    return s;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(t) {
    return aA(this.languageDataAt("wordChars", t).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(t) {
    let { text: e, from: i, length: s } = this.doc.lineAt(t), o = this.charCategorizer(t), u = t - i, c = t - i;
    for (; u > 0; ) {
      let h = Te(e, u, !1);
      if (o(e.slice(h, u)) != Yt.Word)
        break;
      u = h;
    }
    for (; c < s; ) {
      let h = Te(e, c);
      if (o(e.slice(c, h)) != Yt.Word)
        break;
      c = h;
    }
    return u == c ? null : X.range(u + i, c + i);
  }
}
At.allowMultipleSelections = up;
At.tabSize = /* @__PURE__ */ lt.define({
  combine: (n) => n.length ? n[0] : 4
});
At.lineSeparator = TS;
At.readOnly = ES;
At.phrases = /* @__PURE__ */ lt.define({
  compare(n, t) {
    let e = Object.keys(n), i = Object.keys(t);
    return e.length == i.length && e.every((s) => n[s] == t[s]);
  }
});
At.languageData = wS;
At.changeFilter = kS;
At.transactionFilter = AS;
At.transactionExtender = CS;
zc.reconfigure = /* @__PURE__ */ yt.define();
function Fi(n, t, e = {}) {
  let i = {};
  for (let s of n)
    for (let o of Object.keys(s)) {
      let u = s[o], c = i[o];
      if (c === void 0)
        i[o] = u;
      else if (!(c === u || u === void 0)) if (Object.hasOwnProperty.call(e, o))
        i[o] = e[o](c, u);
      else
        throw new Error("Config merge conflict for field " + o);
    }
  for (let s in t)
    i[s] === void 0 && (i[s] = t[s]);
  return i;
}
class Vl {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(t) {
    return this == t;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(t, e = t) {
    return hp.create(t, e, this);
  }
}
Vl.prototype.startSide = Vl.prototype.endSide = 0;
Vl.prototype.point = !1;
Vl.prototype.mapMode = we.TrackDel;
let hp = class RS {
  constructor(t, e, i) {
    this.from = t, this.to = e, this.value = i;
  }
  /**
  @internal
  */
  static create(t, e, i) {
    return new RS(t, e, i);
  }
};
function dp(n, t) {
  return n.from - t.from || n.value.startSide - t.value.startSide;
}
class rm {
  constructor(t, e, i, s) {
    this.from = t, this.to = e, this.value = i, this.maxPoint = s;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(t, e, i, s = 0) {
    let o = i ? this.to : this.from;
    for (let u = s, c = o.length; ; ) {
      if (u == c)
        return u;
      let h = u + c >> 1, p = o[h] - t || (i ? this.value[h].endSide : this.value[h].startSide) - e;
      if (h == u)
        return p >= 0 ? u : c;
      p >= 0 ? c = h : u = h + 1;
    }
  }
  between(t, e, i, s) {
    for (let o = this.findIndex(e, -1e9, !0), u = this.findIndex(i, 1e9, !1, o); o < u; o++)
      if (s(this.from[o] + t, this.to[o] + t, this.value[o]) === !1)
        return !1;
  }
  map(t, e) {
    let i = [], s = [], o = [], u = -1, c = -1;
    for (let h = 0; h < this.value.length; h++) {
      let p = this.value[h], m = this.from[h] + t, O = this.to[h] + t, y, S;
      if (m == O) {
        let x = e.mapPos(m, p.startSide, p.mapMode);
        if (x == null || (y = S = x, p.startSide != p.endSide && (S = e.mapPos(m, p.endSide), S < y)))
          continue;
      } else if (y = e.mapPos(m, p.startSide), S = e.mapPos(O, p.endSide), y > S || y == S && p.startSide > 0 && p.endSide <= 0)
        continue;
      (S - y || p.endSide - p.startSide) < 0 || (u < 0 && (u = y), p.point && (c = Math.max(c, S - y)), i.push(p), s.push(y - u), o.push(S - u));
    }
    return { mapped: i.length ? new rm(s, o, i, c) : null, pos: u };
  }
}
class Rt {
  constructor(t, e, i, s) {
    this.chunkPos = t, this.chunk = e, this.nextLayer = i, this.maxPoint = s;
  }
  /**
  @internal
  */
  static create(t, e, i, s) {
    return new Rt(t, e, i, s);
  }
  /**
  @internal
  */
  get length() {
    let t = this.chunk.length - 1;
    return t < 0 ? 0 : Math.max(this.chunkEnd(t), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let t = this.nextLayer.size;
    for (let e of this.chunk)
      t += e.value.length;
    return t;
  }
  /**
  @internal
  */
  chunkEnd(t) {
    return this.chunkPos[t] + this.chunk[t].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(t) {
    let { add: e = [], sort: i = !1, filterFrom: s = 0, filterTo: o = this.length } = t, u = t.filter;
    if (e.length == 0 && !u)
      return this;
    if (i && (e = e.slice().sort(dp)), this.isEmpty)
      return e.length ? Rt.of(e) : this;
    let c = new DS(this, null, -1).goto(0), h = 0, p = [], m = new Tn();
    for (; c.value || h < e.length; )
      if (h < e.length && (c.from - e[h].from || c.startSide - e[h].value.startSide) >= 0) {
        let O = e[h++];
        m.addInner(O.from, O.to, O.value) || p.push(O);
      } else c.rangeIndex == 1 && c.chunkIndex < this.chunk.length && (h == e.length || this.chunkEnd(c.chunkIndex) < e[h].from) && (!u || s > this.chunkEnd(c.chunkIndex) || o < this.chunkPos[c.chunkIndex]) && m.addChunk(this.chunkPos[c.chunkIndex], this.chunk[c.chunkIndex]) ? c.nextChunk() : ((!u || s > c.to || o < c.from || u(c.from, c.to, c.value)) && (m.addInner(c.from, c.to, c.value) || p.push(hp.create(c.from, c.to, c.value))), c.next());
    return m.finishInner(this.nextLayer.isEmpty && !p.length ? Rt.empty : this.nextLayer.update({ add: p, filter: u, filterFrom: s, filterTo: o }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(t) {
    if (t.empty || this.isEmpty)
      return this;
    let e = [], i = [], s = -1;
    for (let u = 0; u < this.chunk.length; u++) {
      let c = this.chunkPos[u], h = this.chunk[u], p = t.touchesRange(c, c + h.length);
      if (p === !1)
        s = Math.max(s, h.maxPoint), e.push(h), i.push(t.mapPos(c));
      else if (p === !0) {
        let { mapped: m, pos: O } = h.map(c, t);
        m && (s = Math.max(s, m.maxPoint), e.push(m), i.push(O));
      }
    }
    let o = this.nextLayer.map(t);
    return e.length == 0 ? o : new Rt(i, e, o || Rt.empty, s);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(t, e, i) {
    if (!this.isEmpty) {
      for (let s = 0; s < this.chunk.length; s++) {
        let o = this.chunkPos[s], u = this.chunk[s];
        if (e >= o && t <= o + u.length && u.between(o, t - o, e - o, i) === !1)
          return;
      }
      this.nextLayer.between(t, e, i);
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(t = 0) {
    return Eo.from([this]).goto(t);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(t, e = 0) {
    return Eo.from(t).goto(e);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(t, e, i, s, o = -1) {
    let u = t.filter((O) => O.maxPoint > 0 || !O.isEmpty && O.maxPoint >= o), c = e.filter((O) => O.maxPoint > 0 || !O.isEmpty && O.maxPoint >= o), h = n1(u, c, i), p = new oo(u, h, o), m = new oo(c, h, o);
    i.iterGaps((O, y, S) => l1(p, O, m, y, S, s)), i.empty && i.length == 0 && l1(p, 0, m, 0, 0, s);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(t, e, i = 0, s) {
    s == null && (s = 999999999);
    let o = t.filter((m) => !m.isEmpty && e.indexOf(m) < 0), u = e.filter((m) => !m.isEmpty && t.indexOf(m) < 0);
    if (o.length != u.length)
      return !1;
    if (!o.length)
      return !0;
    let c = n1(o, u), h = new oo(o, c, 0).goto(i), p = new oo(u, c, 0).goto(i);
    for (; ; ) {
      if (h.to != p.to || !pp(h.active, p.active) || h.point && (!p.point || !h.point.eq(p.point)))
        return !1;
      if (h.to > s)
        return !0;
      h.next(), p.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(t, e, i, s, o = -1) {
    let u = new oo(t, null, o).goto(e), c = e, h = u.openStart;
    for (; ; ) {
      let p = Math.min(u.to, i);
      if (u.point) {
        let m = u.activeForPoint(u.to), O = u.pointFrom < e ? m.length + 1 : u.point.startSide < 0 ? m.length : Math.min(m.length, h);
        s.point(c, p, u.point, m, O, u.pointRank), h = Math.min(u.openEnd(p), m.length);
      } else p > c && (s.span(c, p, u.active, h), h = u.openEnd(p));
      if (u.to > i)
        return h + (u.point && u.to > i ? 1 : 0);
      c = u.to, u.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(t, e = !1) {
    let i = new Tn();
    for (let s of t instanceof hp ? [t] : e ? uA(t) : t)
      i.add(s.from, s.to, s.value);
    return i.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(t) {
    if (!t.length)
      return Rt.empty;
    let e = t[t.length - 1];
    for (let i = t.length - 2; i >= 0; i--)
      for (let s = t[i]; s != Rt.empty; s = s.nextLayer)
        e = new Rt(s.chunkPos, s.chunk, e, Math.max(s.maxPoint, e.maxPoint));
    return e;
  }
}
Rt.empty = /* @__PURE__ */ new Rt([], [], null, -1);
function uA(n) {
  if (n.length > 1)
    for (let t = n[0], e = 1; e < n.length; e++) {
      let i = n[e];
      if (dp(t, i) > 0)
        return n.slice().sort(dp);
      t = i;
    }
  return n;
}
Rt.empty.nextLayer = Rt.empty;
class Tn {
  finishChunk(t) {
    this.chunks.push(new rm(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, t && (this.from = [], this.to = [], this.value = []);
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(t, e, i) {
    this.addInner(t, e, i) || (this.nextLayer || (this.nextLayer = new Tn())).add(t, e, i);
  }
  /**
  @internal
  */
  addInner(t, e, i) {
    let s = t - this.lastTo || i.startSide - this.last.endSide;
    if (s <= 0 && (t - this.lastFrom || i.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return s < 0 ? !1 : (this.from.length == 250 && this.finishChunk(!0), this.chunkStart < 0 && (this.chunkStart = t), this.from.push(t - this.chunkStart), this.to.push(e - this.chunkStart), this.last = i, this.lastFrom = t, this.lastTo = e, this.value.push(i), i.point && (this.maxPoint = Math.max(this.maxPoint, e - t)), !0);
  }
  /**
  @internal
  */
  addChunk(t, e) {
    if ((t - this.lastTo || e.value[0].startSide - this.last.endSide) < 0)
      return !1;
    this.from.length && this.finishChunk(!0), this.setMaxPoint = Math.max(this.setMaxPoint, e.maxPoint), this.chunks.push(e), this.chunkPos.push(t);
    let i = e.value.length - 1;
    return this.last = e.value[i], this.lastFrom = e.from[i] + t, this.lastTo = e.to[i] + t, !0;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(Rt.empty);
  }
  /**
  @internal
  */
  finishInner(t) {
    if (this.from.length && this.finishChunk(!1), this.chunks.length == 0)
      return t;
    let e = Rt.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(t) : t, this.setMaxPoint);
    return this.from = null, e;
  }
}
function n1(n, t, e) {
  let i = /* @__PURE__ */ new Map();
  for (let o of n)
    for (let u = 0; u < o.chunk.length; u++)
      o.chunk[u].maxPoint <= 0 && i.set(o.chunk[u], o.chunkPos[u]);
  let s = /* @__PURE__ */ new Set();
  for (let o of t)
    for (let u = 0; u < o.chunk.length; u++) {
      let c = i.get(o.chunk[u]);
      c != null && (e ? e.mapPos(c) : c) == o.chunkPos[u] && !(e != null && e.touchesRange(c, c + o.chunk[u].length)) && s.add(o.chunk[u]);
    }
  return s;
}
class DS {
  constructor(t, e, i, s = 0) {
    this.layer = t, this.skip = e, this.minPoint = i, this.rank = s;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(t, e = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(t, e, !1), this;
  }
  gotoInner(t, e, i) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let s = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(s) || this.layer.chunkEnd(this.chunkIndex) < t || s.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, i = !1;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let s = this.layer.chunk[this.chunkIndex].findIndex(t - this.layer.chunkPos[this.chunkIndex], e, !0);
      (!i || this.rangeIndex < s) && this.setRangeIndex(s);
    }
    this.next();
  }
  forward(t, e) {
    (this.to - t || this.endSide - e) < 0 && this.gotoInner(t, e, !0);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let t = this.layer.chunkPos[this.chunkIndex], e = this.layer.chunk[this.chunkIndex], i = t + e.from[this.rangeIndex];
        if (this.from = i, this.to = t + e.to[this.rangeIndex], this.value = e.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(t) {
    if (t == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = t;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(t) {
    return this.from - t.from || this.startSide - t.startSide || this.rank - t.rank || this.to - t.to || this.endSide - t.endSide;
  }
}
class Eo {
  constructor(t) {
    this.heap = t;
  }
  static from(t, e = null, i = -1) {
    let s = [];
    for (let o = 0; o < t.length; o++)
      for (let u = t[o]; !u.isEmpty; u = u.nextLayer)
        u.maxPoint >= i && s.push(new DS(u, e, i, o));
    return s.length == 1 ? s[0] : new Eo(s);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(t, e = -1e9) {
    for (let i of this.heap)
      i.goto(t, e);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      vd(this.heap, i);
    return this.next(), this;
  }
  forward(t, e) {
    for (let i of this.heap)
      i.forward(t, e);
    for (let i = this.heap.length >> 1; i >= 0; i--)
      vd(this.heap, i);
    (this.to - t || this.value.endSide - e) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let t = this.heap[0];
      this.from = t.from, this.to = t.to, this.value = t.value, this.rank = t.rank, t.value && t.next(), vd(this.heap, 0);
    }
  }
}
function vd(n, t) {
  for (let e = n[t]; ; ) {
    let i = (t << 1) + 1;
    if (i >= n.length)
      break;
    let s = n[i];
    if (i + 1 < n.length && s.compare(n[i + 1]) >= 0 && (s = n[i + 1], i++), e.compare(s) < 0)
      break;
    n[i] = e, n[t] = s, t = i;
  }
}
class oo {
  constructor(t, e, i) {
    this.minPoint = i, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = Eo.from(t, e, i);
  }
  goto(t, e = -1e9) {
    return this.cursor.goto(t, e), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = t, this.endSide = e, this.openStart = -1, this.next(), this;
  }
  forward(t, e) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - t || this.active[this.minActive].endSide - e) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(t, e);
  }
  removeActive(t) {
    Ou(this.active, t), Ou(this.activeTo, t), Ou(this.activeRank, t), this.minActive = s1(this.active, this.activeTo);
  }
  addActive(t) {
    let e = 0, { value: i, to: s, rank: o } = this.cursor;
    for (; e < this.activeRank.length && (o - this.activeRank[e] || s - this.activeTo[e]) > 0; )
      e++;
    yu(this.active, e, i), yu(this.activeTo, e, s), yu(this.activeRank, e, o), t && yu(t, e, this.cursor.from), this.minActive = s1(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let t = this.to, e = this.point;
    this.point = null;
    let i = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let s = this.minActive;
      if (s > -1 && (this.activeTo[s] - this.cursor.from || this.active[s].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[s] > t) {
          this.to = this.activeTo[s], this.endSide = this.active[s].endSide;
          break;
        }
        this.removeActive(s), i && Ou(i, s);
      } else if (this.cursor.value)
        if (this.cursor.from > t) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let o = this.cursor.value;
          if (!o.point)
            this.addActive(i), this.cursor.next();
          else if (e && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = o, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = o.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (i) {
      this.openStart = 0;
      for (let s = i.length - 1; s >= 0 && i[s] < t; s--)
        this.openStart++;
    }
  }
  activeForPoint(t) {
    if (!this.active.length)
      return this.active;
    let e = [];
    for (let i = this.active.length - 1; i >= 0 && !(this.activeRank[i] < this.pointRank); i--)
      (this.activeTo[i] > t || this.activeTo[i] == t && this.active[i].endSide >= this.point.endSide) && e.push(this.active[i]);
    return e.reverse();
  }
  openEnd(t) {
    let e = 0;
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > t; i--)
      e++;
    return e;
  }
}
function l1(n, t, e, i, s, o) {
  n.goto(t), e.goto(i);
  let u = i + s, c = i, h = i - t;
  for (; ; ) {
    let p = n.to + h - e.to, m = p || n.endSide - e.endSide, O = m < 0 ? n.to + h : e.to, y = Math.min(O, u);
    if (n.point || e.point ? n.point && e.point && (n.point == e.point || n.point.eq(e.point)) && pp(n.activeForPoint(n.to), e.activeForPoint(e.to)) || o.comparePoint(c, y, n.point, e.point) : y > c && !pp(n.active, e.active) && o.compareRange(c, y, n.active, e.active), O > u)
      break;
    (p || n.openEnd != e.openEnd) && o.boundChange && o.boundChange(O), c = O, m <= 0 && n.next(), m >= 0 && e.next();
  }
}
function pp(n, t) {
  if (n.length != t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (n[e] != t[e] && !n[e].eq(t[e]))
      return !1;
  return !0;
}
function Ou(n, t) {
  for (let e = t, i = n.length - 1; e < i; e++)
    n[e] = n[e + 1];
  n.pop();
}
function yu(n, t, e) {
  for (let i = n.length - 1; i >= t; i--)
    n[i + 1] = n[i];
  n[t] = e;
}
function s1(n, t) {
  let e = -1, i = 1e9;
  for (let s = 0; s < t.length; s++)
    (t[s] - i || n[s].endSide - n[e].endSide) < 0 && (e = s, i = t[s]);
  return e;
}
function er(n, t, e = n.length) {
  let i = 0;
  for (let s = 0; s < e && s < n.length; )
    n.charCodeAt(s) == 9 ? (i += t - i % t, s++) : (i++, s = Te(n, s));
  return i;
}
function mp(n, t, e, i) {
  for (let s = 0, o = 0; ; ) {
    if (o >= t)
      return s;
    if (s == n.length)
      break;
    o += n.charCodeAt(s) == 9 ? e - o % e : 1, s = Te(n, s);
  }
  return i === !0 ? -1 : n.length;
}
const gp = "ͼ", r1 = typeof Symbol > "u" ? "__" + gp : Symbol.for(gp), Op = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), o1 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class sl {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(t, e) {
    this.rules = [];
    let { finish: i } = e || {};
    function s(u) {
      return /^@/.test(u) ? [u] : u.split(/,\s*/);
    }
    function o(u, c, h, p) {
      let m = [], O = /^@(\w+)\b/.exec(u[0]), y = O && O[1] == "keyframes";
      if (O && c == null) return h.push(u[0] + ";");
      for (let S in c) {
        let x = c[S];
        if (/&/.test(S))
          o(
            S.split(/,\s*/).map((w) => u.map((C) => w.replace(/&/, C))).reduce((w, C) => w.concat(C)),
            x,
            h
          );
        else if (x && typeof x == "object") {
          if (!O) throw new RangeError("The value of a property (" + S + ") should be a primitive value.");
          o(s(S), x, m, y);
        } else x != null && m.push(S.replace(/_.*/, "").replace(/[A-Z]/g, (w) => "-" + w.toLowerCase()) + ": " + x + ";");
      }
      (m.length || y) && h.push((i && !O && !p ? u.map(i) : u).join(", ") + " {" + m.join(" ") + "}");
    }
    for (let u in t) o(s(u), t[u], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`);
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let t = o1[r1] || 1;
    return o1[r1] = t + 1, gp + t.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(t, e, i) {
    let s = t[Op], o = i && i.nonce;
    s ? o && s.setNonce(o) : s = new cA(t, o), s.mount(Array.isArray(e) ? e : [e], t);
  }
}
let a1 = /* @__PURE__ */ new Map();
class cA {
  constructor(t, e) {
    let i = t.ownerDocument || t, s = i.defaultView;
    if (!t.head && t.adoptedStyleSheets && s.CSSStyleSheet) {
      let o = a1.get(i);
      if (o) return t[Op] = o;
      this.sheet = new s.CSSStyleSheet(), a1.set(i, this);
    } else
      this.styleTag = i.createElement("style"), e && this.styleTag.setAttribute("nonce", e);
    this.modules = [], t[Op] = this;
  }
  mount(t, e) {
    let i = this.sheet, s = 0, o = 0;
    for (let u = 0; u < t.length; u++) {
      let c = t[u], h = this.modules.indexOf(c);
      if (h < o && h > -1 && (this.modules.splice(h, 1), o--, h = -1), h == -1) {
        if (this.modules.splice(o++, 0, c), i) for (let p = 0; p < c.rules.length; p++)
          i.insertRule(c.rules[p], s++);
      } else {
        for (; o < h; ) s += this.modules[o++].rules.length;
        s += c.rules.length, o++;
      }
    }
    if (i)
      e.adoptedStyleSheets.indexOf(this.sheet) < 0 && (e.adoptedStyleSheets = [this.sheet, ...e.adoptedStyleSheets]);
    else {
      let u = "";
      for (let h = 0; h < this.modules.length; h++)
        u += this.modules[h].getRules() + `
`;
      this.styleTag.textContent = u;
      let c = e.head || e;
      this.styleTag.parentNode != c && c.insertBefore(this.styleTag, c.firstChild);
    }
  }
  setNonce(t) {
    this.styleTag && this.styleTag.getAttribute("nonce") != t && this.styleTag.setAttribute("nonce", t);
  }
}
var rl = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, Mo = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, fA = typeof navigator < "u" && /Mac/.test(navigator.platform), hA = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var xe = 0; xe < 10; xe++) rl[48 + xe] = rl[96 + xe] = String(xe);
for (var xe = 1; xe <= 24; xe++) rl[xe + 111] = "F" + xe;
for (var xe = 65; xe <= 90; xe++)
  rl[xe] = String.fromCharCode(xe + 32), Mo[xe] = String.fromCharCode(xe);
for (var Sd in rl) Mo.hasOwnProperty(Sd) || (Mo[Sd] = rl[Sd]);
function dA(n) {
  var t = fA && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || hA && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", e = !t && n.key || (n.shiftKey ? Mo : rl)[n.keyCode] || n.key || "Unidentified";
  return e == "Esc" && (e = "Escape"), e == "Del" && (e = "Delete"), e == "Left" && (e = "ArrowLeft"), e == "Up" && (e = "ArrowUp"), e == "Right" && (e = "ArrowRight"), e == "Down" && (e = "ArrowDown"), e;
}
function Qo(n) {
  let t;
  return n.nodeType == 11 ? t = n.getSelection ? n : n.ownerDocument : t = n, t.getSelection();
}
function yp(n, t) {
  return t ? n == t || n.contains(t.nodeType != 1 ? t.parentNode : t) : !1;
}
function $u(n, t) {
  if (!t.anchorNode)
    return !1;
  try {
    return yp(n, t.anchorNode);
  } catch {
    return !1;
  }
}
function Ys(n) {
  return n.nodeType == 3 ? Xl(n, 0, n.nodeValue.length).getClientRects() : n.nodeType == 1 ? n.getClientRects() : [];
}
function wo(n, t, e, i) {
  return e ? u1(n, t, e, i, -1) || u1(n, t, e, i, 1) : !1;
}
function Hl(n) {
  for (var t = 0; ; t++)
    if (n = n.previousSibling, !n)
      return t;
}
function oc(n) {
  return n.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n.nodeName);
}
function u1(n, t, e, i, s) {
  for (; ; ) {
    if (n == e && t == i)
      return !0;
    if (t == (s < 0 ? 0 : Yi(n))) {
      if (n.nodeName == "DIV")
        return !1;
      let o = n.parentNode;
      if (!o || o.nodeType != 1)
        return !1;
      t = Hl(n) + (s < 0 ? 0 : 1), n = o;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[t + (s < 0 ? -1 : 0)], n.nodeType == 1 && n.contentEditable == "false")
        return !1;
      t = s < 0 ? Yi(n) : 0;
    } else
      return !1;
  }
}
function Yi(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function $o(n, t) {
  let e = t ? n.left : n.right;
  return { left: e, right: e, top: n.top, bottom: n.bottom };
}
function pA(n) {
  let t = n.visualViewport;
  return t ? {
    left: 0,
    right: t.width,
    top: 0,
    bottom: t.height
  } : {
    left: 0,
    right: n.innerWidth,
    top: 0,
    bottom: n.innerHeight
  };
}
function zS(n, t) {
  let e = t.width / n.offsetWidth, i = t.height / n.offsetHeight;
  return (e > 0.995 && e < 1.005 || !isFinite(e) || Math.abs(t.width - n.offsetWidth) < 1) && (e = 1), (i > 0.995 && i < 1.005 || !isFinite(i) || Math.abs(t.height - n.offsetHeight) < 1) && (i = 1), { scaleX: e, scaleY: i };
}
function mA(n, t, e, i, s, o, u, c) {
  let h = n.ownerDocument, p = h.defaultView || window;
  for (let m = n, O = !1; m && !O; )
    if (m.nodeType == 1) {
      let y, S = m == h.body, x = 1, w = 1;
      if (S)
        y = pA(p);
      else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(m).position) && (O = !0), m.scrollHeight <= m.clientHeight && m.scrollWidth <= m.clientWidth) {
          m = m.assignedSlot || m.parentNode;
          continue;
        }
        let U = m.getBoundingClientRect();
        ({ scaleX: x, scaleY: w } = zS(m, U)), y = {
          left: U.left,
          right: U.left + m.clientWidth * x,
          top: U.top,
          bottom: U.top + m.clientHeight * w
        };
      }
      let C = 0, M = 0;
      if (s == "nearest")
        t.top < y.top ? (M = t.top - (y.top + u), e > 0 && t.bottom > y.bottom + M && (M = t.bottom - y.bottom + u)) : t.bottom > y.bottom && (M = t.bottom - y.bottom + u, e < 0 && t.top - M < y.top && (M = t.top - (y.top + u)));
      else {
        let U = t.bottom - t.top, W = y.bottom - y.top;
        M = (s == "center" && U <= W ? t.top + U / 2 - W / 2 : s == "start" || s == "center" && e < 0 ? t.top - u : t.bottom - W + u) - y.top;
      }
      if (i == "nearest" ? t.left < y.left ? (C = t.left - (y.left + o), e > 0 && t.right > y.right + C && (C = t.right - y.right + o)) : t.right > y.right && (C = t.right - y.right + o, e < 0 && t.left < y.left + C && (C = t.left - (y.left + o))) : C = (i == "center" ? t.left + (t.right - t.left) / 2 - (y.right - y.left) / 2 : i == "start" == c ? t.left - o : t.right - (y.right - y.left) + o) - y.left, C || M)
        if (S)
          p.scrollBy(C, M);
        else {
          let U = 0, W = 0;
          if (M) {
            let Z = m.scrollTop;
            m.scrollTop += M / w, W = (m.scrollTop - Z) * w;
          }
          if (C) {
            let Z = m.scrollLeft;
            m.scrollLeft += C / x, U = (m.scrollLeft - Z) * x;
          }
          t = {
            left: t.left - U,
            top: t.top - W,
            right: t.right - U,
            bottom: t.bottom - W
          }, U && Math.abs(U - C) < 1 && (i = "nearest"), W && Math.abs(W - M) < 1 && (s = "nearest");
        }
      if (S)
        break;
      (t.top < y.top || t.bottom > y.bottom || t.left < y.left || t.right > y.right) && (t = {
        left: Math.max(t.left, y.left),
        right: Math.min(t.right, y.right),
        top: Math.max(t.top, y.top),
        bottom: Math.min(t.bottom, y.bottom)
      }), m = m.assignedSlot || m.parentNode;
    } else if (m.nodeType == 11)
      m = m.host;
    else
      break;
}
function gA(n) {
  let t = n.ownerDocument, e, i;
  for (let s = n.parentNode; s && !(s == t.body || e && i); )
    if (s.nodeType == 1)
      !i && s.scrollHeight > s.clientHeight && (i = s), !e && s.scrollWidth > s.clientWidth && (e = s), s = s.assignedSlot || s.parentNode;
    else if (s.nodeType == 11)
      s = s.host;
    else
      break;
  return { x: e, y: i };
}
class OA {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(t) {
    return this.anchorNode == t.anchorNode && this.anchorOffset == t.anchorOffset && this.focusNode == t.focusNode && this.focusOffset == t.focusOffset;
  }
  setRange(t) {
    let { anchorNode: e, focusNode: i } = t;
    this.set(e, Math.min(t.anchorOffset, e ? Yi(e) : 0), i, Math.min(t.focusOffset, i ? Yi(i) : 0));
  }
  set(t, e, i, s) {
    this.anchorNode = t, this.anchorOffset = e, this.focusNode = i, this.focusOffset = s;
  }
}
let Ds = null;
function qS(n) {
  if (n.setActive)
    return n.setActive();
  if (Ds)
    return n.focus(Ds);
  let t = [];
  for (let e = n; e && (t.push(e, e.scrollTop, e.scrollLeft), e != e.ownerDocument); e = e.parentNode)
    ;
  if (n.focus(Ds == null ? {
    get preventScroll() {
      return Ds = { preventScroll: !0 }, !0;
    }
  } : void 0), !Ds) {
    Ds = !1;
    for (let e = 0; e < t.length; ) {
      let i = t[e++], s = t[e++], o = t[e++];
      i.scrollTop != s && (i.scrollTop = s), i.scrollLeft != o && (i.scrollLeft = o);
    }
  }
}
let c1;
function Xl(n, t, e = t) {
  let i = c1 || (c1 = document.createRange());
  return i.setEnd(n, e), i.setStart(n, t), i;
}
function Hs(n, t, e, i) {
  let s = { key: t, code: t, keyCode: e, which: e, cancelable: !0 };
  i && ({ altKey: s.altKey, ctrlKey: s.ctrlKey, shiftKey: s.shiftKey, metaKey: s.metaKey } = i);
  let o = new KeyboardEvent("keydown", s);
  o.synthetic = !0, n.dispatchEvent(o);
  let u = new KeyboardEvent("keyup", s);
  return u.synthetic = !0, n.dispatchEvent(u), o.defaultPrevented || u.defaultPrevented;
}
function yA(n) {
  for (; n; ) {
    if (n && (n.nodeType == 9 || n.nodeType == 11 && n.host))
      return n;
    n = n.assignedSlot || n.parentNode;
  }
  return null;
}
function _S(n) {
  for (; n.attributes.length; )
    n.removeAttributeNode(n.attributes[0]);
}
function vA(n, t) {
  let e = t.focusNode, i = t.focusOffset;
  if (!e || t.anchorNode != e || t.anchorOffset != i)
    return !1;
  for (i = Math.min(i, Yi(e)); ; )
    if (i) {
      if (e.nodeType != 1)
        return !1;
      let s = e.childNodes[i - 1];
      s.contentEditable == "false" ? i-- : (e = s, i = Yi(e));
    } else {
      if (e == n)
        return !0;
      i = Hl(e), e = e.parentNode;
    }
}
function BS(n) {
  return n.scrollTop > Math.max(1, n.scrollHeight - n.clientHeight - 4);
}
function NS(n, t) {
  for (let e = n, i = t; ; ) {
    if (e.nodeType == 3 && i > 0)
      return { node: e, offset: i };
    if (e.nodeType == 1 && i > 0) {
      if (e.contentEditable == "false")
        return null;
      e = e.childNodes[i - 1], i = Yi(e);
    } else if (e.parentNode && !oc(e))
      i = Hl(e), e = e.parentNode;
    else
      return null;
  }
}
function PS(n, t) {
  for (let e = n, i = t; ; ) {
    if (e.nodeType == 3 && i < e.nodeValue.length)
      return { node: e, offset: i };
    if (e.nodeType == 1 && i < e.childNodes.length) {
      if (e.contentEditable == "false")
        return null;
      e = e.childNodes[i], i = 0;
    } else if (e.parentNode && !oc(e))
      i = Hl(e) + 1, e = e.parentNode;
    else
      return null;
  }
}
class Qe {
  constructor(t, e, i = !0) {
    this.node = t, this.offset = e, this.precise = i;
  }
  static before(t, e) {
    return new Qe(t.parentNode, Hl(t), e);
  }
  static after(t, e) {
    return new Qe(t.parentNode, Hl(t) + 1, e);
  }
}
const om = [];
class Ht {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(t) {
    let e = this.posAtStart;
    for (let i of this.children) {
      if (i == t)
        return e;
      e += i.length + i.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(t) {
    return this.posBefore(t) + t.length;
  }
  sync(t, e) {
    if (this.flags & 2) {
      let i = this.dom, s = null, o;
      for (let u of this.children) {
        if (u.flags & 7) {
          if (!u.dom && (o = s ? s.nextSibling : i.firstChild)) {
            let c = Ht.get(o);
            (!c || !c.parent && c.canReuseDOM(u)) && u.reuseDOM(o);
          }
          u.sync(t, e), u.flags &= -8;
        }
        if (o = s ? s.nextSibling : i.firstChild, e && !e.written && e.node == i && o != u.dom && (e.written = !0), u.dom.parentNode == i)
          for (; o && o != u.dom; )
            o = f1(o);
        else
          i.insertBefore(u.dom, o);
        s = u.dom;
      }
      for (o = s ? s.nextSibling : i.firstChild, o && e && e.node == i && (e.written = !0); o; )
        o = f1(o);
    } else if (this.flags & 1)
      for (let i of this.children)
        i.flags & 7 && (i.sync(t, e), i.flags &= -8);
  }
  reuseDOM(t) {
  }
  localPosFromDOM(t, e) {
    let i;
    if (t == this.dom)
      i = this.dom.childNodes[e];
    else {
      let s = Yi(t) == 0 ? 0 : e == 0 ? -1 : 1;
      for (; ; ) {
        let o = t.parentNode;
        if (o == this.dom)
          break;
        s == 0 && o.firstChild != o.lastChild && (t == o.firstChild ? s = -1 : s = 1), t = o;
      }
      s < 0 ? i = t : i = t.nextSibling;
    }
    if (i == this.dom.firstChild)
      return 0;
    for (; i && !Ht.get(i); )
      i = i.nextSibling;
    if (!i)
      return this.length;
    for (let s = 0, o = 0; ; s++) {
      let u = this.children[s];
      if (u.dom == i)
        return o;
      o += u.length + u.breakAfter;
    }
  }
  domBoundsAround(t, e, i = 0) {
    let s = -1, o = -1, u = -1, c = -1;
    for (let h = 0, p = i, m = i; h < this.children.length; h++) {
      let O = this.children[h], y = p + O.length;
      if (p < t && y > e)
        return O.domBoundsAround(t, e, p);
      if (y >= t && s == -1 && (s = h, o = p), p > e && O.dom.parentNode == this.dom) {
        u = h, c = m;
        break;
      }
      m = y, p = y + O.breakAfter;
    }
    return {
      from: o,
      to: c < 0 ? i + this.length : c,
      startDOM: (s ? this.children[s - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: u < this.children.length && u >= 0 ? this.children[u].dom : null
    };
  }
  markDirty(t = !1) {
    this.flags |= 2, this.markParentsDirty(t);
  }
  markParentsDirty(t) {
    for (let e = this.parent; e; e = e.parent) {
      if (t && (e.flags |= 2), e.flags & 1)
        return;
      e.flags |= 1, t = !1;
    }
  }
  setParent(t) {
    this.parent != t && (this.parent = t, this.flags & 7 && this.markParentsDirty(!0));
  }
  setDOM(t) {
    this.dom != t && (this.dom && (this.dom.cmView = null), this.dom = t, t.cmView = this);
  }
  get rootView() {
    for (let t = this; ; ) {
      let e = t.parent;
      if (!e)
        return t;
      t = e;
    }
  }
  replaceChildren(t, e, i = om) {
    this.markDirty();
    for (let s = t; s < e; s++) {
      let o = this.children[s];
      o.parent == this && i.indexOf(o) < 0 && o.destroy();
    }
    i.length < 250 ? this.children.splice(t, e - t, ...i) : this.children = [].concat(this.children.slice(0, t), i, this.children.slice(e));
    for (let s = 0; s < i.length; s++)
      i[s].setParent(this);
  }
  ignoreMutation(t) {
    return !1;
  }
  ignoreEvent(t) {
    return !1;
  }
  childCursor(t = this.length) {
    return new LS(this.children, t, this.children.length);
  }
  childPos(t, e = 1) {
    return this.childCursor().findPos(t, e);
  }
  toString() {
    let t = this.constructor.name.replace("View", "");
    return t + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (t == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(t) {
    return t.cmView;
  }
  get isEditable() {
    return !0;
  }
  get isWidget() {
    return !1;
  }
  get isHidden() {
    return !1;
  }
  merge(t, e, i, s, o, u) {
    return !1;
  }
  become(t) {
    return !1;
  }
  canReuseDOM(t) {
    return t.constructor == this.constructor && !((this.flags | t.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let t of this.children)
      t.parent == this && t.destroy();
    this.parent = null;
  }
}
Ht.prototype.breakAfter = 0;
function f1(n) {
  let t = n.nextSibling;
  return n.parentNode.removeChild(n), t;
}
class LS {
  constructor(t, e, i) {
    this.children = t, this.pos = e, this.i = i, this.off = 0;
  }
  findPos(t, e = 1) {
    for (; ; ) {
      if (t > this.pos || t == this.pos && (e > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = t - this.pos, this;
      let i = this.children[--this.i];
      this.pos -= i.length + i.breakAfter;
    }
  }
}
function US(n, t, e, i, s, o, u, c, h) {
  let { children: p } = n, m = p.length ? p[t] : null, O = o.length ? o[o.length - 1] : null, y = O ? O.breakAfter : u;
  if (!(t == i && m && !u && !y && o.length < 2 && m.merge(e, s, o.length ? O : null, e == 0, c, h))) {
    if (i < p.length) {
      let S = p[i];
      S && (s < S.length || S.breakAfter && (O != null && O.breakAfter)) ? (t == i && (S = S.split(s), s = 0), !y && O && S.merge(0, s, O, !0, 0, h) ? o[o.length - 1] = S : ((s || S.children.length && !S.children[0].length) && S.merge(0, s, null, !1, 0, h), o.push(S))) : S != null && S.breakAfter && (O ? O.breakAfter = 1 : u = 1), i++;
    }
    for (m && (m.breakAfter = u, e > 0 && (!u && o.length && m.merge(e, m.length, o[0], !1, c, 0) ? m.breakAfter = o.shift().breakAfter : (e < m.length || m.children.length && m.children[m.children.length - 1].length == 0) && m.merge(e, m.length, null, !1, c, 0), t++)); t < i && o.length; )
      if (p[i - 1].become(o[o.length - 1]))
        i--, o.pop(), h = o.length ? 0 : c;
      else if (p[t].become(o[0]))
        t++, o.shift(), c = o.length ? 0 : h;
      else
        break;
    !o.length && t && i < p.length && !p[t - 1].breakAfter && p[i].merge(0, 0, p[t - 1], !1, c, h) && t--, (t < i || o.length) && n.replaceChildren(t, i, o);
  }
}
function VS(n, t, e, i, s, o) {
  let u = n.childCursor(), { i: c, off: h } = u.findPos(e, 1), { i: p, off: m } = u.findPos(t, -1), O = t - e;
  for (let y of i)
    O += y.length;
  n.length += O, US(n, p, m, c, h, i, 0, s, o);
}
let Ve = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, vp = typeof document < "u" ? document : { documentElement: { style: {} } };
const Sp = /* @__PURE__ */ /Edge\/(\d+)/.exec(Ve.userAgent), HS = /* @__PURE__ */ /MSIE \d/.test(Ve.userAgent), bp = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Ve.userAgent), qc = !!(HS || bp || Sp), h1 = !qc && /* @__PURE__ */ /gecko\/(\d+)/i.test(Ve.userAgent), bd = !qc && /* @__PURE__ */ /Chrome\/(\d+)/.exec(Ve.userAgent), SA = "webkitFontSmoothing" in vp.documentElement.style, XS = !qc && /* @__PURE__ */ /Apple Computer/.test(Ve.vendor), d1 = XS && (/* @__PURE__ */ /Mobile\/\w+/.test(Ve.userAgent) || Ve.maxTouchPoints > 2);
var st = {
  mac: d1 || /* @__PURE__ */ /Mac/.test(Ve.platform),
  windows: /* @__PURE__ */ /Win/.test(Ve.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(Ve.platform),
  ie: qc,
  ie_version: HS ? vp.documentMode || 6 : bp ? +bp[1] : Sp ? +Sp[1] : 0,
  gecko: h1,
  gecko_version: h1 ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(Ve.userAgent) || [0, 0])[1] : 0,
  chrome: !!bd,
  chrome_version: bd ? +bd[1] : 0,
  ios: d1,
  android: /* @__PURE__ */ /Android\b/.test(Ve.userAgent),
  safari: XS,
  webkit_version: SA ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(Ve.userAgent) || [0, 0])[1] : 0,
  tabSize: vp.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const bA = 256;
class Ci extends Ht {
  constructor(t) {
    super(), this.text = t;
  }
  get length() {
    return this.text.length;
  }
  createDOM(t) {
    this.setDOM(t || document.createTextNode(this.text));
  }
  sync(t, e) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (e && e.node == this.dom && (e.written = !0), this.dom.nodeValue = this.text);
  }
  reuseDOM(t) {
    t.nodeType == 3 && this.createDOM(t);
  }
  merge(t, e, i) {
    return this.flags & 8 || i && (!(i instanceof Ci) || this.length - (e - t) + i.length > bA || i.flags & 8) ? !1 : (this.text = this.text.slice(0, t) + (i ? i.text : "") + this.text.slice(e), this.markDirty(), !0);
  }
  split(t) {
    let e = new Ci(this.text.slice(t));
    return this.text = this.text.slice(0, t), this.markDirty(), e.flags |= this.flags & 8, e;
  }
  localPosFromDOM(t, e) {
    return t == this.dom ? e : e ? this.text.length : 0;
  }
  domAtPos(t) {
    return new Qe(this.dom, t);
  }
  domBoundsAround(t, e, i) {
    return { from: i, to: i + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(t, e) {
    return xA(this.dom, t, e);
  }
}
class kn extends Ht {
  constructor(t, e = [], i = 0) {
    super(), this.mark = t, this.children = e, this.length = i;
    for (let s of e)
      s.setParent(this);
  }
  setAttrs(t) {
    if (_S(t), this.mark.class && (t.className = this.mark.class), this.mark.attrs)
      for (let e in this.mark.attrs)
        t.setAttribute(e, this.mark.attrs[e]);
    return t;
  }
  canReuseDOM(t) {
    return super.canReuseDOM(t) && !((this.flags | t.flags) & 8);
  }
  reuseDOM(t) {
    t.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(t), this.flags |= 6);
  }
  sync(t, e) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(t, e);
  }
  merge(t, e, i, s, o, u) {
    return i && (!(i instanceof kn && i.mark.eq(this.mark)) || t && o <= 0 || e < this.length && u <= 0) ? !1 : (VS(this, t, e, i ? i.children.slice() : [], o - 1, u - 1), this.markDirty(), !0);
  }
  split(t) {
    let e = [], i = 0, s = -1, o = 0;
    for (let c of this.children) {
      let h = i + c.length;
      h > t && e.push(i < t ? c.split(t - i) : c), s < 0 && i >= t && (s = o), i = h, o++;
    }
    let u = this.length - t;
    return this.length = t, s > -1 && (this.children.length = s, this.markDirty()), new kn(this.mark, e, u);
  }
  domAtPos(t) {
    return $S(this, t);
  }
  coordsAt(t, e) {
    return WS(this, t, e);
  }
}
function xA(n, t, e) {
  let i = n.nodeValue.length;
  t > i && (t = i);
  let s = t, o = t, u = 0;
  t == 0 && e < 0 || t == i && e >= 0 ? st.chrome || st.gecko || (t ? (s--, u = 1) : o < i && (o++, u = -1)) : e < 0 ? s-- : o < i && o++;
  let c = Xl(n, s, o).getClientRects();
  if (!c.length)
    return null;
  let h = c[(u ? u < 0 : e >= 0) ? 0 : c.length - 1];
  return st.safari && !u && h.width == 0 && (h = Array.prototype.find.call(c, (p) => p.width) || h), u ? $o(h, u < 0) : h || null;
}
class il extends Ht {
  static create(t, e, i) {
    return new il(t, e, i);
  }
  constructor(t, e, i) {
    super(), this.widget = t, this.length = e, this.side = i, this.prevWidget = null;
  }
  split(t) {
    let e = il.create(this.widget, this.length - t, this.side);
    return this.length -= t, e;
  }
  sync(t) {
    (!this.dom || !this.widget.updateDOM(this.dom, t)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(t)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(t, e, i, s, o, u) {
    return i && (!(i instanceof il) || !this.widget.compare(i.widget) || t > 0 && o <= 0 || e < this.length && u <= 0) ? !1 : (this.length = t + (i ? i.length : 0) + (this.length - e), !0);
  }
  become(t) {
    return t instanceof il && t.side == this.side && this.widget.constructor == t.widget.constructor ? (this.widget.compare(t.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t.widget, this.length = t.length, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(t) {
    return this.widget.ignoreEvent(t);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Et.empty;
    let t = this;
    for (; t.parent; )
      t = t.parent;
    let { view: e } = t, i = e && e.state.doc, s = this.posAtStart;
    return i ? i.slice(s, s + this.length) : Et.empty;
  }
  domAtPos(t) {
    return (this.length ? t == 0 : this.side > 0) ? Qe.before(this.dom) : Qe.after(this.dom, t == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t, e) {
    let i = this.widget.coordsAt(this.dom, t, e);
    if (i)
      return i;
    let s = this.dom.getClientRects(), o = null;
    if (!s.length)
      return null;
    let u = this.side ? this.side < 0 : t > 0;
    for (let c = u ? s.length - 1 : 0; o = s[c], !(t > 0 ? c == 0 : c == s.length - 1 || o.top < o.bottom); c += u ? -1 : 1)
      ;
    return $o(o, !u);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Zs extends Ht {
  constructor(t) {
    super(), this.side = t;
  }
  get length() {
    return 0;
  }
  merge() {
    return !1;
  }
  become(t) {
    return t instanceof Zs && t.side == this.side;
  }
  split() {
    return new Zs(this.side);
  }
  sync() {
    if (!this.dom) {
      let t = document.createElement("img");
      t.className = "cm-widgetBuffer", t.setAttribute("aria-hidden", "true"), this.setDOM(t);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(t) {
    return this.side > 0 ? Qe.before(this.dom) : Qe.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Et.empty;
  }
  get isHidden() {
    return !0;
  }
}
Ci.prototype.children = il.prototype.children = Zs.prototype.children = om;
function $S(n, t) {
  let e = n.dom, { children: i } = n, s = 0;
  for (let o = 0; s < i.length; s++) {
    let u = i[s], c = o + u.length;
    if (!(c == o && u.getSide() <= 0)) {
      if (t > o && t < c && u.dom.parentNode == e)
        return u.domAtPos(t - o);
      if (t <= o)
        break;
      o = c;
    }
  }
  for (let o = s; o > 0; o--) {
    let u = i[o - 1];
    if (u.dom.parentNode == e)
      return u.domAtPos(u.length);
  }
  for (let o = s; o < i.length; o++) {
    let u = i[o];
    if (u.dom.parentNode == e)
      return u.domAtPos(0);
  }
  return new Qe(e, 0);
}
function jS(n, t, e) {
  let i, { children: s } = n;
  e > 0 && t instanceof kn && s.length && (i = s[s.length - 1]) instanceof kn && i.mark.eq(t.mark) ? jS(i, t.children[0], e - 1) : (s.push(t), t.setParent(n)), n.length += t.length;
}
function WS(n, t, e) {
  let i = null, s = -1, o = null, u = -1;
  function c(p, m) {
    for (let O = 0, y = 0; O < p.children.length && y <= m; O++) {
      let S = p.children[O], x = y + S.length;
      x >= m && (S.children.length ? c(S, m - y) : (!o || o.isHidden && (e > 0 || TA(o, S))) && (x > m || y == x && S.getSide() > 0) ? (o = S, u = m - y) : (y < m || y == x && S.getSide() < 0 && !S.isHidden) && (i = S, s = m - y)), y = x;
    }
  }
  c(n, t);
  let h = (e < 0 ? i : o) || i || o;
  return h ? h.coordsAt(Math.max(0, h == i ? s : u), e) : wA(n);
}
function wA(n) {
  let t = n.dom.lastChild;
  if (!t)
    return n.dom.getBoundingClientRect();
  let e = Ys(t);
  return e[e.length - 1] || null;
}
function TA(n, t) {
  let e = n.coordsAt(0, 1), i = t.coordsAt(0, 1);
  return e && i && i.top < e.bottom;
}
function xp(n, t) {
  for (let e in n)
    e == "class" && t.class ? t.class += " " + n.class : e == "style" && t.style ? t.style += ";" + n.style : t[e] = n[e];
  return t;
}
const p1 = /* @__PURE__ */ Object.create(null);
function ac(n, t, e) {
  if (n == t)
    return !0;
  n || (n = p1), t || (t = p1);
  let i = Object.keys(n), s = Object.keys(t);
  if (i.length - (e && i.indexOf(e) > -1 ? 1 : 0) != s.length - (e && s.indexOf(e) > -1 ? 1 : 0))
    return !1;
  for (let o of i)
    if (o != e && (s.indexOf(o) == -1 || n[o] !== t[o]))
      return !1;
  return !0;
}
function wp(n, t, e) {
  let i = !1;
  if (t)
    for (let s in t)
      e && s in e || (i = !0, s == "style" ? n.style.cssText = "" : n.removeAttribute(s));
  if (e)
    for (let s in e)
      t && t[s] == e[s] || (i = !0, s == "style" ? n.style.cssText = e[s] : n.setAttribute(s, e[s]));
  return i;
}
function kA(n) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let e = 0; e < n.attributes.length; e++) {
    let i = n.attributes[e];
    t[i.name] = i.value;
  }
  return t;
}
class Ki {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(t) {
    return !1;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(t, e) {
    return !1;
  }
  /**
  @internal
  */
  compare(t) {
    return this == t || this.constructor == t.constructor && this.eq(t);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(t) {
    return !0;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(t, e, i) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return !1;
  }
  /**
  @internal
  */
  get editable() {
    return !1;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(t) {
  }
}
var ze = /* @__PURE__ */ function(n) {
  return n[n.Text = 0] = "Text", n[n.WidgetBefore = 1] = "WidgetBefore", n[n.WidgetAfter = 2] = "WidgetAfter", n[n.WidgetRange = 3] = "WidgetRange", n;
}(ze || (ze = {}));
class ft extends Vl {
  constructor(t, e, i, s) {
    super(), this.startSide = t, this.endSide = e, this.widget = i, this.spec = s;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(t) {
    return new jo(t);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(t) {
    let e = Math.max(-1e4, Math.min(1e4, t.side || 0)), i = !!t.block;
    return e += i && !t.inlineOrder ? e > 0 ? 3e8 : -4e8 : e > 0 ? 1e8 : -1e8, new ol(t, e, e, i, t.widget || null, !1);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(t) {
    let e = !!t.block, i, s;
    if (t.isBlockGap)
      i = -5e8, s = 4e8;
    else {
      let { start: o, end: u } = GS(t, e);
      i = (o ? e ? -3e8 : -1 : 5e8) - 1, s = (u ? e ? 2e8 : 1 : -6e8) + 1;
    }
    return new ol(t, i, s, e, t.widget || null, !0);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(t) {
    return new Wo(t);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(t, e = !1) {
    return Rt.of(t, e);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1;
  }
}
ft.none = Rt.empty;
class jo extends ft {
  constructor(t) {
    let { start: e, end: i } = GS(t);
    super(e ? -1 : 5e8, i ? 1 : -6e8, null, t), this.tagName = t.tagName || "span", this.class = t.class || "", this.attrs = t.attributes || null;
  }
  eq(t) {
    var e, i;
    return this == t || t instanceof jo && this.tagName == t.tagName && (this.class || ((e = this.attrs) === null || e === void 0 ? void 0 : e.class)) == (t.class || ((i = t.attrs) === null || i === void 0 ? void 0 : i.class)) && ac(this.attrs, t.attrs, "class");
  }
  range(t, e = t) {
    if (t >= e)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(t, e);
  }
}
jo.prototype.point = !1;
class Wo extends ft {
  constructor(t) {
    super(-2e8, -2e8, null, t);
  }
  eq(t) {
    return t instanceof Wo && this.spec.class == t.spec.class && ac(this.spec.attributes, t.spec.attributes);
  }
  range(t, e = t) {
    if (e != t)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(t, e);
  }
}
Wo.prototype.mapMode = we.TrackBefore;
Wo.prototype.point = !0;
class ol extends ft {
  constructor(t, e, i, s, o, u) {
    super(e, i, o, t), this.block = s, this.isReplace = u, this.mapMode = s ? e <= 0 ? we.TrackBefore : we.TrackAfter : we.TrackDel;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? ze.WidgetRange : this.startSide <= 0 ? ze.WidgetBefore : ze.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(t) {
    return t instanceof ol && AA(this.widget, t.widget) && this.block == t.block && this.startSide == t.startSide && this.endSide == t.endSide;
  }
  range(t, e = t) {
    if (this.isReplace && (t > e || t == e && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && e != t)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(t, e);
  }
}
ol.prototype.point = !0;
function GS(n, t = !1) {
  let { inclusiveStart: e, inclusiveEnd: i } = n;
  return e == null && (e = n.inclusive), i == null && (i = n.inclusive), { start: e ?? t, end: i ?? t };
}
function AA(n, t) {
  return n == t || !!(n && t && n.compare(t));
}
function ju(n, t, e, i = 0) {
  let s = e.length - 1;
  s >= 0 && e[s] + i >= n ? e[s] = Math.max(e[s], t) : e.push(n, t);
}
class le extends Ht {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  // Consumes source
  merge(t, e, i, s, o, u) {
    if (i) {
      if (!(i instanceof le))
        return !1;
      this.dom || i.transferDOM(this);
    }
    return s && this.setDeco(i ? i.attrs : null), VS(this, t, e, i ? i.children.slice() : [], o, u), !0;
  }
  split(t) {
    let e = new le();
    if (e.breakAfter = this.breakAfter, this.length == 0)
      return e;
    let { i, off: s } = this.childPos(t);
    s && (e.append(this.children[i].split(s), 0), this.children[i].merge(s, this.children[i].length, null, !1, 0, 0), i++);
    for (let o = i; o < this.children.length; o++)
      e.append(this.children[o], 0);
    for (; i > 0 && this.children[i - 1].length == 0; )
      this.children[--i].destroy();
    return this.children.length = i, this.markDirty(), this.length = t, e;
  }
  transferDOM(t) {
    this.dom && (this.markDirty(), t.setDOM(this.dom), t.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(t) {
    ac(this.attrs, t) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = t);
  }
  append(t, e) {
    jS(this, t, e);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(t) {
    let e = t.spec.attributes, i = t.spec.class;
    e && (this.attrs = xp(e, this.attrs || {})), i && (this.attrs = xp({ class: i }, this.attrs || {}));
  }
  domAtPos(t) {
    return $S(this, t);
  }
  reuseDOM(t) {
    t.nodeName == "DIV" && (this.setDOM(t), this.flags |= 6);
  }
  sync(t, e) {
    var i;
    this.dom ? this.flags & 4 && (_S(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (wp(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(t, e);
    let s = this.dom.lastChild;
    for (; s && Ht.get(s) instanceof kn; )
      s = s.lastChild;
    if (!s || !this.length || s.nodeName != "BR" && ((i = Ht.get(s)) === null || i === void 0 ? void 0 : i.isEditable) == !1 && (!st.ios || !this.children.some((o) => o instanceof Ci))) {
      let o = document.createElement("BR");
      o.cmIgnore = !0, this.dom.appendChild(o);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let t = 0, e;
    for (let i of this.children) {
      if (!(i instanceof Ci) || /[^ -~]/.test(i.text))
        return null;
      let s = Ys(i.dom);
      if (s.length != 1)
        return null;
      t += s[0].width, e = s[0].height;
    }
    return t ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: t / this.length,
      textHeight: e
    } : null;
  }
  coordsAt(t, e) {
    let i = WS(this, t, e);
    if (!this.children.length && i && this.parent) {
      let { heightOracle: s } = this.parent.view.viewState, o = i.bottom - i.top;
      if (Math.abs(o - s.lineHeight) < 2 && s.textHeight < o) {
        let u = (o - s.textHeight) / 2;
        return { top: i.top + u, bottom: i.bottom - u, left: i.left, right: i.left };
      }
    }
    return i;
  }
  become(t) {
    return t instanceof le && this.children.length == 0 && t.children.length == 0 && ac(this.attrs, t.attrs) && this.breakAfter == t.breakAfter;
  }
  covers() {
    return !0;
  }
  static find(t, e) {
    for (let i = 0, s = 0; i < t.children.length; i++) {
      let o = t.children[i], u = s + o.length;
      if (u >= e) {
        if (o instanceof le)
          return o;
        if (u > e)
          break;
      }
      s = u + o.breakAfter;
    }
    return null;
  }
}
class wn extends Ht {
  constructor(t, e, i) {
    super(), this.widget = t, this.length = e, this.deco = i, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(t, e, i, s, o, u) {
    return i && (!(i instanceof wn) || !this.widget.compare(i.widget) || t > 0 && o <= 0 || e < this.length && u <= 0) ? !1 : (this.length = t + (i ? i.length : 0) + (this.length - e), !0);
  }
  domAtPos(t) {
    return t == 0 ? Qe.before(this.dom) : Qe.after(this.dom, t == this.length);
  }
  split(t) {
    let e = this.length - t;
    this.length = t;
    let i = new wn(this.widget, e, this.deco);
    return i.breakAfter = this.breakAfter, i;
  }
  get children() {
    return om;
  }
  sync(t) {
    (!this.dom || !this.widget.updateDOM(this.dom, t)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(t)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Et.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(t) {
    return t instanceof wn && t.widget.constructor == this.widget.constructor ? (t.widget.compare(this.widget) || this.markDirty(!0), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t.widget, this.length = t.length, this.deco = t.deco, this.breakAfter = t.breakAfter, !0) : !1;
  }
  ignoreMutation() {
    return !0;
  }
  ignoreEvent(t) {
    return this.widget.ignoreEvent(t);
  }
  get isEditable() {
    return !1;
  }
  get isWidget() {
    return !0;
  }
  coordsAt(t, e) {
    let i = this.widget.coordsAt(this.dom, t, e);
    return i || (this.widget instanceof Tp ? null : $o(this.dom.getBoundingClientRect(), this.length ? t == 0 : e <= 0));
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(t) {
    let { startSide: e, endSide: i } = this.deco;
    return e == i ? !1 : t < 0 ? e < 0 : i > 0;
  }
}
class Tp extends Ki {
  constructor(t) {
    super(), this.height = t;
  }
  toDOM() {
    let t = document.createElement("div");
    return t.className = "cm-gap", this.updateDOM(t), t;
  }
  eq(t) {
    return t.height == this.height;
  }
  updateDOM(t) {
    return t.style.height = this.height + "px", !0;
  }
  get editable() {
    return !0;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return !1;
  }
}
class To {
  constructor(t, e, i, s) {
    this.doc = t, this.pos = e, this.end = i, this.disallowBlockEffectsFor = s, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = !0, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = t.iter(), this.skip = e;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let t = this.content[this.content.length - 1];
    return !(t.breakAfter || t instanceof wn && t.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new le()), this.atCursorPos = !0), this.curLine;
  }
  flushBuffer(t = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(vu(new Zs(-1), t), t.length), this.pendingBuffer = 0);
  }
  addBlockWidget(t) {
    this.flushBuffer(), this.curLine = null, this.content.push(t);
  }
  finish(t) {
    this.pendingBuffer && t <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(t && this.content.length && this.content[this.content.length - 1] instanceof wn) && this.getLine();
  }
  buildText(t, e, i) {
    for (; t > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: o, lineBreak: u, done: c } = this.cursor.next(this.skip);
        if (this.skip = 0, c)
          throw new Error("Ran out of text content when drawing inline views");
        if (u) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = !0, t--;
          continue;
        } else
          this.text = o, this.textOff = 0;
      }
      let s = Math.min(
        this.text.length - this.textOff,
        t,
        512
        /* T.Chunk */
      );
      this.flushBuffer(e.slice(e.length - i)), this.getLine().append(vu(new Ci(this.text.slice(this.textOff, this.textOff + s)), e), i), this.atCursorPos = !0, this.textOff += s, t -= s, i = 0;
    }
  }
  span(t, e, i, s) {
    this.buildText(e - t, i, s), this.pos = e, this.openStart < 0 && (this.openStart = s);
  }
  point(t, e, i, s, o, u) {
    if (this.disallowBlockEffectsFor[u] && i instanceof ol) {
      if (i.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (e > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let c = e - t;
    if (i instanceof ol)
      if (i.block)
        i.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new wn(i.widget || Fs.block, c, i));
      else {
        let h = il.create(i.widget || Fs.inline, c, c ? 0 : i.startSide), p = this.atCursorPos && !h.isEditable && o <= s.length && (t < e || i.startSide > 0), m = !h.isEditable && (t < e || o > s.length || i.startSide <= 0), O = this.getLine();
        this.pendingBuffer == 2 && !p && !h.isEditable && (this.pendingBuffer = 0), this.flushBuffer(s), p && (O.append(vu(new Zs(1), s), o), o = s.length + Math.max(0, o - s.length)), O.append(vu(h, s), o), this.atCursorPos = m, this.pendingBuffer = m ? t < e || o > s.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = s.slice());
      }
    else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i);
    c && (this.textOff + c <= this.text.length ? this.textOff += c : (this.skip += c - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = e), this.openStart < 0 && (this.openStart = o);
  }
  static build(t, e, i, s, o) {
    let u = new To(t, e, i, o);
    return u.openEnd = Rt.spans(s, e, i, u), u.openStart < 0 && (u.openStart = u.openEnd), u.finish(u.openEnd), u;
  }
}
function vu(n, t) {
  for (let e of t)
    n = new kn(e, [n], n.length);
  return n;
}
class Fs extends Ki {
  constructor(t) {
    super(), this.tag = t;
  }
  eq(t) {
    return t.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(t) {
    return t.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return !0;
  }
}
Fs.inline = /* @__PURE__ */ new Fs("span");
Fs.block = /* @__PURE__ */ new Fs("div");
var jt = /* @__PURE__ */ function(n) {
  return n[n.LTR = 0] = "LTR", n[n.RTL = 1] = "RTL", n;
}(jt || (jt = {}));
const $l = jt.LTR, am = jt.RTL;
function YS(n) {
  let t = [];
  for (let e = 0; e < n.length; e++)
    t.push(1 << +n[e]);
  return t;
}
const CA = /* @__PURE__ */ YS("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), EA = /* @__PURE__ */ YS("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), kp = /* @__PURE__ */ Object.create(null), Bi = [];
for (let n of ["()", "[]", "{}"]) {
  let t = /* @__PURE__ */ n.charCodeAt(0), e = /* @__PURE__ */ n.charCodeAt(1);
  kp[t] = e, kp[e] = -t;
}
function ZS(n) {
  return n <= 247 ? CA[n] : 1424 <= n && n <= 1524 ? 2 : 1536 <= n && n <= 1785 ? EA[n - 1536] : 1774 <= n && n <= 2220 ? 4 : 8192 <= n && n <= 8204 ? 256 : 64336 <= n && n <= 65023 ? 4 : 1;
}
const MA = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class nl {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? am : $l;
  }
  /**
  @internal
  */
  constructor(t, e, i) {
    this.from = t, this.to = e, this.level = i;
  }
  /**
  @internal
  */
  side(t, e) {
    return this.dir == e == t ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(t, e) {
    return t == (this.dir == e);
  }
  /**
  @internal
  */
  static find(t, e, i, s) {
    let o = -1;
    for (let u = 0; u < t.length; u++) {
      let c = t[u];
      if (c.from <= e && c.to >= e) {
        if (c.level == i)
          return u;
        (o < 0 || (s != 0 ? s < 0 ? c.from < e : c.to > e : t[o].level > c.level)) && (o = u);
      }
    }
    if (o < 0)
      throw new RangeError("Index out of range");
    return o;
  }
}
function FS(n, t) {
  if (n.length != t.length)
    return !1;
  for (let e = 0; e < n.length; e++) {
    let i = n[e], s = t[e];
    if (i.from != s.from || i.to != s.to || i.direction != s.direction || !FS(i.inner, s.inner))
      return !1;
  }
  return !0;
}
const Vt = [];
function QA(n, t, e, i, s) {
  for (let o = 0; o <= i.length; o++) {
    let u = o ? i[o - 1].to : t, c = o < i.length ? i[o].from : e, h = o ? 256 : s;
    for (let p = u, m = h, O = h; p < c; p++) {
      let y = ZS(n.charCodeAt(p));
      y == 512 ? y = m : y == 8 && O == 4 && (y = 16), Vt[p] = y == 4 ? 2 : y, y & 7 && (O = y), m = y;
    }
    for (let p = u, m = h, O = h; p < c; p++) {
      let y = Vt[p];
      if (y == 128)
        p < c - 1 && m == Vt[p + 1] && m & 24 ? y = Vt[p] = m : Vt[p] = 256;
      else if (y == 64) {
        let S = p + 1;
        for (; S < c && Vt[S] == 64; )
          S++;
        let x = p && m == 8 || S < e && Vt[S] == 8 ? O == 1 ? 1 : 8 : 256;
        for (let w = p; w < S; w++)
          Vt[w] = x;
        p = S - 1;
      } else y == 8 && O == 1 && (Vt[p] = 1);
      m = y, y & 7 && (O = y);
    }
  }
}
function RA(n, t, e, i, s) {
  let o = s == 1 ? 2 : 1;
  for (let u = 0, c = 0, h = 0; u <= i.length; u++) {
    let p = u ? i[u - 1].to : t, m = u < i.length ? i[u].from : e;
    for (let O = p, y, S, x; O < m; O++)
      if (S = kp[y = n.charCodeAt(O)])
        if (S < 0) {
          for (let w = c - 3; w >= 0; w -= 3)
            if (Bi[w + 1] == -S) {
              let C = Bi[w + 2], M = C & 2 ? s : C & 4 ? C & 1 ? o : s : 0;
              M && (Vt[O] = Vt[Bi[w]] = M), c = w;
              break;
            }
        } else {
          if (Bi.length == 189)
            break;
          Bi[c++] = O, Bi[c++] = y, Bi[c++] = h;
        }
      else if ((x = Vt[O]) == 2 || x == 1) {
        let w = x == s;
        h = w ? 0 : 1;
        for (let C = c - 3; C >= 0; C -= 3) {
          let M = Bi[C + 2];
          if (M & 2)
            break;
          if (w)
            Bi[C + 2] |= 2;
          else {
            if (M & 4)
              break;
            Bi[C + 2] |= 4;
          }
        }
      }
  }
}
function DA(n, t, e, i) {
  for (let s = 0, o = i; s <= e.length; s++) {
    let u = s ? e[s - 1].to : n, c = s < e.length ? e[s].from : t;
    for (let h = u; h < c; ) {
      let p = Vt[h];
      if (p == 256) {
        let m = h + 1;
        for (; ; )
          if (m == c) {
            if (s == e.length)
              break;
            m = e[s++].to, c = s < e.length ? e[s].from : t;
          } else if (Vt[m] == 256)
            m++;
          else
            break;
        let O = o == 1, y = (m < t ? Vt[m] : i) == 1, S = O == y ? O ? 1 : 2 : i;
        for (let x = m, w = s, C = w ? e[w - 1].to : n; x > h; )
          x == C && (x = e[--w].from, C = w ? e[w - 1].to : n), Vt[--x] = S;
        h = m;
      } else
        o = p, h++;
    }
  }
}
function Ap(n, t, e, i, s, o, u) {
  let c = i % 2 ? 2 : 1;
  if (i % 2 == s % 2)
    for (let h = t, p = 0; h < e; ) {
      let m = !0, O = !1;
      if (p == o.length || h < o[p].from) {
        let w = Vt[h];
        w != c && (m = !1, O = w == 16);
      }
      let y = !m && c == 1 ? [] : null, S = m ? i : i + 1, x = h;
      t: for (; ; )
        if (p < o.length && x == o[p].from) {
          if (O)
            break t;
          let w = o[p];
          if (!m)
            for (let C = w.to, M = p + 1; ; ) {
              if (C == e)
                break t;
              if (M < o.length && o[M].from == C)
                C = o[M++].to;
              else {
                if (Vt[C] == c)
                  break t;
                break;
              }
            }
          if (p++, y)
            y.push(w);
          else {
            w.from > h && u.push(new nl(h, w.from, S));
            let C = w.direction == $l != !(S % 2);
            Cp(n, C ? i + 1 : i, s, w.inner, w.from, w.to, u), h = w.to;
          }
          x = w.to;
        } else {
          if (x == e || (m ? Vt[x] != c : Vt[x] == c))
            break;
          x++;
        }
      y ? Ap(n, h, x, i + 1, s, y, u) : h < x && u.push(new nl(h, x, S)), h = x;
    }
  else
    for (let h = e, p = o.length; h > t; ) {
      let m = !0, O = !1;
      if (!p || h > o[p - 1].to) {
        let w = Vt[h - 1];
        w != c && (m = !1, O = w == 16);
      }
      let y = !m && c == 1 ? [] : null, S = m ? i : i + 1, x = h;
      t: for (; ; )
        if (p && x == o[p - 1].to) {
          if (O)
            break t;
          let w = o[--p];
          if (!m)
            for (let C = w.from, M = p; ; ) {
              if (C == t)
                break t;
              if (M && o[M - 1].to == C)
                C = o[--M].from;
              else {
                if (Vt[C - 1] == c)
                  break t;
                break;
              }
            }
          if (y)
            y.push(w);
          else {
            w.to < h && u.push(new nl(w.to, h, S));
            let C = w.direction == $l != !(S % 2);
            Cp(n, C ? i + 1 : i, s, w.inner, w.from, w.to, u), h = w.from;
          }
          x = w.from;
        } else {
          if (x == t || (m ? Vt[x - 1] != c : Vt[x - 1] == c))
            break;
          x--;
        }
      y ? Ap(n, x, h, i + 1, s, y, u) : x < h && u.push(new nl(x, h, S)), h = x;
    }
}
function Cp(n, t, e, i, s, o, u) {
  let c = t % 2 ? 2 : 1;
  QA(n, s, o, i, c), RA(n, s, o, i, c), DA(s, o, i, c), Ap(n, s, o, t, e, i, u);
}
function zA(n, t, e) {
  if (!n)
    return [new nl(0, 0, t == am ? 1 : 0)];
  if (t == $l && !e.length && !MA.test(n))
    return KS(n.length);
  if (e.length)
    for (; n.length > Vt.length; )
      Vt[Vt.length] = 256;
  let i = [], s = t == $l ? 0 : 1;
  return Cp(n, s, s, e, 0, n.length, i), i;
}
function KS(n) {
  return [new nl(0, n, 0)];
}
let JS = "";
function qA(n, t, e, i, s) {
  var o;
  let u = i.head - n.from, c = nl.find(t, u, (o = i.bidiLevel) !== null && o !== void 0 ? o : -1, i.assoc), h = t[c], p = h.side(s, e);
  if (u == p) {
    let y = c += s ? 1 : -1;
    if (y < 0 || y >= t.length)
      return null;
    h = t[c = y], u = h.side(!s, e), p = h.side(s, e);
  }
  let m = Te(n.text, u, h.forward(s, e));
  (m < h.from || m > h.to) && (m = p), JS = n.text.slice(Math.min(u, m), Math.max(u, m));
  let O = c == (s ? t.length - 1 : 0) ? null : t[c + (s ? 1 : -1)];
  return O && m == p && O.level + (s ? 0 : 1) < h.level ? X.cursor(O.side(!s, e) + n.from, O.forward(s, e) ? 1 : -1, O.level) : X.cursor(m + n.from, h.forward(s, e) ? -1 : 1, h.level);
}
function _A(n, t, e) {
  for (let i = t; i < e; i++) {
    let s = ZS(n.charCodeAt(i));
    if (s == 1)
      return $l;
    if (s == 2 || s == 4)
      return am;
  }
  return $l;
}
const IS = /* @__PURE__ */ lt.define(), tb = /* @__PURE__ */ lt.define(), eb = /* @__PURE__ */ lt.define(), ib = /* @__PURE__ */ lt.define(), Ep = /* @__PURE__ */ lt.define(), nb = /* @__PURE__ */ lt.define(), lb = /* @__PURE__ */ lt.define(), um = /* @__PURE__ */ lt.define(), cm = /* @__PURE__ */ lt.define(), sb = /* @__PURE__ */ lt.define({
  combine: (n) => n.some((t) => t)
}), rb = /* @__PURE__ */ lt.define({
  combine: (n) => n.some((t) => t)
}), ob = /* @__PURE__ */ lt.define();
class Xs {
  constructor(t, e = "nearest", i = "nearest", s = 5, o = 5, u = !1) {
    this.range = t, this.y = e, this.x = i, this.yMargin = s, this.xMargin = o, this.isSnapshot = u;
  }
  map(t) {
    return t.empty ? this : new Xs(this.range.map(t), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(t) {
    return this.range.to <= t.doc.length ? this : new Xs(X.cursor(t.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
}
const Su = /* @__PURE__ */ yt.define({ map: (n, t) => n.map(t) }), ab = /* @__PURE__ */ yt.define();
function Xe(n, t, e) {
  let i = n.facet(ib);
  i.length ? i[0](t) : window.onerror && window.onerror(String(t), e, void 0, void 0, t) || (e ? console.error(e + ":", t) : console.error(t));
}
const xn = /* @__PURE__ */ lt.define({ combine: (n) => n.length ? n[0] : !0 });
let BA = 0;
const go = /* @__PURE__ */ lt.define();
class ee {
  constructor(t, e, i, s, o) {
    this.id = t, this.create = e, this.domEventHandlers = i, this.domEventObservers = s, this.extension = o(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(t, e) {
    const { eventHandlers: i, eventObservers: s, provide: o, decorations: u } = e || {};
    return new ee(BA++, t, i, s, (c) => {
      let h = [go.of(c)];
      return u && h.push(Ro.of((p) => {
        let m = p.plugin(c);
        return m ? u(m) : ft.none;
      })), o && h.push(o(c)), h;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(t, e) {
    return ee.define((i) => new t(i), e);
  }
}
class xd {
  constructor(t) {
    this.spec = t, this.mustUpdate = null, this.value = null;
  }
  update(t) {
    if (this.value) {
      if (this.mustUpdate) {
        let e = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(e);
          } catch (i) {
            if (Xe(e.state, i, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(t);
      } catch (e) {
        Xe(t.state, e, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(t) {
    var e;
    if (!((e = this.value) === null || e === void 0) && e.destroy)
      try {
        this.value.destroy();
      } catch (i) {
        Xe(t.state, i, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const ub = /* @__PURE__ */ lt.define(), fm = /* @__PURE__ */ lt.define(), Ro = /* @__PURE__ */ lt.define(), cb = /* @__PURE__ */ lt.define(), hm = /* @__PURE__ */ lt.define(), fb = /* @__PURE__ */ lt.define();
function m1(n, t) {
  let e = n.state.facet(fb);
  if (!e.length)
    return e;
  let i = e.map((o) => o instanceof Function ? o(n) : o), s = [];
  return Rt.spans(i, t.from, t.to, {
    point() {
    },
    span(o, u, c, h) {
      let p = o - t.from, m = u - t.from, O = s;
      for (let y = c.length - 1; y >= 0; y--, h--) {
        let S = c[y].spec.bidiIsolate, x;
        if (S == null && (S = _A(t.text, p, m)), h > 0 && O.length && (x = O[O.length - 1]).to == p && x.direction == S)
          x.to = m, O = x.inner;
        else {
          let w = { from: p, to: m, direction: S, inner: [] };
          O.push(w), O = w.inner;
        }
      }
    }
  }), s;
}
const hb = /* @__PURE__ */ lt.define();
function dm(n) {
  let t = 0, e = 0, i = 0, s = 0;
  for (let o of n.state.facet(hb)) {
    let u = o(n);
    u && (u.left != null && (t = Math.max(t, u.left)), u.right != null && (e = Math.max(e, u.right)), u.top != null && (i = Math.max(i, u.top)), u.bottom != null && (s = Math.max(s, u.bottom)));
  }
  return { left: t, right: e, top: i, bottom: s };
}
const Oo = /* @__PURE__ */ lt.define();
class vi {
  constructor(t, e, i, s) {
    this.fromA = t, this.toA = e, this.fromB = i, this.toB = s;
  }
  join(t) {
    return new vi(Math.min(this.fromA, t.fromA), Math.max(this.toA, t.toA), Math.min(this.fromB, t.fromB), Math.max(this.toB, t.toB));
  }
  addToSet(t) {
    let e = t.length, i = this;
    for (; e > 0; e--) {
      let s = t[e - 1];
      if (!(s.fromA > i.toA)) {
        if (s.toA < i.fromA)
          break;
        i = i.join(s), t.splice(e - 1, 1);
      }
    }
    return t.splice(e, 0, i), t;
  }
  static extendWithRanges(t, e) {
    if (e.length == 0)
      return t;
    let i = [];
    for (let s = 0, o = 0, u = 0, c = 0; ; s++) {
      let h = s == t.length ? null : t[s], p = u - c, m = h ? h.fromB : 1e9;
      for (; o < e.length && e[o] < m; ) {
        let O = e[o], y = e[o + 1], S = Math.max(c, O), x = Math.min(m, y);
        if (S <= x && new vi(S + p, x + p, S, x).addToSet(i), y > m)
          break;
        o += 2;
      }
      if (!h)
        return i;
      new vi(h.fromA, h.toA, h.fromB, h.toB).addToSet(i), u = h.toA, c = h.toB;
    }
  }
}
class uc {
  constructor(t, e, i) {
    this.view = t, this.state = e, this.transactions = i, this.flags = 0, this.startState = t.state, this.changes = ue.empty(this.startState.doc.length);
    for (let o of i)
      this.changes = this.changes.compose(o.changes);
    let s = [];
    this.changes.iterChangedRanges((o, u, c, h) => s.push(new vi(o, u, c, h))), this.changedRanges = s;
  }
  /**
  @internal
  */
  static create(t, e, i) {
    return new uc(t, e, i);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Returns true when
  [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
  and the viewport change is not just the result of mapping it in
  response to document changes.
  */
  get viewportMoved() {
    return (this.flags & 8) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 18) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((t) => t.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
class g1 extends Ht {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(t) {
    super(), this.view = t, this.decorations = [], this.dynamicDecorationMap = [!1], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.editContextFormatting = ft.none, this.lastCompositionAfterCursor = !1, this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = !1, this.lastUpdate = Date.now(), this.setDOM(t.contentDOM), this.children = [new le()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new vi(0, 0, 0, t.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(t) {
    var e;
    let i = t.changedRanges;
    this.minWidth > 0 && i.length && (i.every(({ fromA: p, toA: m }) => m < this.minWidthFrom || p > this.minWidthTo) ? (this.minWidthFrom = t.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = t.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.updateEditContextFormatting(t);
    let s = -1;
    this.view.inputState.composing >= 0 && !this.view.observer.editContext && (!((e = this.domChanged) === null || e === void 0) && e.newSel ? s = this.domChanged.newSel.head : !XA(t.changes, this.hasComposition) && !t.selectionSet && (s = t.state.selection.main.head));
    let o = s > -1 ? PA(this.view, t.changes, s) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: p, to: m } = this.hasComposition;
      i = new vi(p, m, t.changes.mapPos(p, -1), t.changes.mapPos(m, 1)).addToSet(i.slice());
    }
    this.hasComposition = o ? { from: o.range.fromB, to: o.range.toB } : null, (st.ie || st.chrome) && !o && t && t.state.doc.lines != t.startState.doc.lines && (this.forceSelection = !0);
    let u = this.decorations, c = this.updateDeco(), h = VA(u, c, t.changes);
    return i = vi.extendWithRanges(i, h), !(this.flags & 7) && i.length == 0 ? !1 : (this.updateInner(i, t.startState.doc.length, o), t.transactions.length && (this.lastUpdate = Date.now()), !0);
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(t, e, i) {
    this.view.viewState.mustMeasureContent = !0, this.updateChildren(t, e, i);
    let { observer: s } = this.view;
    s.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let u = st.chrome || st.ios ? { node: s.selectionRange.focusNode, written: !1 } : void 0;
      this.sync(this.view, u), this.flags &= -8, u && (u.written || s.selectionRange.focusNode != u.node) && (this.forceSelection = !0), this.dom.style.height = "";
    }), this.markedForComposition.forEach(
      (u) => u.flags &= -9
      /* ViewFlag.Composition */
    );
    let o = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let u of this.children)
        u instanceof wn && u.widget instanceof Tp && o.push(u.dom);
    s.updateGaps(o);
  }
  updateChildren(t, e, i) {
    let s = i ? i.range.addToSet(t.slice()) : t, o = this.childCursor(e);
    for (let u = s.length - 1; ; u--) {
      let c = u >= 0 ? s[u] : null;
      if (!c)
        break;
      let { fromA: h, toA: p, fromB: m, toB: O } = c, y, S, x, w;
      if (i && i.range.fromB < O && i.range.toB > m) {
        let Z = To.build(this.view.state.doc, m, i.range.fromB, this.decorations, this.dynamicDecorationMap), N = To.build(this.view.state.doc, i.range.toB, O, this.decorations, this.dynamicDecorationMap);
        S = Z.breakAtStart, x = Z.openStart, w = N.openEnd;
        let Y = this.compositionView(i);
        N.breakAtStart ? Y.breakAfter = 1 : N.content.length && Y.merge(Y.length, Y.length, N.content[0], !1, N.openStart, 0) && (Y.breakAfter = N.content[0].breakAfter, N.content.shift()), Z.content.length && Y.merge(0, 0, Z.content[Z.content.length - 1], !0, 0, Z.openEnd) && Z.content.pop(), y = Z.content.concat(Y).concat(N.content);
      } else
        ({ content: y, breakAtStart: S, openStart: x, openEnd: w } = To.build(this.view.state.doc, m, O, this.decorations, this.dynamicDecorationMap));
      let { i: C, off: M } = o.findPos(p, 1), { i: U, off: W } = o.findPos(h, -1);
      US(this, U, W, C, M, y, S, x, w);
    }
    i && this.fixCompositionDOM(i);
  }
  updateEditContextFormatting(t) {
    this.editContextFormatting = this.editContextFormatting.map(t.changes);
    for (let e of t.transactions)
      for (let i of e.effects)
        i.is(ab) && (this.editContextFormatting = i.value);
  }
  compositionView(t) {
    let e = new Ci(t.text.nodeValue);
    e.flags |= 8;
    for (let { deco: s } of t.marks)
      e = new kn(s, [e], e.length);
    let i = new le();
    return i.append(e, 0), i;
  }
  fixCompositionDOM(t) {
    let e = (o, u) => {
      u.flags |= 8 | (u.children.some(
        (h) => h.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0), this.markedForComposition.add(u);
      let c = Ht.get(o);
      c && c != u && (c.dom = null), u.setDOM(o);
    }, i = this.childPos(t.range.fromB, 1), s = this.children[i.i];
    e(t.line, s);
    for (let o = t.marks.length - 1; o >= -1; o--)
      i = s.childPos(i.off, 1), s = s.children[i.i], e(o >= 0 ? t.marks[o].node : t.text, s);
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(t = !1, e = !1) {
    (t || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let i = this.view.root.activeElement, s = i == this.dom, o = !s && !(this.view.state.facet(xn) || this.dom.tabIndex > -1) && $u(this.dom, this.view.observer.selectionRange) && !(i && this.dom.contains(i));
    if (!(s || e || o))
      return;
    let u = this.forceSelection;
    this.forceSelection = !1;
    let c = this.view.state.selection.main, h = this.moveToLine(this.domAtPos(c.anchor)), p = c.empty ? h : this.moveToLine(this.domAtPos(c.head));
    if (st.gecko && c.empty && !this.hasComposition && NA(h)) {
      let O = document.createTextNode("");
      this.view.observer.ignore(() => h.node.insertBefore(O, h.node.childNodes[h.offset] || null)), h = p = new Qe(O, 0), u = !0;
    }
    let m = this.view.observer.selectionRange;
    (u || !m.focusNode || (!wo(h.node, h.offset, m.anchorNode, m.anchorOffset) || !wo(p.node, p.offset, m.focusNode, m.focusOffset)) && !this.suppressWidgetCursorChange(m, c)) && (this.view.observer.ignore(() => {
      st.android && st.chrome && this.dom.contains(m.focusNode) && HA(m.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: !0 }));
      let O = Qo(this.view.root);
      if (O) if (c.empty) {
        if (st.gecko) {
          let y = LA(h.node, h.offset);
          if (y && y != 3) {
            let S = (y == 1 ? NS : PS)(h.node, h.offset);
            S && (h = new Qe(S.node, S.offset));
          }
        }
        O.collapse(h.node, h.offset), c.bidiLevel != null && O.caretBidiLevel !== void 0 && (O.caretBidiLevel = c.bidiLevel);
      } else if (O.extend) {
        O.collapse(h.node, h.offset);
        try {
          O.extend(p.node, p.offset);
        } catch {
        }
      } else {
        let y = document.createRange();
        c.anchor > c.head && ([h, p] = [p, h]), y.setEnd(p.node, p.offset), y.setStart(h.node, h.offset), O.removeAllRanges(), O.addRange(y);
      }
      o && this.view.root.activeElement == this.dom && (this.dom.blur(), i && i.focus());
    }), this.view.observer.setSelectionRange(h, p)), this.impreciseAnchor = h.precise ? null : new Qe(m.anchorNode, m.anchorOffset), this.impreciseHead = p.precise ? null : new Qe(m.focusNode, m.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(t, e) {
    return this.hasComposition && e.empty && wo(t.focusNode, t.focusOffset, t.anchorNode, t.anchorOffset) && this.posFromDOM(t.focusNode, t.focusOffset) == e.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view: t } = this, e = t.state.selection.main, i = Qo(t.root), { anchorNode: s, anchorOffset: o } = t.observer.selectionRange;
    if (!i || !e.empty || !e.assoc || !i.modify)
      return;
    let u = le.find(this, e.head);
    if (!u)
      return;
    let c = u.posAtStart;
    if (e.head == c || e.head == c + u.length)
      return;
    let h = this.coordsAt(e.head, -1), p = this.coordsAt(e.head, 1);
    if (!h || !p || h.bottom > p.top)
      return;
    let m = this.domAtPos(e.head + e.assoc);
    i.collapse(m.node, m.offset), i.modify("move", e.assoc < 0 ? "forward" : "backward", "lineboundary"), t.observer.readSelectionRange();
    let O = t.observer.selectionRange;
    t.docView.posFromDOM(O.anchorNode, O.anchorOffset) != e.from && i.collapse(s, o);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(t) {
    let e = this.dom, i;
    if (t.node != e)
      return t;
    for (let s = t.offset; !i && s < e.childNodes.length; s++) {
      let o = Ht.get(e.childNodes[s]);
      o instanceof le && (i = o.domAtPos(0));
    }
    for (let s = t.offset - 1; !i && s >= 0; s--) {
      let o = Ht.get(e.childNodes[s]);
      o instanceof le && (i = o.domAtPos(o.length));
    }
    return i ? new Qe(i.node, i.offset, !0) : t;
  }
  nearest(t) {
    for (let e = t; e; ) {
      let i = Ht.get(e);
      if (i && i.rootView == this)
        return i;
      e = e.parentNode;
    }
    return null;
  }
  posFromDOM(t, e) {
    let i = this.nearest(t);
    if (!i)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i.localPosFromDOM(t, e) + i.posAtStart;
  }
  domAtPos(t) {
    let { i: e, off: i } = this.childCursor().findPos(t, -1);
    for (; e < this.children.length - 1; ) {
      let s = this.children[e];
      if (i < s.length || s instanceof le)
        break;
      e++, i = 0;
    }
    return this.children[e].domAtPos(i);
  }
  coordsAt(t, e) {
    let i = null, s = 0;
    for (let o = this.length, u = this.children.length - 1; u >= 0; u--) {
      let c = this.children[u], h = o - c.breakAfter, p = h - c.length;
      if (h < t)
        break;
      if (p <= t && (p < t || c.covers(-1)) && (h > t || c.covers(1)) && (!i || c instanceof le && !(i instanceof le && e >= 0)))
        i = c, s = p;
      else if (i && p == t && h == t && c instanceof wn && Math.abs(e) < 2) {
        if (c.deco.startSide < 0)
          break;
        u && (i = null);
      }
      o = p;
    }
    return i ? i.coordsAt(t - s, e) : null;
  }
  coordsForChar(t) {
    let { i: e, off: i } = this.childPos(t, 1), s = this.children[e];
    if (!(s instanceof le))
      return null;
    for (; s.children.length; ) {
      let { i: c, off: h } = s.childPos(i, 1);
      for (; ; c++) {
        if (c == s.children.length)
          return null;
        if ((s = s.children[c]).length)
          break;
      }
      i = h;
    }
    if (!(s instanceof Ci))
      return null;
    let o = Te(s.text, i);
    if (o == i)
      return null;
    let u = Xl(s.dom, i, o).getClientRects();
    for (let c = 0; c < u.length; c++) {
      let h = u[c];
      if (c == u.length - 1 || h.top < h.bottom && h.left < h.right)
        return h;
    }
    return null;
  }
  measureVisibleLineHeights(t) {
    let e = [], { from: i, to: s } = t, o = this.view.contentDOM.clientWidth, u = o > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, c = -1, h = this.view.textDirection == jt.LTR;
    for (let p = 0, m = 0; m < this.children.length; m++) {
      let O = this.children[m], y = p + O.length;
      if (y > s)
        break;
      if (p >= i) {
        let S = O.dom.getBoundingClientRect();
        if (e.push(S.height), u) {
          let x = O.dom.lastChild, w = x ? Ys(x) : [];
          if (w.length) {
            let C = w[w.length - 1], M = h ? C.right - S.left : S.right - C.left;
            M > c && (c = M, this.minWidth = o, this.minWidthFrom = p, this.minWidthTo = y);
          }
        }
      }
      p = y + O.breakAfter;
    }
    return e;
  }
  textDirectionAt(t) {
    let { i: e } = this.childPos(t, 1);
    return getComputedStyle(this.children[e].dom).direction == "rtl" ? jt.RTL : jt.LTR;
  }
  measureTextSize() {
    for (let o of this.children)
      if (o instanceof le) {
        let u = o.measureTextSize();
        if (u)
          return u;
      }
    let t = document.createElement("div"), e, i, s;
    return t.className = "cm-line", t.style.width = "99999px", t.style.position = "absolute", t.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(t);
      let o = Ys(t.firstChild)[0];
      e = t.getBoundingClientRect().height, i = o ? o.width / 27 : 7, s = o ? o.height : e, t.remove();
    }), { lineHeight: e, charWidth: i, textHeight: s };
  }
  childCursor(t = this.length) {
    let e = this.children.length;
    return e && (t -= this.children[--e].length), new LS(this.children, t, e);
  }
  computeBlockGapDeco() {
    let t = [], e = this.view.viewState;
    for (let i = 0, s = 0; ; s++) {
      let o = s == e.viewports.length ? null : e.viewports[s], u = o ? o.from - 1 : this.length;
      if (u > i) {
        let c = (e.lineBlockAt(u).bottom - e.lineBlockAt(i).top) / this.view.scaleY;
        t.push(ft.replace({
          widget: new Tp(c),
          block: !0,
          inclusive: !0,
          isBlockGap: !0
        }).range(i, u));
      }
      if (!o)
        break;
      i = o.to + 1;
    }
    return ft.set(t);
  }
  updateDeco() {
    let t = 1, e = this.view.state.facet(Ro).map((o) => (this.dynamicDecorationMap[t++] = typeof o == "function") ? o(this.view) : o), i = !1, s = this.view.state.facet(cb).map((o, u) => {
      let c = typeof o == "function";
      return c && (i = !0), c ? o(this.view) : o;
    });
    for (s.length && (this.dynamicDecorationMap[t++] = i, e.push(Rt.join(s))), this.decorations = [
      this.editContextFormatting,
      ...e,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ]; t < this.decorations.length; )
      this.dynamicDecorationMap[t++] = !1;
    return this.decorations;
  }
  scrollIntoView(t) {
    if (t.isSnapshot) {
      let p = this.view.viewState.lineBlockAt(t.range.head);
      this.view.scrollDOM.scrollTop = p.top - t.yMargin, this.view.scrollDOM.scrollLeft = t.xMargin;
      return;
    }
    for (let p of this.view.state.facet(ob))
      try {
        if (p(this.view, t.range, t))
          return !0;
      } catch (m) {
        Xe(this.view.state, m, "scroll handler");
      }
    let { range: e } = t, i = this.coordsAt(e.head, e.empty ? e.assoc : e.head > e.anchor ? -1 : 1), s;
    if (!i)
      return;
    !e.empty && (s = this.coordsAt(e.anchor, e.anchor > e.head ? -1 : 1)) && (i = {
      left: Math.min(i.left, s.left),
      top: Math.min(i.top, s.top),
      right: Math.max(i.right, s.right),
      bottom: Math.max(i.bottom, s.bottom)
    });
    let o = dm(this.view), u = {
      left: i.left - o.left,
      top: i.top - o.top,
      right: i.right + o.right,
      bottom: i.bottom + o.bottom
    }, { offsetWidth: c, offsetHeight: h } = this.view.scrollDOM;
    mA(this.view.scrollDOM, u, e.head < e.anchor ? -1 : 1, t.x, t.y, Math.max(Math.min(t.xMargin, c), -c), Math.max(Math.min(t.yMargin, h), -h), this.view.textDirection == jt.LTR);
  }
}
function NA(n) {
  return n.node.nodeType == 1 && n.node.firstChild && (n.offset == 0 || n.node.childNodes[n.offset - 1].contentEditable == "false") && (n.offset == n.node.childNodes.length || n.node.childNodes[n.offset].contentEditable == "false");
}
function db(n, t) {
  let e = n.observer.selectionRange;
  if (!e.focusNode)
    return null;
  let i = NS(e.focusNode, e.focusOffset), s = PS(e.focusNode, e.focusOffset), o = i || s;
  if (s && i && s.node != i.node) {
    let c = Ht.get(s.node);
    if (!c || c instanceof Ci && c.text != s.node.nodeValue)
      o = s;
    else if (n.docView.lastCompositionAfterCursor) {
      let h = Ht.get(i.node);
      !h || h instanceof Ci && h.text != i.node.nodeValue || (o = s);
    }
  }
  if (n.docView.lastCompositionAfterCursor = o != i, !o)
    return null;
  let u = t - o.offset;
  return { from: u, to: u + o.node.nodeValue.length, node: o.node };
}
function PA(n, t, e) {
  let i = db(n, e);
  if (!i)
    return null;
  let { node: s, from: o, to: u } = i, c = s.nodeValue;
  if (/[\n\r]/.test(c) || n.state.doc.sliceString(i.from, i.to) != c)
    return null;
  let h = t.invertedDesc, p = new vi(h.mapPos(o), h.mapPos(u), o, u), m = [];
  for (let O = s.parentNode; ; O = O.parentNode) {
    let y = Ht.get(O);
    if (y instanceof kn)
      m.push({ node: O, deco: y.mark });
    else {
      if (y instanceof le || O.nodeName == "DIV" && O.parentNode == n.contentDOM)
        return { range: p, text: s, marks: m, line: O };
      if (O != n.contentDOM)
        m.push({ node: O, deco: new jo({
          inclusive: !0,
          attributes: kA(O),
          tagName: O.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
}
function LA(n, t) {
  return n.nodeType != 1 ? 0 : (t && n.childNodes[t - 1].contentEditable == "false" ? 1 : 0) | (t < n.childNodes.length && n.childNodes[t].contentEditable == "false" ? 2 : 0);
}
let UA = class {
  constructor() {
    this.changes = [];
  }
  compareRange(t, e) {
    ju(t, e, this.changes);
  }
  comparePoint(t, e) {
    ju(t, e, this.changes);
  }
  boundChange(t) {
    ju(t, t, this.changes);
  }
};
function VA(n, t, e) {
  let i = new UA();
  return Rt.compare(n, t, e, i), i.changes;
}
function HA(n, t) {
  for (let e = n; e && e != t; e = e.assignedSlot || e.parentNode)
    if (e.nodeType == 1 && e.contentEditable == "false")
      return !0;
  return !1;
}
function XA(n, t) {
  let e = !1;
  return t && n.iterChangedRanges((i, s) => {
    i < t.to && s > t.from && (e = !0);
  }), e;
}
function $A(n, t, e = 1) {
  let i = n.charCategorizer(t), s = n.doc.lineAt(t), o = t - s.from;
  if (s.length == 0)
    return X.cursor(t);
  o == 0 ? e = 1 : o == s.length && (e = -1);
  let u = o, c = o;
  e < 0 ? u = Te(s.text, o, !1) : c = Te(s.text, o);
  let h = i(s.text.slice(u, c));
  for (; u > 0; ) {
    let p = Te(s.text, u, !1);
    if (i(s.text.slice(p, u)) != h)
      break;
    u = p;
  }
  for (; c < s.length; ) {
    let p = Te(s.text, c);
    if (i(s.text.slice(c, p)) != h)
      break;
    c = p;
  }
  return X.range(u + s.from, c + s.from);
}
function jA(n, t) {
  return t.left > n ? t.left - n : Math.max(0, n - t.right);
}
function WA(n, t) {
  return t.top > n ? t.top - n : Math.max(0, n - t.bottom);
}
function wd(n, t) {
  return n.top < t.bottom - 1 && n.bottom > t.top + 1;
}
function O1(n, t) {
  return t < n.top ? { top: t, left: n.left, right: n.right, bottom: n.bottom } : n;
}
function y1(n, t) {
  return t > n.bottom ? { top: n.top, left: n.left, right: n.right, bottom: t } : n;
}
function Mp(n, t, e) {
  let i, s, o, u, c = !1, h, p, m, O;
  for (let x = n.firstChild; x; x = x.nextSibling) {
    let w = Ys(x);
    for (let C = 0; C < w.length; C++) {
      let M = w[C];
      s && wd(s, M) && (M = O1(y1(M, s.bottom), s.top));
      let U = jA(t, M), W = WA(e, M);
      if (U == 0 && W == 0)
        return x.nodeType == 3 ? v1(x, t, e) : Mp(x, t, e);
      if (!i || u > W || u == W && o > U) {
        i = x, s = M, o = U, u = W;
        let Z = W ? e < M.top ? -1 : 1 : U ? t < M.left ? -1 : 1 : 0;
        c = !Z || (Z > 0 ? C < w.length - 1 : C > 0);
      }
      U == 0 ? e > M.bottom && (!m || m.bottom < M.bottom) ? (h = x, m = M) : e < M.top && (!O || O.top > M.top) && (p = x, O = M) : m && wd(m, M) ? m = y1(m, M.bottom) : O && wd(O, M) && (O = O1(O, M.top));
    }
  }
  if (m && m.bottom >= e ? (i = h, s = m) : O && O.top <= e && (i = p, s = O), !i)
    return { node: n, offset: 0 };
  let y = Math.max(s.left, Math.min(s.right, t));
  if (i.nodeType == 3)
    return v1(i, y, e);
  if (c && i.contentEditable != "false")
    return Mp(i, y, e);
  let S = Array.prototype.indexOf.call(n.childNodes, i) + (t >= (s.left + s.right) / 2 ? 1 : 0);
  return { node: n, offset: S };
}
function v1(n, t, e) {
  let i = n.nodeValue.length, s = -1, o = 1e9, u = 0;
  for (let c = 0; c < i; c++) {
    let h = Xl(n, c, c + 1).getClientRects();
    for (let p = 0; p < h.length; p++) {
      let m = h[p];
      if (m.top == m.bottom)
        continue;
      u || (u = t - m.left);
      let O = (m.top > e ? m.top - e : e - m.bottom) - 1;
      if (m.left - 1 <= t && m.right + 1 >= t && O < o) {
        let y = t >= (m.left + m.right) / 2, S = y;
        if ((st.chrome || st.gecko) && Xl(n, c).getBoundingClientRect().left == m.right && (S = !y), O <= 0)
          return { node: n, offset: c + (S ? 1 : 0) };
        s = c + (S ? 1 : 0), o = O;
      }
    }
  }
  return { node: n, offset: s > -1 ? s : u > 0 ? n.nodeValue.length : 0 };
}
function pb(n, t, e, i = -1) {
  var s, o;
  let u = n.contentDOM.getBoundingClientRect(), c = u.top + n.viewState.paddingTop, h, { docHeight: p } = n.viewState, { x: m, y: O } = t, y = O - c;
  if (y < 0)
    return 0;
  if (y > p)
    return n.state.doc.length;
  for (let Z = n.viewState.heightOracle.textHeight / 2, N = !1; h = n.elementAtHeight(y), h.type != ze.Text; )
    for (; y = i > 0 ? h.bottom + Z : h.top - Z, !(y >= 0 && y <= p); ) {
      if (N)
        return e ? null : 0;
      N = !0, i = -i;
    }
  O = c + y;
  let S = h.from;
  if (S < n.viewport.from)
    return n.viewport.from == 0 ? 0 : e ? null : S1(n, u, h, m, O);
  if (S > n.viewport.to)
    return n.viewport.to == n.state.doc.length ? n.state.doc.length : e ? null : S1(n, u, h, m, O);
  let x = n.dom.ownerDocument, w = n.root.elementFromPoint ? n.root : x, C = w.elementFromPoint(m, O);
  C && !n.contentDOM.contains(C) && (C = null), C || (m = Math.max(u.left + 1, Math.min(u.right - 1, m)), C = w.elementFromPoint(m, O), C && !n.contentDOM.contains(C) && (C = null));
  let M, U = -1;
  if (C && ((s = n.docView.nearest(C)) === null || s === void 0 ? void 0 : s.isEditable) != !1) {
    if (x.caretPositionFromPoint) {
      let Z = x.caretPositionFromPoint(m, O);
      Z && ({ offsetNode: M, offset: U } = Z);
    } else if (x.caretRangeFromPoint) {
      let Z = x.caretRangeFromPoint(m, O);
      Z && ({ startContainer: M, startOffset: U } = Z, (!n.contentDOM.contains(M) || st.safari && GA(M, U, m) || st.chrome && YA(M, U, m)) && (M = void 0));
    }
    M && (U = Math.min(Yi(M), U));
  }
  if (!M || !n.docView.dom.contains(M)) {
    let Z = le.find(n.docView, S);
    if (!Z)
      return y > h.top + h.height / 2 ? h.to : h.from;
    ({ node: M, offset: U } = Mp(Z.dom, m, O));
  }
  let W = n.docView.nearest(M);
  if (!W)
    return null;
  if (W.isWidget && ((o = W.dom) === null || o === void 0 ? void 0 : o.nodeType) == 1) {
    let Z = W.dom.getBoundingClientRect();
    return t.y < Z.top || t.y <= Z.bottom && t.x <= (Z.left + Z.right) / 2 ? W.posAtStart : W.posAtEnd;
  } else
    return W.localPosFromDOM(M, U) + W.posAtStart;
}
function S1(n, t, e, i, s) {
  let o = Math.round((i - t.left) * n.defaultCharacterWidth);
  if (n.lineWrapping && e.height > n.defaultLineHeight * 1.5) {
    let c = n.viewState.heightOracle.textHeight, h = Math.floor((s - e.top - (n.defaultLineHeight - c) * 0.5) / c);
    o += h * n.viewState.heightOracle.lineLength;
  }
  let u = n.state.sliceDoc(e.from, e.to);
  return e.from + mp(u, o, n.state.tabSize);
}
function GA(n, t, e) {
  let i;
  if (n.nodeType != 3 || t != (i = n.nodeValue.length))
    return !1;
  for (let s = n.nextSibling; s; s = s.nextSibling)
    if (s.nodeType != 1 || s.nodeName != "BR")
      return !1;
  return Xl(n, i - 1, i).getBoundingClientRect().left > e;
}
function YA(n, t, e) {
  if (t != 0)
    return !1;
  for (let s = n; ; ) {
    let o = s.parentNode;
    if (!o || o.nodeType != 1 || o.firstChild != s)
      return !1;
    if (o.classList.contains("cm-line"))
      break;
    s = o;
  }
  let i = n.nodeType == 1 ? n.getBoundingClientRect() : Xl(n, 0, Math.max(n.nodeValue.length, 1)).getBoundingClientRect();
  return e - i.left > 5;
}
function Qp(n, t, e) {
  let i = n.lineBlockAt(t);
  if (Array.isArray(i.type)) {
    let s;
    for (let o of i.type) {
      if (o.from > t)
        break;
      if (!(o.to < t)) {
        if (o.from < t && o.to > t)
          return o;
        (!s || o.type == ze.Text && (s.type != o.type || (e < 0 ? o.from < t : o.to > t))) && (s = o);
      }
    }
    return s || i;
  }
  return i;
}
function ZA(n, t, e, i) {
  let s = Qp(n, t.head, t.assoc || -1), o = !i || s.type != ze.Text || !(n.lineWrapping || s.widgetLineBreaks) ? null : n.coordsAtPos(t.assoc < 0 && t.head > s.from ? t.head - 1 : t.head);
  if (o) {
    let u = n.dom.getBoundingClientRect(), c = n.textDirectionAt(s.from), h = n.posAtCoords({
      x: e == (c == jt.LTR) ? u.right - 1 : u.left + 1,
      y: (o.top + o.bottom) / 2
    });
    if (h != null)
      return X.cursor(h, e ? -1 : 1);
  }
  return X.cursor(e ? s.to : s.from, e ? -1 : 1);
}
function b1(n, t, e, i) {
  let s = n.state.doc.lineAt(t.head), o = n.bidiSpans(s), u = n.textDirectionAt(s.from);
  for (let c = t, h = null; ; ) {
    let p = qA(s, o, u, c, e), m = JS;
    if (!p) {
      if (s.number == (e ? n.state.doc.lines : 1))
        return c;
      m = `
`, s = n.state.doc.line(s.number + (e ? 1 : -1)), o = n.bidiSpans(s), p = n.visualLineSide(s, !e);
    }
    if (h) {
      if (!h(m))
        return c;
    } else {
      if (!i)
        return p;
      h = i(m);
    }
    c = p;
  }
}
function FA(n, t, e) {
  let i = n.state.charCategorizer(t), s = i(e);
  return (o) => {
    let u = i(o);
    return s == Yt.Space && (s = u), s == u;
  };
}
function KA(n, t, e, i) {
  let s = t.head, o = e ? 1 : -1;
  if (s == (e ? n.state.doc.length : 0))
    return X.cursor(s, t.assoc);
  let u = t.goalColumn, c, h = n.contentDOM.getBoundingClientRect(), p = n.coordsAtPos(s, t.assoc || -1), m = n.documentTop;
  if (p)
    u == null && (u = p.left - h.left), c = o < 0 ? p.top : p.bottom;
  else {
    let S = n.viewState.lineBlockAt(s);
    u == null && (u = Math.min(h.right - h.left, n.defaultCharacterWidth * (s - S.from))), c = (o < 0 ? S.top : S.bottom) + m;
  }
  let O = h.left + u, y = i ?? n.viewState.heightOracle.textHeight >> 1;
  for (let S = 0; ; S += 10) {
    let x = c + (y + S) * o, w = pb(n, { x: O, y: x }, !1, o);
    if (x < h.top || x > h.bottom || (o < 0 ? w < s : w > s)) {
      let C = n.docView.coordsForChar(w), M = !C || x < C.top ? -1 : 1;
      return X.cursor(w, M, void 0, u);
    }
  }
}
function Wu(n, t, e) {
  for (; ; ) {
    let i = 0;
    for (let s of n)
      s.between(t - 1, t + 1, (o, u, c) => {
        if (t > o && t < u) {
          let h = i || e || (t - o < u - t ? -1 : 1);
          t = h < 0 ? o : u, i = h;
        }
      });
    if (!i)
      return t;
  }
}
function Td(n, t, e) {
  let i = Wu(n.state.facet(hm).map((s) => s(n)), e.from, t.head > e.from ? -1 : 1);
  return i == e.from ? e : X.cursor(i, i < e.from ? 1 : -1);
}
const yo = "￿";
class JA {
  constructor(t, e) {
    this.points = t, this.text = "", this.lineSeparator = e.facet(At.lineSeparator);
  }
  append(t) {
    this.text += t;
  }
  lineBreak() {
    this.text += yo;
  }
  readRange(t, e) {
    if (!t)
      return this;
    let i = t.parentNode;
    for (let s = t; ; ) {
      this.findPointBefore(i, s);
      let o = this.text.length;
      this.readNode(s);
      let u = s.nextSibling;
      if (u == e)
        break;
      let c = Ht.get(s), h = Ht.get(u);
      (c && h ? c.breakAfter : (c ? c.breakAfter : oc(s)) || oc(u) && (s.nodeName != "BR" || s.cmIgnore) && this.text.length > o) && this.lineBreak(), s = u;
    }
    return this.findPointBefore(i, e), this;
  }
  readTextNode(t) {
    let e = t.nodeValue;
    for (let i of this.points)
      i.node == t && (i.pos = this.text.length + Math.min(i.offset, e.length));
    for (let i = 0, s = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let o = -1, u = 1, c;
      if (this.lineSeparator ? (o = e.indexOf(this.lineSeparator, i), u = this.lineSeparator.length) : (c = s.exec(e)) && (o = c.index, u = c[0].length), this.append(e.slice(i, o < 0 ? e.length : o)), o < 0)
        break;
      if (this.lineBreak(), u > 1)
        for (let h of this.points)
          h.node == t && h.pos > this.text.length && (h.pos -= u - 1);
      i = o + u;
    }
  }
  readNode(t) {
    if (t.cmIgnore)
      return;
    let e = Ht.get(t), i = e && e.overrideDOMText;
    if (i != null) {
      this.findPointInside(t, i.length);
      for (let s = i.iter(); !s.next().done; )
        s.lineBreak ? this.lineBreak() : this.append(s.value);
    } else t.nodeType == 3 ? this.readTextNode(t) : t.nodeName == "BR" ? t.nextSibling && this.lineBreak() : t.nodeType == 1 && this.readRange(t.firstChild, null);
  }
  findPointBefore(t, e) {
    for (let i of this.points)
      i.node == t && t.childNodes[i.offset] == e && (i.pos = this.text.length);
  }
  findPointInside(t, e) {
    for (let i of this.points)
      (t.nodeType == 3 ? i.node == t : t.contains(i.node)) && (i.pos = this.text.length + (IA(t, i.node, i.offset) ? e : 0));
  }
}
function IA(n, t, e) {
  for (; ; ) {
    if (!t || e < Yi(t))
      return !1;
    if (t == n)
      return !0;
    e = Hl(t) + 1, t = t.parentNode;
  }
}
class x1 {
  constructor(t, e) {
    this.node = t, this.offset = e, this.pos = -1;
  }
}
class tC {
  constructor(t, e, i, s) {
    this.typeOver = s, this.bounds = null, this.text = "", this.domChanged = e > -1;
    let { impreciseHead: o, impreciseAnchor: u } = t.docView;
    if (t.state.readOnly && e > -1)
      this.newSel = null;
    else if (e > -1 && (this.bounds = t.docView.domBoundsAround(e, i, 0))) {
      let c = o || u ? [] : nC(t), h = new JA(c, t.state);
      h.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = h.text, this.newSel = lC(c, this.bounds.from);
    } else {
      let c = t.observer.selectionRange, h = o && o.node == c.focusNode && o.offset == c.focusOffset || !yp(t.contentDOM, c.focusNode) ? t.state.selection.main.head : t.docView.posFromDOM(c.focusNode, c.focusOffset), p = u && u.node == c.anchorNode && u.offset == c.anchorOffset || !yp(t.contentDOM, c.anchorNode) ? t.state.selection.main.anchor : t.docView.posFromDOM(c.anchorNode, c.anchorOffset), m = t.viewport;
      if ((st.ios || st.chrome) && t.state.selection.main.empty && h != p && (m.from > 0 || m.to < t.state.doc.length)) {
        let O = Math.min(h, p), y = Math.max(h, p), S = m.from - O, x = m.to - y;
        (S == 0 || S == 1 || O == 0) && (x == 0 || x == -1 || y == t.state.doc.length) && (h = 0, p = t.state.doc.length);
      }
      this.newSel = X.single(p, h);
    }
  }
}
function mb(n, t) {
  let e, { newSel: i } = t, s = n.state.selection.main, o = n.inputState.lastKeyTime > Date.now() - 100 ? n.inputState.lastKeyCode : -1;
  if (t.bounds) {
    let { from: u, to: c } = t.bounds, h = s.from, p = null;
    (o === 8 || st.android && t.text.length < c - u) && (h = s.to, p = "end");
    let m = iC(n.state.doc.sliceString(u, c, yo), t.text, h - u, p);
    m && (st.chrome && o == 13 && m.toB == m.from + 2 && t.text.slice(m.from, m.toB) == yo + yo && m.toB--, e = {
      from: u + m.from,
      to: u + m.toA,
      insert: Et.of(t.text.slice(m.from, m.toB).split(yo))
    });
  } else i && (!n.hasFocus && n.state.facet(xn) || i.main.eq(s)) && (i = null);
  if (!e && !i)
    return !1;
  if (!e && t.typeOver && !s.empty && i && i.main.empty ? e = { from: s.from, to: s.to, insert: n.state.doc.slice(s.from, s.to) } : (st.mac || st.android) && e && e.from == e.to && e.from == s.head - 1 && /^\. ?$/.test(e.insert.toString()) && n.contentDOM.getAttribute("autocorrect") == "off" ? (i && e.insert.length == 2 && (i = X.single(i.main.anchor - 1, i.main.head - 1)), e = { from: e.from, to: e.to, insert: Et.of([e.insert.toString().replace(".", " ")]) }) : e && e.from >= s.from && e.to <= s.to && (e.from != s.from || e.to != s.to) && s.to - s.from - (e.to - e.from) <= 4 ? e = {
    from: s.from,
    to: s.to,
    insert: n.state.doc.slice(s.from, e.from).append(e.insert).append(n.state.doc.slice(e.to, s.to))
  } : st.chrome && e && e.from == e.to && e.from == s.head && e.insert.toString() == `
 ` && n.lineWrapping && (i && (i = X.single(i.main.anchor - 1, i.main.head - 1)), e = { from: s.from, to: s.to, insert: Et.of([" "]) }), e)
    return pm(n, e, i, o);
  if (i && !i.main.eq(s)) {
    let u = !1, c = "select";
    return n.inputState.lastSelectionTime > Date.now() - 50 && (n.inputState.lastSelectionOrigin == "select" && (u = !0), c = n.inputState.lastSelectionOrigin), n.dispatch({ selection: i, scrollIntoView: u, userEvent: c }), !0;
  } else
    return !1;
}
function pm(n, t, e, i = -1) {
  if (st.ios && n.inputState.flushIOSKey(t))
    return !0;
  let s = n.state.selection.main;
  if (st.android && (t.to == s.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (t.from == s.from || t.from == s.from - 1 && n.state.sliceDoc(t.from, s.from) == " ") && t.insert.length == 1 && t.insert.lines == 2 && Hs(n.contentDOM, "Enter", 13) || (t.from == s.from - 1 && t.to == s.to && t.insert.length == 0 || i == 8 && t.insert.length < t.to - t.from && t.to > s.head) && Hs(n.contentDOM, "Backspace", 8) || t.from == s.from && t.to == s.to + 1 && t.insert.length == 0 && Hs(n.contentDOM, "Delete", 46)))
    return !0;
  let o = t.insert.toString();
  n.inputState.composing >= 0 && n.inputState.composing++;
  let u, c = () => u || (u = eC(n, t, e));
  return n.state.facet(nb).some((h) => h(n, t.from, t.to, o, c)) || n.dispatch(c()), !0;
}
function eC(n, t, e) {
  let i, s = n.state, o = s.selection.main;
  if (t.from >= o.from && t.to <= o.to && t.to - t.from >= (o.to - o.from) / 3 && (!e || e.main.empty && e.main.from == t.from + t.insert.length) && n.inputState.composing < 0) {
    let c = o.from < t.from ? s.sliceDoc(o.from, t.from) : "", h = o.to > t.to ? s.sliceDoc(t.to, o.to) : "";
    i = s.replaceSelection(n.state.toText(c + t.insert.sliceString(0, void 0, n.state.lineBreak) + h));
  } else {
    let c = s.changes(t), h = e && e.main.to <= c.newLength ? e.main : void 0;
    if (s.selection.ranges.length > 1 && n.inputState.composing >= 0 && t.to <= o.to && t.to >= o.to - 10) {
      let p = n.state.sliceDoc(t.from, t.to), m, O = e && db(n, e.main.head);
      if (O) {
        let x = t.insert.length - (t.to - t.from);
        m = { from: O.from, to: O.to - x };
      } else
        m = n.state.doc.lineAt(o.head);
      let y = o.to - t.to, S = o.to - o.from;
      i = s.changeByRange((x) => {
        if (x.from == o.from && x.to == o.to)
          return { changes: c, range: h || x.map(c) };
        let w = x.to - y, C = w - p.length;
        if (x.to - x.from != S || n.state.sliceDoc(C, w) != p || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        x.to >= m.from && x.from <= m.to)
          return { range: x };
        let M = s.changes({ from: C, to: w, insert: t.insert }), U = x.to - o.to;
        return {
          changes: M,
          range: h ? X.range(Math.max(0, h.anchor + U), Math.max(0, h.head + U)) : x.map(M)
        };
      });
    } else
      i = {
        changes: c,
        selection: h && s.selection.replaceRange(h)
      };
  }
  let u = "input.type";
  return (n.composing || n.inputState.compositionPendingChange && n.inputState.compositionEndedAt > Date.now() - 50) && (n.inputState.compositionPendingChange = !1, u += ".compose", n.inputState.compositionFirstChange && (u += ".start", n.inputState.compositionFirstChange = !1)), s.update(i, { userEvent: u, scrollIntoView: !0 });
}
function iC(n, t, e, i) {
  let s = Math.min(n.length, t.length), o = 0;
  for (; o < s && n.charCodeAt(o) == t.charCodeAt(o); )
    o++;
  if (o == s && n.length == t.length)
    return null;
  let u = n.length, c = t.length;
  for (; u > 0 && c > 0 && n.charCodeAt(u - 1) == t.charCodeAt(c - 1); )
    u--, c--;
  if (i == "end") {
    let h = Math.max(0, o - Math.min(u, c));
    e -= u + h - o;
  }
  if (u < o && n.length < t.length) {
    let h = e <= o && e >= u ? o - e : 0;
    o -= h, c = o + (c - u), u = o;
  } else if (c < o) {
    let h = e <= o && e >= c ? o - e : 0;
    o -= h, u = o + (u - c), c = o;
  }
  return { from: o, toA: u, toB: c };
}
function nC(n) {
  let t = [];
  if (n.root.activeElement != n.contentDOM)
    return t;
  let { anchorNode: e, anchorOffset: i, focusNode: s, focusOffset: o } = n.observer.selectionRange;
  return e && (t.push(new x1(e, i)), (s != e || o != i) && t.push(new x1(s, o))), t;
}
function lC(n, t) {
  if (n.length == 0)
    return null;
  let e = n[0].pos, i = n.length == 2 ? n[1].pos : e;
  return e > -1 && i > -1 ? X.single(e + t, i + t) : null;
}
class sC {
  setSelectionOrigin(t) {
    this.lastSelectionOrigin = t, this.lastSelectionTime = Date.now();
  }
  constructor(t) {
    this.view = t, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.tabFocusMode = -1, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = !1, this.compositionPendingChange = !1, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = t.hasFocus, st.safari && t.contentDOM.addEventListener("input", () => null), st.gecko && bC(t.contentDOM.ownerDocument);
  }
  handleEvent(t) {
    !dC(this.view, t) || this.ignoreDuringComposition(t) || t.type == "keydown" && this.keydown(t) || (this.view.updateState != 0 ? Promise.resolve().then(() => this.runHandlers(t.type, t)) : this.runHandlers(t.type, t));
  }
  runHandlers(t, e) {
    let i = this.handlers[t];
    if (i) {
      for (let s of i.observers)
        s(this.view, e);
      for (let s of i.handlers) {
        if (e.defaultPrevented)
          break;
        if (s(this.view, e)) {
          e.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(t) {
    let e = rC(t), i = this.handlers, s = this.view.contentDOM;
    for (let o in e)
      if (o != "scroll") {
        let u = !e[o].handlers.length, c = i[o];
        c && u != !c.handlers.length && (s.removeEventListener(o, this.handleEvent), c = null), c || s.addEventListener(o, this.handleEvent, { passive: u });
      }
    for (let o in i)
      o != "scroll" && !e[o] && s.removeEventListener(o, this.handleEvent);
    this.handlers = e;
  }
  keydown(t) {
    if (this.lastKeyCode = t.keyCode, this.lastKeyTime = Date.now(), t.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return !0;
    if (this.tabFocusMode > 0 && t.keyCode != 27 && Ob.indexOf(t.keyCode) < 0 && (this.tabFocusMode = -1), st.android && st.chrome && !t.synthetic && (t.keyCode == 13 || t.keyCode == 8))
      return this.view.observer.delayAndroidKey(t.key, t.keyCode), !0;
    let e;
    return st.ios && !t.synthetic && !t.altKey && !t.metaKey && ((e = gb.find((i) => i.keyCode == t.keyCode)) && !t.ctrlKey || oC.indexOf(t.key) > -1 && t.ctrlKey && !t.shiftKey) ? (this.pendingIOSKey = e || t, setTimeout(() => this.flushIOSKey(), 250), !0) : (t.keyCode != 229 && this.view.observer.forceFlush(), !1);
  }
  flushIOSKey(t) {
    let e = this.pendingIOSKey;
    return !e || e.key == "Enter" && t && t.from < t.to && /^\S+$/.test(t.insert.toString()) ? !1 : (this.pendingIOSKey = void 0, Hs(this.view.contentDOM, e.key, e.keyCode, e instanceof KeyboardEvent ? e : void 0));
  }
  ignoreDuringComposition(t) {
    return /^key/.test(t.type) ? this.composing > 0 ? !0 : st.safari && !st.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = !1, !0) : !1 : !1;
  }
  startMouseSelection(t) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = t;
  }
  update(t) {
    this.view.observer.update(t), this.mouseSelection && this.mouseSelection.update(t), this.draggedContent && t.docChanged && (this.draggedContent = this.draggedContent.map(t.changes)), t.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
function w1(n, t) {
  return (e, i) => {
    try {
      return t.call(n, i, e);
    } catch (s) {
      Xe(e.state, s);
    }
  };
}
function rC(n) {
  let t = /* @__PURE__ */ Object.create(null);
  function e(i) {
    return t[i] || (t[i] = { observers: [], handlers: [] });
  }
  for (let i of n) {
    let s = i.spec;
    if (s && s.domEventHandlers)
      for (let o in s.domEventHandlers) {
        let u = s.domEventHandlers[o];
        u && e(o).handlers.push(w1(i.value, u));
      }
    if (s && s.domEventObservers)
      for (let o in s.domEventObservers) {
        let u = s.domEventObservers[o];
        u && e(o).observers.push(w1(i.value, u));
      }
  }
  for (let i in Ei)
    e(i).handlers.push(Ei[i]);
  for (let i in Si)
    e(i).observers.push(Si[i]);
  return t;
}
const gb = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], oC = "dthko", Ob = [16, 17, 18, 20, 91, 92, 224, 225], bu = 6;
function xu(n) {
  return Math.max(0, n) * 0.7 + 8;
}
function aC(n, t) {
  return Math.max(Math.abs(n.clientX - t.clientX), Math.abs(n.clientY - t.clientY));
}
class uC {
  constructor(t, e, i, s) {
    this.view = t, this.startEvent = e, this.style = i, this.mustSelect = s, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = e, this.scrollParents = gA(t.contentDOM), this.atoms = t.state.facet(hm).map((u) => u(t));
    let o = t.contentDOM.ownerDocument;
    o.addEventListener("mousemove", this.move = this.move.bind(this)), o.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = e.shiftKey, this.multiple = t.state.facet(At.allowMultipleSelections) && cC(t, e), this.dragging = hC(t, e) && Sb(e) == 1 ? null : !1;
  }
  start(t) {
    this.dragging === !1 && this.select(t);
  }
  move(t) {
    if (t.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && aC(this.startEvent, t) < 10)
      return;
    this.select(this.lastEvent = t);
    let e = 0, i = 0, s = 0, o = 0, u = this.view.win.innerWidth, c = this.view.win.innerHeight;
    this.scrollParents.x && ({ left: s, right: u } = this.scrollParents.x.getBoundingClientRect()), this.scrollParents.y && ({ top: o, bottom: c } = this.scrollParents.y.getBoundingClientRect());
    let h = dm(this.view);
    t.clientX - h.left <= s + bu ? e = -xu(s - t.clientX) : t.clientX + h.right >= u - bu && (e = xu(t.clientX - u)), t.clientY - h.top <= o + bu ? i = -xu(o - t.clientY) : t.clientY + h.bottom >= c - bu && (i = xu(t.clientY - c)), this.setScrollSpeed(e, i);
  }
  up(t) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || t.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let t = this.view.contentDOM.ownerDocument;
    t.removeEventListener("mousemove", this.move), t.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(t, e) {
    this.scrollSpeed = { x: t, y: e }, t || e ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    let { x: t, y: e } = this.scrollSpeed;
    t && this.scrollParents.x && (this.scrollParents.x.scrollLeft += t, t = 0), e && this.scrollParents.y && (this.scrollParents.y.scrollTop += e, e = 0), (t || e) && this.view.win.scrollBy(t, e), this.dragging === !1 && this.select(this.lastEvent);
  }
  skipAtoms(t) {
    let e = null;
    for (let i = 0; i < t.ranges.length; i++) {
      let s = t.ranges[i], o = null;
      if (s.empty) {
        let u = Wu(this.atoms, s.from, 0);
        u != s.from && (o = X.cursor(u, -1));
      } else {
        let u = Wu(this.atoms, s.from, -1), c = Wu(this.atoms, s.to, 1);
        (u != s.from || c != s.to) && (o = X.range(s.from == s.anchor ? u : c, s.from == s.head ? u : c));
      }
      o && (e || (e = t.ranges.slice()), e[i] = o);
    }
    return e ? X.create(e, t.mainIndex) : t;
  }
  select(t) {
    let { view: e } = this, i = this.skipAtoms(this.style.get(t, this.extend, this.multiple));
    (this.mustSelect || !i.eq(e.state.selection, this.dragging === !1)) && this.view.dispatch({
      selection: i,
      userEvent: "select.pointer"
    }), this.mustSelect = !1;
  }
  update(t) {
    t.transactions.some((e) => e.isUserEvent("input.type")) ? this.destroy() : this.style.update(t) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function cC(n, t) {
  let e = n.state.facet(IS);
  return e.length ? e[0](t) : st.mac ? t.metaKey : t.ctrlKey;
}
function fC(n, t) {
  let e = n.state.facet(tb);
  return e.length ? e[0](t) : st.mac ? !t.altKey : !t.ctrlKey;
}
function hC(n, t) {
  let { main: e } = n.state.selection;
  if (e.empty)
    return !1;
  let i = Qo(n.root);
  if (!i || i.rangeCount == 0)
    return !0;
  let s = i.getRangeAt(0).getClientRects();
  for (let o = 0; o < s.length; o++) {
    let u = s[o];
    if (u.left <= t.clientX && u.right >= t.clientX && u.top <= t.clientY && u.bottom >= t.clientY)
      return !0;
  }
  return !1;
}
function dC(n, t) {
  if (!t.bubbles)
    return !0;
  if (t.defaultPrevented)
    return !1;
  for (let e = t.target, i; e != n.contentDOM; e = e.parentNode)
    if (!e || e.nodeType == 11 || (i = Ht.get(e)) && i.ignoreEvent(t))
      return !1;
  return !0;
}
const Ei = /* @__PURE__ */ Object.create(null), Si = /* @__PURE__ */ Object.create(null), yb = st.ie && st.ie_version < 15 || st.ios && st.webkit_version < 604;
function pC(n) {
  let t = n.dom.parentNode;
  if (!t)
    return;
  let e = t.appendChild(document.createElement("textarea"));
  e.style.cssText = "position: fixed; left: -10000px; top: 10px", e.focus(), setTimeout(() => {
    n.focus(), e.remove(), vb(n, e.value);
  }, 50);
}
function _c(n, t, e) {
  for (let i of n.facet(t))
    e = i(e, n);
  return e;
}
function vb(n, t) {
  t = _c(n.state, um, t);
  let { state: e } = n, i, s = 1, o = e.toText(t), u = o.lines == e.selection.ranges.length;
  if (Rp != null && e.selection.ranges.every((h) => h.empty) && Rp == o.toString()) {
    let h = -1;
    i = e.changeByRange((p) => {
      let m = e.doc.lineAt(p.from);
      if (m.from == h)
        return { range: p };
      h = m.from;
      let O = e.toText((u ? o.line(s++).text : t) + e.lineBreak);
      return {
        changes: { from: m.from, insert: O },
        range: X.cursor(p.from + O.length)
      };
    });
  } else u ? i = e.changeByRange((h) => {
    let p = o.line(s++);
    return {
      changes: { from: h.from, to: h.to, insert: p.text },
      range: X.cursor(h.from + p.length)
    };
  }) : i = e.replaceSelection(o);
  n.dispatch(i, {
    userEvent: "input.paste",
    scrollIntoView: !0
  });
}
Si.scroll = (n) => {
  n.inputState.lastScrollTop = n.scrollDOM.scrollTop, n.inputState.lastScrollLeft = n.scrollDOM.scrollLeft;
};
Ei.keydown = (n, t) => (n.inputState.setSelectionOrigin("select"), t.keyCode == 27 && n.inputState.tabFocusMode != 0 && (n.inputState.tabFocusMode = Date.now() + 2e3), !1);
Si.touchstart = (n, t) => {
  n.inputState.lastTouchTime = Date.now(), n.inputState.setSelectionOrigin("select.pointer");
};
Si.touchmove = (n) => {
  n.inputState.setSelectionOrigin("select.pointer");
};
Ei.mousedown = (n, t) => {
  if (n.observer.flush(), n.inputState.lastTouchTime > Date.now() - 2e3)
    return !1;
  let e = null;
  for (let i of n.state.facet(eb))
    if (e = i(n, t), e)
      break;
  if (!e && t.button == 0 && (e = OC(n, t)), e) {
    let i = !n.hasFocus;
    n.inputState.startMouseSelection(new uC(n, t, e, i)), i && n.observer.ignore(() => {
      qS(n.contentDOM);
      let o = n.root.activeElement;
      o && !o.contains(n.contentDOM) && o.blur();
    });
    let s = n.inputState.mouseSelection;
    if (s)
      return s.start(t), s.dragging === !1;
  }
  return !1;
};
function T1(n, t, e, i) {
  if (i == 1)
    return X.cursor(t, e);
  if (i == 2)
    return $A(n.state, t, e);
  {
    let s = le.find(n.docView, t), o = n.state.doc.lineAt(s ? s.posAtEnd : t), u = s ? s.posAtStart : o.from, c = s ? s.posAtEnd : o.to;
    return c < n.state.doc.length && c == o.to && c++, X.range(u, c);
  }
}
let k1 = (n, t, e) => t >= e.top && t <= e.bottom && n >= e.left && n <= e.right;
function mC(n, t, e, i) {
  let s = le.find(n.docView, t);
  if (!s)
    return 1;
  let o = t - s.posAtStart;
  if (o == 0)
    return 1;
  if (o == s.length)
    return -1;
  let u = s.coordsAt(o, -1);
  if (u && k1(e, i, u))
    return -1;
  let c = s.coordsAt(o, 1);
  return c && k1(e, i, c) ? 1 : u && u.bottom >= i ? -1 : 1;
}
function A1(n, t) {
  let e = n.posAtCoords({ x: t.clientX, y: t.clientY }, !1);
  return { pos: e, bias: mC(n, e, t.clientX, t.clientY) };
}
const gC = st.ie && st.ie_version <= 11;
let C1 = null, E1 = 0, M1 = 0;
function Sb(n) {
  if (!gC)
    return n.detail;
  let t = C1, e = M1;
  return C1 = n, M1 = Date.now(), E1 = !t || e > Date.now() - 400 && Math.abs(t.clientX - n.clientX) < 2 && Math.abs(t.clientY - n.clientY) < 2 ? (E1 + 1) % 3 : 1;
}
function OC(n, t) {
  let e = A1(n, t), i = Sb(t), s = n.state.selection;
  return {
    update(o) {
      o.docChanged && (e.pos = o.changes.mapPos(e.pos), s = s.map(o.changes));
    },
    get(o, u, c) {
      let h = A1(n, o), p, m = T1(n, h.pos, h.bias, i);
      if (e.pos != h.pos && !u) {
        let O = T1(n, e.pos, e.bias, i), y = Math.min(O.from, m.from), S = Math.max(O.to, m.to);
        m = y < m.from ? X.range(y, S) : X.range(S, y);
      }
      return u ? s.replaceRange(s.main.extend(m.from, m.to)) : c && i == 1 && s.ranges.length > 1 && (p = yC(s, h.pos)) ? p : c ? s.addRange(m) : X.create([m]);
    }
  };
}
function yC(n, t) {
  for (let e = 0; e < n.ranges.length; e++) {
    let { from: i, to: s } = n.ranges[e];
    if (i <= t && s >= t)
      return X.create(n.ranges.slice(0, e).concat(n.ranges.slice(e + 1)), n.mainIndex == e ? 0 : n.mainIndex - (n.mainIndex > e ? 1 : 0));
  }
  return null;
}
Ei.dragstart = (n, t) => {
  let { selection: { main: e } } = n.state;
  if (t.target.draggable) {
    let s = n.docView.nearest(t.target);
    if (s && s.isWidget) {
      let o = s.posAtStart, u = o + s.length;
      (o >= e.to || u <= e.from) && (e = X.range(o, u));
    }
  }
  let { inputState: i } = n;
  return i.mouseSelection && (i.mouseSelection.dragging = !0), i.draggedContent = e, t.dataTransfer && (t.dataTransfer.setData("Text", _c(n.state, cm, n.state.sliceDoc(e.from, e.to))), t.dataTransfer.effectAllowed = "copyMove"), !1;
};
Ei.dragend = (n) => (n.inputState.draggedContent = null, !1);
function Q1(n, t, e, i) {
  if (e = _c(n.state, um, e), !e)
    return;
  let s = n.posAtCoords({ x: t.clientX, y: t.clientY }, !1), { draggedContent: o } = n.inputState, u = i && o && fC(n, t) ? { from: o.from, to: o.to } : null, c = { from: s, insert: e }, h = n.state.changes(u ? [u, c] : c);
  n.focus(), n.dispatch({
    changes: h,
    selection: { anchor: h.mapPos(s, -1), head: h.mapPos(s, 1) },
    userEvent: u ? "move.drop" : "input.drop"
  }), n.inputState.draggedContent = null;
}
Ei.drop = (n, t) => {
  if (!t.dataTransfer)
    return !1;
  if (n.state.readOnly)
    return !0;
  let e = t.dataTransfer.files;
  if (e && e.length) {
    let i = Array(e.length), s = 0, o = () => {
      ++s == e.length && Q1(n, t, i.filter((u) => u != null).join(n.state.lineBreak), !1);
    };
    for (let u = 0; u < e.length; u++) {
      let c = new FileReader();
      c.onerror = o, c.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(c.result) || (i[u] = c.result), o();
      }, c.readAsText(e[u]);
    }
    return !0;
  } else {
    let i = t.dataTransfer.getData("Text");
    if (i)
      return Q1(n, t, i, !0), !0;
  }
  return !1;
};
Ei.paste = (n, t) => {
  if (n.state.readOnly)
    return !0;
  n.observer.flush();
  let e = yb ? null : t.clipboardData;
  return e ? (vb(n, e.getData("text/plain") || e.getData("text/uri-list")), !0) : (pC(n), !1);
};
function vC(n, t) {
  let e = n.dom.parentNode;
  if (!e)
    return;
  let i = e.appendChild(document.createElement("textarea"));
  i.style.cssText = "position: fixed; left: -10000px; top: 10px", i.value = t, i.focus(), i.selectionEnd = t.length, i.selectionStart = 0, setTimeout(() => {
    i.remove(), n.focus();
  }, 50);
}
function SC(n) {
  let t = [], e = [], i = !1;
  for (let s of n.selection.ranges)
    s.empty || (t.push(n.sliceDoc(s.from, s.to)), e.push(s));
  if (!t.length) {
    let s = -1;
    for (let { from: o } of n.selection.ranges) {
      let u = n.doc.lineAt(o);
      u.number > s && (t.push(u.text), e.push({ from: u.from, to: Math.min(n.doc.length, u.to + 1) })), s = u.number;
    }
    i = !0;
  }
  return { text: _c(n, cm, t.join(n.lineBreak)), ranges: e, linewise: i };
}
let Rp = null;
Ei.copy = Ei.cut = (n, t) => {
  let { text: e, ranges: i, linewise: s } = SC(n.state);
  if (!e && !s)
    return !1;
  Rp = s ? e : null, t.type == "cut" && !n.state.readOnly && n.dispatch({
    changes: i,
    scrollIntoView: !0,
    userEvent: "delete.cut"
  });
  let o = yb ? null : t.clipboardData;
  return o ? (o.clearData(), o.setData("text/plain", e), !0) : (vC(n, e), !1);
};
const bb = /* @__PURE__ */ Zi.define();
function xb(n, t) {
  let e = [];
  for (let i of n.facet(lb)) {
    let s = i(n, t);
    s && e.push(s);
  }
  return e.length ? n.update({ effects: e, annotations: bb.of(!0) }) : null;
}
function wb(n) {
  setTimeout(() => {
    let t = n.hasFocus;
    if (t != n.inputState.notifiedFocused) {
      let e = xb(n.state, t);
      e ? n.dispatch(e) : n.update([]);
    }
  }, 10);
}
Si.focus = (n) => {
  n.inputState.lastFocusTime = Date.now(), !n.scrollDOM.scrollTop && (n.inputState.lastScrollTop || n.inputState.lastScrollLeft) && (n.scrollDOM.scrollTop = n.inputState.lastScrollTop, n.scrollDOM.scrollLeft = n.inputState.lastScrollLeft), wb(n);
};
Si.blur = (n) => {
  n.observer.clearSelectionRange(), wb(n);
};
Si.compositionstart = Si.compositionupdate = (n) => {
  n.observer.editContext || (n.inputState.compositionFirstChange == null && (n.inputState.compositionFirstChange = !0), n.inputState.composing < 0 && (n.inputState.composing = 0));
};
Si.compositionend = (n) => {
  n.observer.editContext || (n.inputState.composing = -1, n.inputState.compositionEndedAt = Date.now(), n.inputState.compositionPendingKey = !0, n.inputState.compositionPendingChange = n.observer.pendingRecords().length > 0, n.inputState.compositionFirstChange = null, st.chrome && st.android ? n.observer.flushSoon() : n.inputState.compositionPendingChange ? Promise.resolve().then(() => n.observer.flush()) : setTimeout(() => {
    n.inputState.composing < 0 && n.docView.hasComposition && n.update([]);
  }, 50));
};
Si.contextmenu = (n) => {
  n.inputState.lastContextMenu = Date.now();
};
Ei.beforeinput = (n, t) => {
  var e, i;
  if (t.inputType == "insertReplacementText" && n.observer.editContext) {
    let o = (e = t.dataTransfer) === null || e === void 0 ? void 0 : e.getData("text/plain"), u = t.getTargetRanges();
    if (o && u.length) {
      let c = u[0], h = n.posAtDOM(c.startContainer, c.startOffset), p = n.posAtDOM(c.endContainer, c.endOffset);
      return pm(n, { from: h, to: p, insert: n.state.toText(o) }, null), !0;
    }
  }
  let s;
  if (st.chrome && st.android && (s = gb.find((o) => o.inputType == t.inputType)) && (n.observer.delayAndroidKey(s.key, s.keyCode), s.key == "Backspace" || s.key == "Delete")) {
    let o = ((i = window.visualViewport) === null || i === void 0 ? void 0 : i.height) || 0;
    setTimeout(() => {
      var u;
      (((u = window.visualViewport) === null || u === void 0 ? void 0 : u.height) || 0) > o + 10 && n.hasFocus && (n.contentDOM.blur(), n.focus());
    }, 100);
  }
  return st.ios && t.inputType == "deleteContentForward" && n.observer.flushSoon(), st.safari && t.inputType == "insertText" && n.inputState.composing >= 0 && setTimeout(() => Si.compositionend(n, t), 20), !1;
};
const R1 = /* @__PURE__ */ new Set();
function bC(n) {
  R1.has(n) || (R1.add(n), n.addEventListener("copy", () => {
  }), n.addEventListener("cut", () => {
  }));
}
const D1 = ["pre-wrap", "normal", "pre-line", "break-spaces"];
let Ks = !1;
function z1() {
  Ks = !1;
}
class xC {
  constructor(t) {
    this.lineWrapping = t, this.doc = Et.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30;
  }
  heightForGap(t, e) {
    let i = this.doc.lineAt(e).number - this.doc.lineAt(t).number + 1;
    return this.lineWrapping && (i += Math.max(0, Math.ceil((e - t - i * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * i;
  }
  heightForLine(t) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((t - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(t) {
    return this.doc = t, this;
  }
  mustRefreshForWrapping(t) {
    return D1.indexOf(t) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(t) {
    let e = !1;
    for (let i = 0; i < t.length; i++) {
      let s = t[i];
      s < 0 ? i++ : this.heightSamples[Math.floor(s * 10)] || (e = !0, this.heightSamples[Math.floor(s * 10)] = !0);
    }
    return e;
  }
  refresh(t, e, i, s, o, u) {
    let c = D1.indexOf(t) > -1, h = Math.round(e) != Math.round(this.lineHeight) || this.lineWrapping != c;
    if (this.lineWrapping = c, this.lineHeight = e, this.charWidth = i, this.textHeight = s, this.lineLength = o, h) {
      this.heightSamples = {};
      for (let p = 0; p < u.length; p++) {
        let m = u[p];
        m < 0 ? p++ : this.heightSamples[Math.floor(m * 10)] = !0;
      }
    }
    return h;
  }
}
class wC {
  constructor(t, e) {
    this.from = t, this.heights = e, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class Xi {
  /**
  @internal
  */
  constructor(t, e, i, s, o) {
    this.from = t, this.length = e, this.top = i, this.height = s, this._content = o;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? ze.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof ol ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(t) {
    let e = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(t._content) ? t._content : [t]);
    return new Xi(this.from, this.length + t.length, this.top, this.height + t.height, e);
  }
}
var $t = /* @__PURE__ */ function(n) {
  return n[n.ByPos = 0] = "ByPos", n[n.ByHeight = 1] = "ByHeight", n[n.ByPosNoHeight = 2] = "ByPosNoHeight", n;
}($t || ($t = {}));
const Gu = 1e-3;
class qe {
  constructor(t, e, i = 2) {
    this.length = t, this.height = e, this.flags = i;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(t) {
    this.flags = (t ? 2 : 0) | this.flags & -3;
  }
  setHeight(t) {
    this.height != t && (Math.abs(this.height - t) > Gu && (Ks = !0), this.height = t);
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(t, e, i) {
    return qe.of(i);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(t, e) {
    e.push(this);
  }
  decomposeRight(t, e) {
    e.push(this);
  }
  applyChanges(t, e, i, s) {
    let o = this, u = i.doc;
    for (let c = s.length - 1; c >= 0; c--) {
      let { fromA: h, toA: p, fromB: m, toB: O } = s[c], y = o.lineAt(h, $t.ByPosNoHeight, i.setDoc(e), 0, 0), S = y.to >= p ? y : o.lineAt(p, $t.ByPosNoHeight, i, 0, 0);
      for (O += S.to - p, p = S.to; c > 0 && y.from <= s[c - 1].toA; )
        h = s[c - 1].fromA, m = s[c - 1].fromB, c--, h < y.from && (y = o.lineAt(h, $t.ByPosNoHeight, i, 0, 0));
      m += y.from - h, h = y.from;
      let x = mm.build(i.setDoc(u), t, m, O);
      o = cc(o, o.replace(h, p, x));
    }
    return o.updateHeight(i, 0);
  }
  static empty() {
    return new li(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(t) {
    if (t.length == 1)
      return t[0];
    let e = 0, i = t.length, s = 0, o = 0;
    for (; ; )
      if (e == i)
        if (s > o * 2) {
          let c = t[e - 1];
          c.break ? t.splice(--e, 1, c.left, null, c.right) : t.splice(--e, 1, c.left, c.right), i += 1 + c.break, s -= c.size;
        } else if (o > s * 2) {
          let c = t[i];
          c.break ? t.splice(i, 1, c.left, null, c.right) : t.splice(i, 1, c.left, c.right), i += 2 + c.break, o -= c.size;
        } else
          break;
      else if (s < o) {
        let c = t[e++];
        c && (s += c.size);
      } else {
        let c = t[--i];
        c && (o += c.size);
      }
    let u = 0;
    return t[e - 1] == null ? (u = 1, e--) : t[e] == null && (u = 1, i++), new TC(qe.of(t.slice(0, e)), u, qe.of(t.slice(i)));
  }
}
function cc(n, t) {
  return n == t ? n : (n.constructor != t.constructor && (Ks = !0), t);
}
qe.prototype.size = 1;
class Tb extends qe {
  constructor(t, e, i) {
    super(t, e), this.deco = i;
  }
  blockAt(t, e, i, s) {
    return new Xi(s, this.length, i, this.height, this.deco || 0);
  }
  lineAt(t, e, i, s, o) {
    return this.blockAt(0, i, s, o);
  }
  forEachLine(t, e, i, s, o, u) {
    t <= o + this.length && e >= o && u(this.blockAt(0, i, s, o));
  }
  updateHeight(t, e = 0, i = !1, s) {
    return s && s.from <= e && s.more && this.setHeight(s.heights[s.index++]), this.outdated = !1, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class li extends Tb {
  constructor(t, e) {
    super(t, e, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(t, e, i, s) {
    return new Xi(s, this.length, i, this.height, this.breaks);
  }
  replace(t, e, i) {
    let s = i[0];
    return i.length == 1 && (s instanceof li || s instanceof be && s.flags & 4) && Math.abs(this.length - s.length) < 10 ? (s instanceof be ? s = new li(s.length, this.height) : s.height = this.height, this.outdated || (s.outdated = !1), s) : qe.of(i);
  }
  updateHeight(t, e = 0, i = !1, s) {
    return s && s.from <= e && s.more ? this.setHeight(s.heights[s.index++]) : (i || this.outdated) && this.setHeight(Math.max(this.widgetHeight, t.heightForLine(this.length - this.collapsed)) + this.breaks * t.lineHeight), this.outdated = !1, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class be extends qe {
  constructor(t) {
    super(t, 0);
  }
  heightMetrics(t, e) {
    let i = t.doc.lineAt(e).number, s = t.doc.lineAt(e + this.length).number, o = s - i + 1, u, c = 0;
    if (t.lineWrapping) {
      let h = Math.min(this.height, t.lineHeight * o);
      u = h / o, this.length > o + 1 && (c = (this.height - h) / (this.length - o - 1));
    } else
      u = this.height / o;
    return { firstLine: i, lastLine: s, perLine: u, perChar: c };
  }
  blockAt(t, e, i, s) {
    let { firstLine: o, lastLine: u, perLine: c, perChar: h } = this.heightMetrics(e, s);
    if (e.lineWrapping) {
      let p = s + (t < e.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (t - i) / this.height)) * this.length)), m = e.doc.lineAt(p), O = c + m.length * h, y = Math.max(i, t - O / 2);
      return new Xi(m.from, m.length, y, O, 0);
    } else {
      let p = Math.max(0, Math.min(u - o, Math.floor((t - i) / c))), { from: m, length: O } = e.doc.line(o + p);
      return new Xi(m, O, i + c * p, c, 0);
    }
  }
  lineAt(t, e, i, s, o) {
    if (e == $t.ByHeight)
      return this.blockAt(t, i, s, o);
    if (e == $t.ByPosNoHeight) {
      let { from: S, to: x } = i.doc.lineAt(t);
      return new Xi(S, x - S, 0, 0, 0);
    }
    let { firstLine: u, perLine: c, perChar: h } = this.heightMetrics(i, o), p = i.doc.lineAt(t), m = c + p.length * h, O = p.number - u, y = s + c * O + h * (p.from - o - O);
    return new Xi(p.from, p.length, Math.max(s, Math.min(y, s + this.height - m)), m, 0);
  }
  forEachLine(t, e, i, s, o, u) {
    t = Math.max(t, o), e = Math.min(e, o + this.length);
    let { firstLine: c, perLine: h, perChar: p } = this.heightMetrics(i, o);
    for (let m = t, O = s; m <= e; ) {
      let y = i.doc.lineAt(m);
      if (m == t) {
        let x = y.number - c;
        O += h * x + p * (t - o - x);
      }
      let S = h + p * y.length;
      u(new Xi(y.from, y.length, O, S, 0)), O += S, m = y.to + 1;
    }
  }
  replace(t, e, i) {
    let s = this.length - e;
    if (s > 0) {
      let o = i[i.length - 1];
      o instanceof be ? i[i.length - 1] = new be(o.length + s) : i.push(null, new be(s - 1));
    }
    if (t > 0) {
      let o = i[0];
      o instanceof be ? i[0] = new be(t + o.length) : i.unshift(new be(t - 1), null);
    }
    return qe.of(i);
  }
  decomposeLeft(t, e) {
    e.push(new be(t - 1), null);
  }
  decomposeRight(t, e) {
    e.push(null, new be(this.length - t - 1));
  }
  updateHeight(t, e = 0, i = !1, s) {
    let o = e + this.length;
    if (s && s.from <= e + this.length && s.more) {
      let u = [], c = Math.max(e, s.from), h = -1;
      for (s.from > e && u.push(new be(s.from - e - 1).updateHeight(t, e)); c <= o && s.more; ) {
        let m = t.doc.lineAt(c).length;
        u.length && u.push(null);
        let O = s.heights[s.index++];
        h == -1 ? h = O : Math.abs(O - h) >= Gu && (h = -2);
        let y = new li(m, O);
        y.outdated = !1, u.push(y), c += m + 1;
      }
      c <= o && u.push(null, new be(o - c).updateHeight(t, c));
      let p = qe.of(u);
      return (h < 0 || Math.abs(p.height - this.height) >= Gu || Math.abs(h - this.heightMetrics(t, e).perLine) >= Gu) && (Ks = !0), cc(this, p);
    } else (i || this.outdated) && (this.setHeight(t.heightForGap(e, e + this.length)), this.outdated = !1);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class TC extends qe {
  constructor(t, e, i) {
    super(t.length + e + i.length, t.height + i.height, e | (t.outdated || i.outdated ? 2 : 0)), this.left = t, this.right = i, this.size = t.size + i.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(t, e, i, s) {
    let o = i + this.left.height;
    return t < o ? this.left.blockAt(t, e, i, s) : this.right.blockAt(t, e, o, s + this.left.length + this.break);
  }
  lineAt(t, e, i, s, o) {
    let u = s + this.left.height, c = o + this.left.length + this.break, h = e == $t.ByHeight ? t < u : t < c, p = h ? this.left.lineAt(t, e, i, s, o) : this.right.lineAt(t, e, i, u, c);
    if (this.break || (h ? p.to < c : p.from > c))
      return p;
    let m = e == $t.ByPosNoHeight ? $t.ByPosNoHeight : $t.ByPos;
    return h ? p.join(this.right.lineAt(c, m, i, u, c)) : this.left.lineAt(c, m, i, s, o).join(p);
  }
  forEachLine(t, e, i, s, o, u) {
    let c = s + this.left.height, h = o + this.left.length + this.break;
    if (this.break)
      t < h && this.left.forEachLine(t, e, i, s, o, u), e >= h && this.right.forEachLine(t, e, i, c, h, u);
    else {
      let p = this.lineAt(h, $t.ByPos, i, s, o);
      t < p.from && this.left.forEachLine(t, p.from - 1, i, s, o, u), p.to >= t && p.from <= e && u(p), e > p.to && this.right.forEachLine(p.to + 1, e, i, c, h, u);
    }
  }
  replace(t, e, i) {
    let s = this.left.length + this.break;
    if (e < s)
      return this.balanced(this.left.replace(t, e, i), this.right);
    if (t > this.left.length)
      return this.balanced(this.left, this.right.replace(t - s, e - s, i));
    let o = [];
    t > 0 && this.decomposeLeft(t, o);
    let u = o.length;
    for (let c of i)
      o.push(c);
    if (t > 0 && q1(o, u - 1), e < this.length) {
      let c = o.length;
      this.decomposeRight(e, o), q1(o, c);
    }
    return qe.of(o);
  }
  decomposeLeft(t, e) {
    let i = this.left.length;
    if (t <= i)
      return this.left.decomposeLeft(t, e);
    e.push(this.left), this.break && (i++, t >= i && e.push(null)), t > i && this.right.decomposeLeft(t - i, e);
  }
  decomposeRight(t, e) {
    let i = this.left.length, s = i + this.break;
    if (t >= s)
      return this.right.decomposeRight(t - s, e);
    t < i && this.left.decomposeRight(t, e), this.break && t < s && e.push(null), e.push(this.right);
  }
  balanced(t, e) {
    return t.size > 2 * e.size || e.size > 2 * t.size ? qe.of(this.break ? [t, null, e] : [t, e]) : (this.left = cc(this.left, t), this.right = cc(this.right, e), this.setHeight(t.height + e.height), this.outdated = t.outdated || e.outdated, this.size = t.size + e.size, this.length = t.length + this.break + e.length, this);
  }
  updateHeight(t, e = 0, i = !1, s) {
    let { left: o, right: u } = this, c = e + o.length + this.break, h = null;
    return s && s.from <= e + o.length && s.more ? h = o = o.updateHeight(t, e, i, s) : o.updateHeight(t, e, i), s && s.from <= c + u.length && s.more ? h = u = u.updateHeight(t, c, i, s) : u.updateHeight(t, c, i), h ? this.balanced(o, u) : (this.height = this.left.height + this.right.height, this.outdated = !1, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function q1(n, t) {
  let e, i;
  n[t] == null && (e = n[t - 1]) instanceof be && (i = n[t + 1]) instanceof be && n.splice(t - 1, 3, new be(e.length + 1 + i.length));
}
const kC = 5;
class mm {
  constructor(t, e) {
    this.pos = t, this.oracle = e, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = t;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(t, e) {
    if (this.lineStart > -1) {
      let i = Math.min(e, this.lineEnd), s = this.nodes[this.nodes.length - 1];
      s instanceof li ? s.length += i - this.pos : (i > this.pos || !this.isCovered) && this.nodes.push(new li(i - this.pos, -1)), this.writtenTo = i, e > i && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = e;
  }
  point(t, e, i) {
    if (t < e || i.heightRelevant) {
      let s = i.widget ? i.widget.estimatedHeight : 0, o = i.widget ? i.widget.lineBreaks : 0;
      s < 0 && (s = this.oracle.lineHeight);
      let u = e - t;
      i.block ? this.addBlock(new Tb(u, s, i)) : (u || o || s >= kC) && this.addLineDeco(s, o, u);
    } else e > t && this.span(t, e);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: t, to: e } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = t, this.lineEnd = e, this.writtenTo < t && ((this.writtenTo < t - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, t - 1)), this.nodes.push(null)), this.pos > t && this.nodes.push(new li(this.pos - t, -1)), this.writtenTo = this.pos;
  }
  blankContent(t, e) {
    let i = new be(e - t);
    return this.oracle.doc.lineAt(t).to == e && (i.flags |= 4), i;
  }
  ensureLine() {
    this.enterLine();
    let t = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (t instanceof li)
      return t;
    let e = new li(0, -1);
    return this.nodes.push(e), e;
  }
  addBlock(t) {
    this.enterLine();
    let e = t.deco;
    e && e.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(t), this.writtenTo = this.pos = this.pos + t.length, e && e.endSide > 0 && (this.covering = t);
  }
  addLineDeco(t, e, i) {
    let s = this.ensureLine();
    s.length += i, s.collapsed += i, s.widgetHeight = Math.max(s.widgetHeight, t), s.breaks += e, this.writtenTo = this.pos = this.pos + i;
  }
  finish(t) {
    let e = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(e instanceof li) && !this.isCovered ? this.nodes.push(new li(0, -1)) : (this.writtenTo < this.pos || e == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i = t;
    for (let s of this.nodes)
      s instanceof li && s.updateHeight(this.oracle, i), i += s ? s.length : 1;
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(t, e, i, s) {
    let o = new mm(i, t);
    return Rt.spans(e, i, s, o, 0), o.finish(i);
  }
}
function AC(n, t, e) {
  let i = new CC();
  return Rt.compare(n, t, e, i, 0), i.changes;
}
class CC {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(t, e, i, s) {
    (t < e || i && i.heightRelevant || s && s.heightRelevant) && ju(t, e, this.changes, 5);
  }
}
function EC(n, t) {
  let e = n.getBoundingClientRect(), i = n.ownerDocument, s = i.defaultView || window, o = Math.max(0, e.left), u = Math.min(s.innerWidth, e.right), c = Math.max(0, e.top), h = Math.min(s.innerHeight, e.bottom);
  for (let p = n.parentNode; p && p != i.body; )
    if (p.nodeType == 1) {
      let m = p, O = window.getComputedStyle(m);
      if ((m.scrollHeight > m.clientHeight || m.scrollWidth > m.clientWidth) && O.overflow != "visible") {
        let y = m.getBoundingClientRect();
        o = Math.max(o, y.left), u = Math.min(u, y.right), c = Math.max(c, y.top), h = Math.min(p == n.parentNode ? s.innerHeight : h, y.bottom);
      }
      p = O.position == "absolute" || O.position == "fixed" ? m.offsetParent : m.parentNode;
    } else if (p.nodeType == 11)
      p = p.host;
    else
      break;
  return {
    left: o - e.left,
    right: Math.max(o, u) - e.left,
    top: c - (e.top + t),
    bottom: Math.max(c, h) - (e.top + t)
  };
}
function MC(n) {
  let t = n.getBoundingClientRect(), e = n.ownerDocument.defaultView || window;
  return t.left < e.innerWidth && t.right > 0 && t.top < e.innerHeight && t.bottom > 0;
}
function QC(n, t) {
  let e = n.getBoundingClientRect();
  return {
    left: 0,
    right: e.right - e.left,
    top: t,
    bottom: e.bottom - (e.top + t)
  };
}
class kd {
  constructor(t, e, i, s) {
    this.from = t, this.to = e, this.size = i, this.displaySize = s;
  }
  static same(t, e) {
    if (t.length != e.length)
      return !1;
    for (let i = 0; i < t.length; i++) {
      let s = t[i], o = e[i];
      if (s.from != o.from || s.to != o.to || s.size != o.size)
        return !1;
    }
    return !0;
  }
  draw(t, e) {
    return ft.replace({
      widget: new RC(this.displaySize * (e ? t.scaleY : t.scaleX), e)
    }).range(this.from, this.to);
  }
}
class RC extends Ki {
  constructor(t, e) {
    super(), this.size = t, this.vertical = e;
  }
  eq(t) {
    return t.size == this.size && t.vertical == this.vertical;
  }
  toDOM() {
    let t = document.createElement("div");
    return this.vertical ? t.style.height = this.size + "px" : (t.style.width = this.size + "px", t.style.height = "2px", t.style.display = "inline-block"), t;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class _1 {
  constructor(t) {
    this.state = t, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = !0, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = !1, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = B1, this.scrollTarget = null, this.printing = !1, this.mustMeasureContent = !0, this.defaultTextDirection = jt.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = !1;
    let e = t.facet(fm).some((i) => typeof i != "function" && i.class == "cm-lineWrapping");
    this.heightOracle = new xC(e), this.stateDeco = t.facet(Ro).filter((i) => typeof i != "function"), this.heightMap = qe.empty().applyChanges(this.stateDeco, Et.empty, this.heightOracle.setDoc(t.doc), [new vi(0, 0, 0, t.doc.length)]);
    for (let i = 0; i < 2 && (this.viewport = this.getViewport(0, null), !!this.updateForViewport()); i++)
      ;
    this.updateViewportLines(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = ft.set(this.lineGaps.map((i) => i.draw(this, !1))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let t = [this.viewport], { main: e } = this.state.selection;
    for (let i = 0; i <= 1; i++) {
      let s = i ? e.head : e.anchor;
      if (!t.some(({ from: o, to: u }) => s >= o && s <= u)) {
        let { from: o, to: u } = this.lineBlockAt(s);
        t.push(new wu(o, u));
      }
    }
    return this.viewports = t.sort((i, s) => i.from - s.from), this.updateScaler();
  }
  updateScaler() {
    let t = this.scaler;
    return this.scaler = this.heightMap.height <= 7e6 ? B1 : new gm(this.heightOracle, this.heightMap, this.viewports), t.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (t) => {
      this.viewportLines.push(vo(t, this.scaler));
    });
  }
  update(t, e = null) {
    this.state = t.state;
    let i = this.stateDeco;
    this.stateDeco = this.state.facet(Ro).filter((m) => typeof m != "function");
    let s = t.changedRanges, o = vi.extendWithRanges(s, AC(i, this.stateDeco, t ? t.changes : ue.empty(this.state.doc.length))), u = this.heightMap.height, c = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    z1(), this.heightMap = this.heightMap.applyChanges(this.stateDeco, t.startState.doc, this.heightOracle.setDoc(this.state.doc), o), (this.heightMap.height != u || Ks) && (t.flags |= 2), c ? (this.scrollAnchorPos = t.changes.mapPos(c.from, -1), this.scrollAnchorHeight = c.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = u);
    let h = o.length ? this.mapViewport(this.viewport, t.changes) : this.viewport;
    (e && (e.range.head < h.from || e.range.head > h.to) || !this.viewportIsAppropriate(h)) && (h = this.getViewport(0, e));
    let p = h.from != this.viewport.from || h.to != this.viewport.to;
    this.viewport = h, t.flags |= this.updateForViewport(), (p || !t.changes.empty || t.flags & 2) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, t.changes))), t.flags |= this.computeVisibleRanges(t.changes), e && (this.scrollTarget = e), !this.mustEnforceCursorAssoc && t.selectionSet && t.view.lineWrapping && t.state.selection.main.empty && t.state.selection.main.assoc && !t.state.facet(rb) && (this.mustEnforceCursorAssoc = !0);
  }
  measure(t) {
    let e = t.contentDOM, i = window.getComputedStyle(e), s = this.heightOracle, o = i.whiteSpace;
    this.defaultTextDirection = i.direction == "rtl" ? jt.RTL : jt.LTR;
    let u = this.heightOracle.mustRefreshForWrapping(o), c = e.getBoundingClientRect(), h = u || this.mustMeasureContent || this.contentDOMHeight != c.height;
    this.contentDOMHeight = c.height, this.mustMeasureContent = !1;
    let p = 0, m = 0;
    if (c.width && c.height) {
      let { scaleX: Z, scaleY: N } = zS(e, c);
      (Z > 5e-3 && Math.abs(this.scaleX - Z) > 5e-3 || N > 5e-3 && Math.abs(this.scaleY - N) > 5e-3) && (this.scaleX = Z, this.scaleY = N, p |= 16, u = h = !0);
    }
    let O = (parseInt(i.paddingTop) || 0) * this.scaleY, y = (parseInt(i.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != O || this.paddingBottom != y) && (this.paddingTop = O, this.paddingBottom = y, p |= 18), this.editorWidth != t.scrollDOM.clientWidth && (s.lineWrapping && (h = !0), this.editorWidth = t.scrollDOM.clientWidth, p |= 16);
    let S = t.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != S && (this.scrollAnchorHeight = -1, this.scrollTop = S), this.scrolledToBottom = BS(t.scrollDOM);
    let x = (this.printing ? QC : EC)(e, this.paddingTop), w = x.top - this.pixelViewport.top, C = x.bottom - this.pixelViewport.bottom;
    this.pixelViewport = x;
    let M = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (M != this.inView && (this.inView = M, M && (h = !0)), !this.inView && !this.scrollTarget && !MC(t.dom))
      return 0;
    let U = c.width;
    if ((this.contentDOMWidth != U || this.editorHeight != t.scrollDOM.clientHeight) && (this.contentDOMWidth = c.width, this.editorHeight = t.scrollDOM.clientHeight, p |= 16), h) {
      let Z = t.docView.measureVisibleLineHeights(this.viewport);
      if (s.mustRefreshForHeights(Z) && (u = !0), u || s.lineWrapping && Math.abs(U - this.contentDOMWidth) > s.charWidth) {
        let { lineHeight: N, charWidth: Y, textHeight: R } = t.docView.measureTextSize();
        u = N > 0 && s.refresh(o, N, Y, R, U / Y, Z), u && (t.docView.minWidth = 0, p |= 16);
      }
      w > 0 && C > 0 ? m = Math.max(w, C) : w < 0 && C < 0 && (m = Math.min(w, C)), z1();
      for (let N of this.viewports) {
        let Y = N.from == this.viewport.from ? Z : t.docView.measureVisibleLineHeights(N);
        this.heightMap = (u ? qe.empty().applyChanges(this.stateDeco, Et.empty, this.heightOracle, [new vi(0, 0, 0, t.state.doc.length)]) : this.heightMap).updateHeight(s, 0, u, new wC(N.from, Y));
      }
      Ks && (p |= 2);
    }
    let W = !this.viewportIsAppropriate(this.viewport, m) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return W && (p & 2 && (p |= this.updateScaler()), this.viewport = this.getViewport(m, this.scrollTarget), p |= this.updateForViewport()), (p & 2 || W) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(u ? [] : this.lineGaps, t)), p |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = !1, t.docView.enforceCursorAssoc()), p;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(t, e) {
    let i = 0.5 - Math.max(-0.5, Math.min(0.5, t / 1e3 / 2)), s = this.heightMap, o = this.heightOracle, { visibleTop: u, visibleBottom: c } = this, h = new wu(s.lineAt(u - i * 1e3, $t.ByHeight, o, 0, 0).from, s.lineAt(c + (1 - i) * 1e3, $t.ByHeight, o, 0, 0).to);
    if (e) {
      let { head: p } = e.range;
      if (p < h.from || p > h.to) {
        let m = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), O = s.lineAt(p, $t.ByPos, o, 0, 0), y;
        e.y == "center" ? y = (O.top + O.bottom) / 2 - m / 2 : e.y == "start" || e.y == "nearest" && p < h.from ? y = O.top : y = O.bottom - m, h = new wu(s.lineAt(y - 1e3 / 2, $t.ByHeight, o, 0, 0).from, s.lineAt(y + m + 1e3 / 2, $t.ByHeight, o, 0, 0).to);
      }
    }
    return h;
  }
  mapViewport(t, e) {
    let i = e.mapPos(t.from, -1), s = e.mapPos(t.to, 1);
    return new wu(this.heightMap.lineAt(i, $t.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(s, $t.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: t, to: e }, i = 0) {
    if (!this.inView)
      return !0;
    let { top: s } = this.heightMap.lineAt(t, $t.ByPos, this.heightOracle, 0, 0), { bottom: o } = this.heightMap.lineAt(e, $t.ByPos, this.heightOracle, 0, 0), { visibleTop: u, visibleBottom: c } = this;
    return (t == 0 || s <= u - Math.max(10, Math.min(
      -i,
      250
      /* VP.MaxCoverMargin */
    ))) && (e == this.state.doc.length || o >= c + Math.max(10, Math.min(
      i,
      250
      /* VP.MaxCoverMargin */
    ))) && s > u - 2 * 1e3 && o < c + 2 * 1e3;
  }
  mapLineGaps(t, e) {
    if (!t.length || e.empty)
      return t;
    let i = [];
    for (let s of t)
      e.touchesRange(s.from, s.to) || i.push(new kd(e.mapPos(s.from), e.mapPos(s.to), s.size, s.displaySize));
    return i;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(t, e) {
    let i = this.heightOracle.lineWrapping, s = i ? 1e4 : 2e3, o = s >> 1, u = s << 1;
    if (this.defaultTextDirection != jt.LTR && !i)
      return [];
    let c = [], h = (m, O, y, S) => {
      if (O - m < o)
        return;
      let x = this.state.selection.main, w = [x.from];
      x.empty || w.push(x.to);
      for (let M of w)
        if (M > m && M < O) {
          h(m, M - 10, y, S), h(M + 10, O, y, S);
          return;
        }
      let C = zC(t, (M) => M.from >= y.from && M.to <= y.to && Math.abs(M.from - m) < o && Math.abs(M.to - O) < o && !w.some((U) => M.from < U && M.to > U));
      if (!C) {
        if (O < y.to && e && i && e.visibleRanges.some((W) => W.from <= O && W.to >= O)) {
          let W = e.moveToLineBoundary(X.cursor(O), !1, !0).head;
          W > m && (O = W);
        }
        let M = this.gapSize(y, m, O, S), U = i || M < 2e6 ? M : 2e6;
        C = new kd(m, O, M, U);
      }
      c.push(C);
    }, p = (m) => {
      if (m.length < u || m.type != ze.Text)
        return;
      let O = DC(m.from, m.to, this.stateDeco);
      if (O.total < u)
        return;
      let y = this.scrollTarget ? this.scrollTarget.range.head : null, S, x;
      if (i) {
        let w = s / this.heightOracle.lineLength * this.heightOracle.lineHeight, C, M;
        if (y != null) {
          let U = ku(O, y), W = ((this.visibleBottom - this.visibleTop) / 2 + w) / m.height;
          C = U - W, M = U + W;
        } else
          C = (this.visibleTop - m.top - w) / m.height, M = (this.visibleBottom - m.top + w) / m.height;
        S = Tu(O, C), x = Tu(O, M);
      } else {
        let w = O.total * this.heightOracle.charWidth, C = s * this.heightOracle.charWidth, M = 0;
        if (w > 2e6)
          for (let Y of t)
            Y.from >= m.from && Y.from < m.to && Y.size != Y.displaySize && Y.from * this.heightOracle.charWidth + M < this.pixelViewport.left && (M = Y.size - Y.displaySize);
        let U = this.pixelViewport.left + M, W = this.pixelViewport.right + M, Z, N;
        if (y != null) {
          let Y = ku(O, y), R = ((W - U) / 2 + C) / w;
          Z = Y - R, N = Y + R;
        } else
          Z = (U - C) / w, N = (W + C) / w;
        S = Tu(O, Z), x = Tu(O, N);
      }
      S > m.from && h(m.from, S, m, O), x < m.to && h(x, m.to, m, O);
    };
    for (let m of this.viewportLines)
      Array.isArray(m.type) ? m.type.forEach(p) : p(m);
    return c;
  }
  gapSize(t, e, i, s) {
    let o = ku(s, i) - ku(s, e);
    return this.heightOracle.lineWrapping ? t.height * o : s.total * this.heightOracle.charWidth * o;
  }
  updateLineGaps(t) {
    kd.same(t, this.lineGaps) || (this.lineGaps = t, this.lineGapDeco = ft.set(t.map((e) => e.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges(t) {
    let e = this.stateDeco;
    this.lineGaps.length && (e = e.concat(this.lineGapDeco));
    let i = [];
    Rt.spans(e, this.viewport.from, this.viewport.to, {
      span(o, u) {
        i.push({ from: o, to: u });
      },
      point() {
      }
    }, 20);
    let s = 0;
    if (i.length != this.visibleRanges.length)
      s = 12;
    else
      for (let o = 0; o < i.length && !(s & 8); o++) {
        let u = this.visibleRanges[o], c = i[o];
        (u.from != c.from || u.to != c.to) && (s |= 4, t && t.mapPos(u.from, -1) == c.from && t.mapPos(u.to, 1) == c.to || (s |= 8));
      }
    return this.visibleRanges = i, s;
  }
  lineBlockAt(t) {
    return t >= this.viewport.from && t <= this.viewport.to && this.viewportLines.find((e) => e.from <= t && e.to >= t) || vo(this.heightMap.lineAt(t, $t.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(t) {
    return t >= this.viewportLines[0].top && t <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((e) => e.top <= t && e.bottom >= t) || vo(this.heightMap.lineAt(this.scaler.fromDOM(t), $t.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(t) {
    let e = this.lineBlockAtHeight(t + 8);
    return e.from >= this.viewport.from || this.viewportLines[0].top - t > 200 ? e : this.viewportLines[0];
  }
  elementAtHeight(t) {
    return vo(this.heightMap.blockAt(this.scaler.fromDOM(t), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class wu {
  constructor(t, e) {
    this.from = t, this.to = e;
  }
}
function DC(n, t, e) {
  let i = [], s = n, o = 0;
  return Rt.spans(e, n, t, {
    span() {
    },
    point(u, c) {
      u > s && (i.push({ from: s, to: u }), o += u - s), s = c;
    }
  }, 20), s < t && (i.push({ from: s, to: t }), o += t - s), { total: o, ranges: i };
}
function Tu({ total: n, ranges: t }, e) {
  if (e <= 0)
    return t[0].from;
  if (e >= 1)
    return t[t.length - 1].to;
  let i = Math.floor(n * e);
  for (let s = 0; ; s++) {
    let { from: o, to: u } = t[s], c = u - o;
    if (i <= c)
      return o + i;
    i -= c;
  }
}
function ku(n, t) {
  let e = 0;
  for (let { from: i, to: s } of n.ranges) {
    if (t <= s) {
      e += t - i;
      break;
    }
    e += s - i;
  }
  return e / n.total;
}
function zC(n, t) {
  for (let e of n)
    if (t(e))
      return e;
}
const B1 = {
  toDOM(n) {
    return n;
  },
  fromDOM(n) {
    return n;
  },
  scale: 1,
  eq(n) {
    return n == this;
  }
};
class gm {
  constructor(t, e, i) {
    let s = 0, o = 0, u = 0;
    this.viewports = i.map(({ from: c, to: h }) => {
      let p = e.lineAt(c, $t.ByPos, t, 0, 0).top, m = e.lineAt(h, $t.ByPos, t, 0, 0).bottom;
      return s += m - p, { from: c, to: h, top: p, bottom: m, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - s) / (e.height - s);
    for (let c of this.viewports)
      c.domTop = u + (c.top - o) * this.scale, u = c.domBottom = c.domTop + (c.bottom - c.top), o = c.bottom;
  }
  toDOM(t) {
    for (let e = 0, i = 0, s = 0; ; e++) {
      let o = e < this.viewports.length ? this.viewports[e] : null;
      if (!o || t < o.top)
        return s + (t - i) * this.scale;
      if (t <= o.bottom)
        return o.domTop + (t - o.top);
      i = o.bottom, s = o.domBottom;
    }
  }
  fromDOM(t) {
    for (let e = 0, i = 0, s = 0; ; e++) {
      let o = e < this.viewports.length ? this.viewports[e] : null;
      if (!o || t < o.domTop)
        return i + (t - s) / this.scale;
      if (t <= o.domBottom)
        return o.top + (t - o.domTop);
      i = o.bottom, s = o.domBottom;
    }
  }
  eq(t) {
    return t instanceof gm ? this.scale == t.scale && this.viewports.length == t.viewports.length && this.viewports.every((e, i) => e.from == t.viewports[i].from && e.to == t.viewports[i].to) : !1;
  }
}
function vo(n, t) {
  if (t.scale == 1)
    return n;
  let e = t.toDOM(n.top), i = t.toDOM(n.bottom);
  return new Xi(n.from, n.length, e, i - e, Array.isArray(n._content) ? n._content.map((s) => vo(s, t)) : n._content);
}
const Au = /* @__PURE__ */ lt.define({ combine: (n) => n.join(" ") }), Dp = /* @__PURE__ */ lt.define({ combine: (n) => n.indexOf(!0) > -1 }), zp = /* @__PURE__ */ sl.newName(), kb = /* @__PURE__ */ sl.newName(), Ab = /* @__PURE__ */ sl.newName(), Cb = { "&light": "." + kb, "&dark": "." + Ab };
function qp(n, t, e) {
  return new sl(t, {
    finish(i) {
      return /&/.test(i) ? i.replace(/&\w*/, (s) => {
        if (s == "&")
          return n;
        if (!e || !e[s])
          throw new RangeError(`Unsupported selector: ${s}`);
        return e[s];
      }) : n + " " + i;
    }
  });
}
const qC = /* @__PURE__ */ qp("." + zp, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0,
    overflowAnchor: "none"
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#ddd"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0,
    zIndex: 300
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top",
    userSelect: "none"
  },
  ".cm-highlightSpace": {
    backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
    backgroundPosition: "center"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, Cb), _C = {
  childList: !0,
  characterData: !0,
  subtree: !0,
  attributes: !0,
  characterDataOldValue: !0
}, Ad = st.ie && st.ie_version <= 11;
class BC {
  constructor(t) {
    this.view = t, this.active = !1, this.editContext = null, this.selectionRange = new OA(), this.selectionChanged = !1, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = !1, this.gapIntersection = null, this.gaps = [], this.printQuery = null, this.parentCheck = -1, this.dom = t.contentDOM, this.observer = new MutationObserver((e) => {
      for (let i of e)
        this.queue.push(i);
      (st.ie && st.ie_version <= 11 || st.ios && t.composing) && e.some((i) => i.type == "childList" && i.removedNodes.length || i.type == "characterData" && i.oldValue.length > i.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), window.EditContext && t.constructor.EDIT_CONTEXT !== !1 && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(st.chrome && st.chrome_version < 126) && (this.editContext = new PC(t), t.state.facet(xn) && (t.contentDOM.editContext = this.editContext.editContext)), Ad && (this.onCharData = (e) => {
      this.queue.push({
        target: e.target,
        type: "characterData",
        oldValue: e.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), window.matchMedia && (this.printQuery = window.matchMedia("print")), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var e;
      ((e = this.view.docView) === null || e === void 0 ? void 0 : e.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(t.scrollDOM)), this.addWindowListeners(this.win = t.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((e) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), e.length > 0 && e[e.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((e) => {
      e.length > 0 && e[e.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(t) {
    this.view.inputState.runHandlers("scroll", t), this.intersecting && this.view.measure();
  }
  onScroll(t) {
    this.intersecting && this.flush(!1), this.editContext && this.view.requestMeasure(this.editContext.measureReq), this.onScrollChanged(t);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint(t) {
    (t.type == "change" || !t.type) && !t.matches || (this.view.viewState.printing = !0, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = !1, this.view.requestMeasure();
    }, 500));
  }
  updateGaps(t) {
    if (this.gapIntersection && (t.length != this.gaps.length || this.gaps.some((e, i) => e != t[i]))) {
      this.gapIntersection.disconnect();
      for (let e of t)
        this.gapIntersection.observe(e);
      this.gaps = t;
    }
  }
  onSelectionChange(t) {
    let e = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: i } = this, s = this.selectionRange;
    if (i.state.facet(xn) ? i.root.activeElement != this.dom : !$u(this.dom, s))
      return;
    let o = s.anchorNode && i.docView.nearest(s.anchorNode);
    if (o && o.ignoreEvent(t)) {
      e || (this.selectionChanged = !1);
      return;
    }
    (st.ie && st.ie_version <= 11 || st.android && st.chrome) && !i.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    s.focusNode && wo(s.focusNode, s.focusOffset, s.anchorNode, s.anchorOffset) ? this.flushSoon() : this.flush(!1);
  }
  readSelectionRange() {
    let { view: t } = this, e = Qo(t.root);
    if (!e)
      return !1;
    let i = st.safari && t.root.nodeType == 11 && t.root.activeElement == this.dom && NC(this.view, e) || e;
    if (!i || this.selectionRange.eq(i))
      return !1;
    let s = $u(this.dom, i);
    return s && !this.selectionChanged && t.inputState.lastFocusTime > Date.now() - 200 && t.inputState.lastTouchTime < Date.now() - 300 && vA(this.dom, i) ? (this.view.inputState.lastFocusTime = 0, t.docView.updateSelection(), !1) : (this.selectionRange.setRange(i), s && (this.selectionChanged = !0), !0);
  }
  setSelectionRange(t, e) {
    this.selectionRange.set(t.node, t.offset, e.node, e.offset), this.selectionChanged = !1;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let t = 0, e = null;
    for (let i = this.dom; i; )
      if (i.nodeType == 1)
        !e && t < this.scrollTargets.length && this.scrollTargets[t] == i ? t++ : e || (e = this.scrollTargets.slice(0, t)), e && e.push(i), i = i.assignedSlot || i.parentNode;
      else if (i.nodeType == 11)
        i = i.host;
      else
        break;
    if (t < this.scrollTargets.length && !e && (e = this.scrollTargets.slice(0, t)), e) {
      for (let i of this.scrollTargets)
        i.removeEventListener("scroll", this.onScroll);
      for (let i of this.scrollTargets = e)
        i.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(t) {
    if (!this.active)
      return t();
    try {
      return this.stop(), t();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, _C), Ad && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = !0);
  }
  stop() {
    this.active && (this.active = !1, this.observer.disconnect(), Ad && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = !1;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(t, e) {
    var i;
    if (!this.delayedAndroidKey) {
      let s = () => {
        let o = this.delayedAndroidKey;
        o && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = o.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && o.force && Hs(this.dom, o.key, o.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(s);
    }
    (!this.delayedAndroidKey || t == "Enter") && (this.delayedAndroidKey = {
      key: t,
      keyCode: e,
      // Only run the key handler when no changes are detected if
      // this isn't coming right after another change, in which case
      // it is probably part of a weird chain of updates, and should
      // be ignored if it returns the DOM to its previous state.
      force: this.lastChange < Date.now() - 50 || !!(!((i = this.delayedAndroidKey) === null || i === void 0) && i.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let t of this.observer.takeRecords())
      this.queue.push(t);
    return this.queue;
  }
  processRecords() {
    let t = this.pendingRecords();
    t.length && (this.queue = []);
    let e = -1, i = -1, s = !1;
    for (let o of t) {
      let u = this.readMutation(o);
      u && (u.typeOver && (s = !0), e == -1 ? { from: e, to: i } = u : (e = Math.min(u.from, e), i = Math.max(u.to, i)));
    }
    return { from: e, to: i, typeOver: s };
  }
  readChange() {
    let { from: t, to: e, typeOver: i } = this.processRecords(), s = this.selectionChanged && $u(this.dom, this.selectionRange);
    if (t < 0 && !s)
      return null;
    t > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = !1;
    let o = new tC(this.view, t, e, i);
    return this.view.docView.domChanged = { newSel: o.newSel ? o.newSel.main : null }, o;
  }
  // Apply pending changes, if any
  flush(t = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return !1;
    t && this.readSelectionRange();
    let e = this.readChange();
    if (!e)
      return this.view.requestMeasure(), !1;
    let i = this.view.state, s = mb(this.view, e);
    return this.view.state == i && (e.domChanged || e.newSel && !e.newSel.main.eq(this.view.state.selection.main)) && this.view.update([]), s;
  }
  readMutation(t) {
    let e = this.view.docView.nearest(t.target);
    if (!e || e.ignoreMutation(t))
      return null;
    if (e.markDirty(t.type == "attributes"), t.type == "attributes" && (e.flags |= 4), t.type == "childList") {
      let i = N1(e, t.previousSibling || t.target.previousSibling, -1), s = N1(e, t.nextSibling || t.target.nextSibling, 1);
      return {
        from: i ? e.posAfter(i) : e.posAtStart,
        to: s ? e.posBefore(s) : e.posAtEnd,
        typeOver: !1
      };
    } else return t.type == "characterData" ? { from: e.posAtStart, to: e.posAtEnd, typeOver: t.target.nodeValue == t.oldValue } : null;
  }
  setWindow(t) {
    t != this.win && (this.removeWindowListeners(this.win), this.win = t, this.addWindowListeners(this.win));
  }
  addWindowListeners(t) {
    t.addEventListener("resize", this.onResize), this.printQuery ? this.printQuery.addEventListener ? this.printQuery.addEventListener("change", this.onPrint) : this.printQuery.addListener(this.onPrint) : t.addEventListener("beforeprint", this.onPrint), t.addEventListener("scroll", this.onScroll), t.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(t) {
    t.removeEventListener("scroll", this.onScroll), t.removeEventListener("resize", this.onResize), this.printQuery ? this.printQuery.removeEventListener ? this.printQuery.removeEventListener("change", this.onPrint) : this.printQuery.removeListener(this.onPrint) : t.removeEventListener("beforeprint", this.onPrint), t.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(t) {
    this.editContext && (this.editContext.update(t), t.startState.facet(xn) != t.state.facet(xn) && (t.view.contentDOM.editContext = t.state.facet(xn) ? this.editContext.editContext : null));
  }
  destroy() {
    var t, e, i;
    this.stop(), (t = this.intersection) === null || t === void 0 || t.disconnect(), (e = this.gapIntersection) === null || e === void 0 || e.disconnect(), (i = this.resizeScroll) === null || i === void 0 || i.disconnect();
    for (let s of this.scrollTargets)
      s.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey), this.editContext && (this.view.contentDOM.editContext = null, this.editContext.destroy());
  }
}
function N1(n, t, e) {
  for (; t; ) {
    let i = Ht.get(t);
    if (i && i.parent == n)
      return i;
    let s = t.parentNode;
    t = s != n.dom ? s : e > 0 ? t.nextSibling : t.previousSibling;
  }
  return null;
}
function P1(n, t) {
  let e = t.startContainer, i = t.startOffset, s = t.endContainer, o = t.endOffset, u = n.docView.domAtPos(n.state.selection.main.anchor);
  return wo(u.node, u.offset, s, o) && ([e, i, s, o] = [s, o, e, i]), { anchorNode: e, anchorOffset: i, focusNode: s, focusOffset: o };
}
function NC(n, t) {
  if (t.getComposedRanges) {
    let s = t.getComposedRanges(n.root)[0];
    if (s)
      return P1(n, s);
  }
  let e = null;
  function i(s) {
    s.preventDefault(), s.stopImmediatePropagation(), e = s.getTargetRanges()[0];
  }
  return n.contentDOM.addEventListener("beforeinput", i, !0), n.dom.ownerDocument.execCommand("indent"), n.contentDOM.removeEventListener("beforeinput", i, !0), e ? P1(n, e) : null;
}
class PC {
  constructor(t) {
    this.from = 0, this.to = 0, this.pendingContextChange = null, this.handlers = /* @__PURE__ */ Object.create(null), this.composing = null, this.resetRange(t.state);
    let e = this.editContext = new window.EditContext({
      text: t.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, t.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(t.state.selection.main.head)
    });
    this.handlers.textupdate = (i) => {
      let s = t.state.selection.main, { anchor: o, head: u } = s, c = this.toEditorPos(i.updateRangeStart), h = this.toEditorPos(i.updateRangeEnd);
      t.inputState.composing >= 0 && !this.composing && (this.composing = { contextBase: i.updateRangeStart, editorBase: c, drifted: !1 });
      let p = { from: c, to: h, insert: Et.of(i.text.split(`
`)) };
      if (p.from == this.from && o < this.from ? p.from = o : p.to == this.to && o > this.to && (p.to = o), p.from == p.to && !p.insert.length) {
        let m = X.single(this.toEditorPos(i.selectionStart), this.toEditorPos(i.selectionEnd));
        m.main.eq(s) || t.dispatch({ selection: m, userEvent: "select" });
        return;
      }
      if ((st.mac || st.android) && p.from == u - 1 && /^\. ?$/.test(i.text) && t.contentDOM.getAttribute("autocorrect") == "off" && (p = { from: c, to: h, insert: Et.of([i.text.replace(".", " ")]) }), this.pendingContextChange = p, !t.state.readOnly) {
        let m = this.to - this.from + (p.to - p.from + p.insert.length);
        pm(t, p, X.single(this.toEditorPos(i.selectionStart, m), this.toEditorPos(i.selectionEnd, m)));
      }
      this.pendingContextChange && (this.revertPending(t.state), this.setSelection(t.state));
    }, this.handlers.characterboundsupdate = (i) => {
      let s = [], o = null;
      for (let u = this.toEditorPos(i.rangeStart), c = this.toEditorPos(i.rangeEnd); u < c; u++) {
        let h = t.coordsForChar(u);
        o = h && new DOMRect(h.left, h.top, h.right - h.left, h.bottom - h.top) || o || new DOMRect(), s.push(o);
      }
      e.updateCharacterBounds(i.rangeStart, s);
    }, this.handlers.textformatupdate = (i) => {
      let s = [];
      for (let o of i.getTextFormats()) {
        let u = o.underlineStyle, c = o.underlineThickness;
        if (u != "None" && c != "None") {
          let h = this.toEditorPos(o.rangeStart), p = this.toEditorPos(o.rangeEnd);
          if (h < p) {
            let m = `text-decoration: underline ${u == "Dashed" ? "dashed " : u == "Squiggle" ? "wavy " : ""}${c == "Thin" ? 1 : 2}px`;
            s.push(ft.mark({ attributes: { style: m } }).range(h, p));
          }
        }
      }
      t.dispatch({ effects: ab.of(ft.set(s)) });
    }, this.handlers.compositionstart = () => {
      t.inputState.composing < 0 && (t.inputState.composing = 0, t.inputState.compositionFirstChange = !0);
    }, this.handlers.compositionend = () => {
      if (t.inputState.composing = -1, t.inputState.compositionFirstChange = null, this.composing) {
        let { drifted: i } = this.composing;
        this.composing = null, i && this.reset(t.state);
      }
    };
    for (let i in this.handlers)
      e.addEventListener(i, this.handlers[i]);
    this.measureReq = { read: (i) => {
      this.editContext.updateControlBounds(i.contentDOM.getBoundingClientRect());
      let s = Qo(i.root);
      s && s.rangeCount && this.editContext.updateSelectionBounds(s.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(t) {
    let e = 0, i = !1, s = this.pendingContextChange;
    return t.changes.iterChanges((o, u, c, h, p) => {
      if (i)
        return;
      let m = p.length - (u - o);
      if (s && u >= s.to)
        if (s.from == o && s.to == u && s.insert.eq(p)) {
          s = this.pendingContextChange = null, e += m, this.to += m;
          return;
        } else
          s = null, this.revertPending(t.state);
      if (o += e, u += e, u <= this.from)
        this.from += m, this.to += m;
      else if (o < this.to) {
        if (o < this.from || u > this.to || this.to - this.from + p.length > 3e4) {
          i = !0;
          return;
        }
        this.editContext.updateText(this.toContextPos(o), this.toContextPos(u), p.toString()), this.to += m;
      }
      e += m;
    }), s && !i && this.revertPending(t.state), !i;
  }
  update(t) {
    let e = this.pendingContextChange, i = t.startState.selection.main;
    this.composing && (this.composing.drifted || !t.changes.touchesRange(i.from, i.to) && t.transactions.some((s) => !s.isUserEvent("input.type") && s.changes.touchesRange(this.from, this.to))) ? (this.composing.drifted = !0, this.composing.editorBase = t.changes.mapPos(this.composing.editorBase)) : !this.applyEdits(t) || !this.rangeIsValid(t.state) ? (this.pendingContextChange = null, this.reset(t.state)) : (t.docChanged || t.selectionSet || e) && this.setSelection(t.state), (t.geometryChanged || t.docChanged || t.selectionSet) && t.view.requestMeasure(this.measureReq);
  }
  resetRange(t) {
    let { head: e } = t.selection.main;
    this.from = Math.max(
      0,
      e - 1e4
      /* CxVp.Margin */
    ), this.to = Math.min(
      t.doc.length,
      e + 1e4
      /* CxVp.Margin */
    );
  }
  reset(t) {
    this.resetRange(t), this.editContext.updateText(0, this.editContext.text.length, t.doc.sliceString(this.from, this.to)), this.setSelection(t);
  }
  revertPending(t) {
    let e = this.pendingContextChange;
    this.pendingContextChange = null, this.editContext.updateText(this.toContextPos(e.from), this.toContextPos(e.from + e.insert.length), t.doc.sliceString(e.from, e.to));
  }
  setSelection(t) {
    let { main: e } = t.selection, i = this.toContextPos(Math.max(this.from, Math.min(this.to, e.anchor))), s = this.toContextPos(e.head);
    (this.editContext.selectionStart != i || this.editContext.selectionEnd != s) && this.editContext.updateSelection(i, s);
  }
  rangeIsValid(t) {
    let { head: e } = t.selection.main;
    return !(this.from > 0 && e - this.from < 500 || this.to < t.doc.length && this.to - e < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(t, e = this.to - this.from) {
    t = Math.min(t, e);
    let i = this.composing;
    return i && i.drifted ? i.editorBase + (t - i.contextBase) : t + this.from;
  }
  toContextPos(t) {
    let e = this.composing;
    return e && e.drifted ? e.contextBase + (t - e.editorBase) : t - this.from;
  }
  destroy() {
    for (let t in this.handlers)
      this.editContext.removeEventListener(t, this.handlers[t]);
  }
}
class it {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return !!this.inputState && this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return !!this.inputState && this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(t = {}) {
    var e;
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = !1, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), t.parent && t.parent.appendChild(this.dom);
    let { dispatch: i } = t;
    this.dispatchTransactions = t.dispatchTransactions || i && ((s) => s.forEach((o) => i(o, this))) || ((s) => this.update(s)), this.dispatch = this.dispatch.bind(this), this._root = t.root || yA(t.parent) || document, this.viewState = new _1(t.state || At.create(t)), t.scrollTo && t.scrollTo.is(Su) && (this.viewState.scrollTarget = t.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(go).map((s) => new xd(s));
    for (let s of this.plugins)
      s.update(this);
    this.observer = new BC(this), this.inputState = new sC(this), this.inputState.ensureHandlers(this.plugins), this.docView = new g1(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), !((e = document.fonts) === null || e === void 0) && e.ready && document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...t) {
    let e = t.length == 1 && t[0] instanceof se ? t : t.length == 1 && Array.isArray(t[0]) ? t[0] : [this.state.update(...t)];
    this.dispatchTransactions(e, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(t) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let e = !1, i = !1, s, o = this.state;
    for (let y of t) {
      if (y.startState != o)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      o = y.state;
    }
    if (this.destroyed) {
      this.viewState.state = o;
      return;
    }
    let u = this.hasFocus, c = 0, h = null;
    t.some((y) => y.annotation(bb)) ? (this.inputState.notifiedFocused = u, c = 1) : u != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = u, h = xb(o, u), h || (c = 1));
    let p = this.observer.delayedAndroidKey, m = null;
    if (p ? (this.observer.clearDelayedAndroidKey(), m = this.observer.readChange(), (m && !this.state.doc.eq(o.doc) || !this.state.selection.eq(o.selection)) && (m = null)) : this.observer.clear(), o.facet(At.phrases) != this.state.facet(At.phrases))
      return this.setState(o);
    s = uc.create(this, o, t), s.flags |= c;
    let O = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let y of t) {
        if (O && (O = O.map(y.changes)), y.scrollIntoView) {
          let { main: S } = y.state.selection;
          O = new Xs(S.empty ? S : X.cursor(S.head, S.head > S.anchor ? -1 : 1));
        }
        for (let S of y.effects)
          S.is(Su) && (O = S.value.clip(this.state));
      }
      this.viewState.update(s, O), this.bidiCache = fc.update(this.bidiCache, s.changes), s.empty || (this.updatePlugins(s), this.inputState.update(s)), e = this.docView.update(s), this.state.facet(Oo) != this.styleModules && this.mountStyles(), i = this.updateAttrs(), this.showAnnouncements(t), this.docView.updateSelection(e, t.some((y) => y.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (s.startState.facet(Au) != s.state.facet(Au) && (this.viewState.mustMeasureContent = !0), (e || i || O || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), e && this.docViewUpdate(), !s.empty)
      for (let y of this.state.facet(Ep))
        try {
          y(s);
        } catch (S) {
          Xe(this.state, S, "update listener");
        }
    (h || m) && Promise.resolve().then(() => {
      h && this.state == h.startState && this.dispatch(h), m && !mb(this, m) && p.force && Hs(this.contentDOM, p.key, p.keyCode);
    });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(t) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = t;
      return;
    }
    this.updateState = 2;
    let e = this.hasFocus;
    try {
      for (let i of this.plugins)
        i.destroy(this);
      this.viewState = new _1(t), this.plugins = t.facet(go).map((i) => new xd(i)), this.pluginMap.clear();
      for (let i of this.plugins)
        i.update(this);
      this.docView.destroy(), this.docView = new g1(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    e && this.focus(), this.requestMeasure();
  }
  updatePlugins(t) {
    let e = t.startState.facet(go), i = t.state.facet(go);
    if (e != i) {
      let s = [];
      for (let o of i) {
        let u = e.indexOf(o);
        if (u < 0)
          s.push(new xd(o));
        else {
          let c = this.plugins[u];
          c.mustUpdate = t, s.push(c);
        }
      }
      for (let o of this.plugins)
        o.mustUpdate != t && o.destroy(this);
      this.plugins = s, this.pluginMap.clear();
    } else
      for (let s of this.plugins)
        s.mustUpdate = t;
    for (let s = 0; s < this.plugins.length; s++)
      this.plugins[s].update(this);
    e != i && this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let t of this.plugins) {
      let e = t.value;
      if (e && e.docViewUpdate)
        try {
          e.docViewUpdate(this);
        } catch (i) {
          Xe(this.state, i, "doc view update listener");
        }
    }
  }
  /**
  @internal
  */
  measure(t = !0) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, t && this.observer.forceFlush();
    let e = null, i = this.scrollDOM, s = i.scrollTop * this.scaleY, { scrollAnchorPos: o, scrollAnchorHeight: u } = this.viewState;
    Math.abs(s - this.viewState.scrollTop) > 1 && (u = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let c = 0; ; c++) {
        if (u < 0)
          if (BS(i))
            o = -1, u = this.viewState.heightMap.height;
          else {
            let S = this.viewState.scrollAnchorAt(s);
            o = S.from, u = S.top;
          }
        this.updateState = 1;
        let h = this.viewState.measure(this);
        if (!h && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (c > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let p = [];
        h & 4 || ([this.measureRequests, p] = [p, this.measureRequests]);
        let m = p.map((S) => {
          try {
            return S.read(this);
          } catch (x) {
            return Xe(this.state, x), L1;
          }
        }), O = uc.create(this, this.state, []), y = !1;
        O.flags |= h, e ? e.flags |= h : e = O, this.updateState = 2, O.empty || (this.updatePlugins(O), this.inputState.update(O), this.updateAttrs(), y = this.docView.update(O), y && this.docViewUpdate());
        for (let S = 0; S < p.length; S++)
          if (m[S] != L1)
            try {
              let x = p[S];
              x.write && x.write(m[S], this);
            } catch (x) {
              Xe(this.state, x);
            }
        if (y && this.docView.updateSelection(!0), !O.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, u = -1;
              continue;
            } else {
              let x = (o < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(o).top) - u;
              if (x > 1 || x < -1) {
                s = s + x, i.scrollTop = s / this.scaleY, u = -1;
                continue;
              }
            }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (e && !e.empty)
      for (let c of this.state.facet(Ep))
        c(e);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return zp + " " + (this.state.facet(Dp) ? Ab : kb) + " " + this.state.facet(Au);
  }
  updateAttrs() {
    let t = U1(this, ub, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), e = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      writingsuggestions: "false",
      translate: "no",
      contenteditable: this.state.facet(xn) ? "true" : "false",
      class: "cm-content",
      style: `${st.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (e["aria-readonly"] = "true"), U1(this, fm, e);
    let i = this.observer.ignore(() => {
      let s = wp(this.contentDOM, this.contentAttrs, e), o = wp(this.dom, this.editorAttrs, t);
      return s || o;
    });
    return this.editorAttrs = t, this.contentAttrs = e, i;
  }
  showAnnouncements(t) {
    let e = !0;
    for (let i of t)
      for (let s of i.effects)
        if (s.is(it.announce)) {
          e && (this.announceDOM.textContent = ""), e = !1;
          let o = this.announceDOM.appendChild(document.createElement("div"));
          o.textContent = s.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(Oo);
    let t = this.state.facet(it.cspNonce);
    sl.mount(this.root, this.styleModules.concat(qC).reverse(), t ? { nonce: t } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(t) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), t) {
      if (this.measureRequests.indexOf(t) > -1)
        return;
      if (t.key != null) {
        for (let e = 0; e < this.measureRequests.length; e++)
          if (this.measureRequests[e].key === t.key) {
            this.measureRequests[e] = t;
            return;
          }
      }
      this.measureRequests.push(t);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(t) {
    let e = this.pluginMap.get(t);
    return (e === void 0 || e && e.spec != t) && this.pluginMap.set(t, e = this.plugins.find((i) => i.spec == t) || null), e && e.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(t) {
    return this.readMeasured(), this.viewState.elementAtHeight(t);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(t) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(t);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(t) {
    return this.viewState.lineBlockAt(t);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(t, e, i) {
    return Td(this, t, b1(this, t, e, i));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(t, e) {
    return Td(this, t, b1(this, t, e, (i) => FA(this, t.head, i)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(t, e) {
    let i = this.bidiSpans(t), s = this.textDirectionAt(t.from), o = i[e ? i.length - 1 : 0];
    return X.cursor(o.side(e, s) + t.from, o.forward(!e, s) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(t, e, i = !0) {
    return ZA(this, t, e, i);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(t, e, i) {
    return Td(this, t, KA(this, t, e, i));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(t) {
    return this.docView.domAtPos(t);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(t, e = 0) {
    return this.docView.posFromDOM(t, e);
  }
  posAtCoords(t, e = !0) {
    return this.readMeasured(), pb(this, t, e);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(t, e = 1) {
    this.readMeasured();
    let i = this.docView.coordsAt(t, e);
    if (!i || i.left == i.right)
      return i;
    let s = this.state.doc.lineAt(t), o = this.bidiSpans(s), u = o[nl.find(o, t - s.from, -1, e)];
    return $o(i, u.dir == jt.LTR == e > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(t) {
    return this.readMeasured(), this.docView.coordsForChar(t);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(t) {
    return !this.state.facet(sb) || t < this.viewport.from || t > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(t));
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(t) {
    if (t.length > LC)
      return KS(t.length);
    let e = this.textDirectionAt(t.from), i;
    for (let o of this.bidiCache)
      if (o.from == t.from && o.dir == e && (o.fresh || FS(o.isolates, i = m1(this, t))))
        return o.order;
    i || (i = m1(this, t));
    let s = zA(t.text, e, i);
    return this.bidiCache.push(new fc(t.from, t.to, e, i, !0, s)), s;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var t;
    return (this.dom.ownerDocument.hasFocus() || st.safari && ((t = this.inputState) === null || t === void 0 ? void 0 : t.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      qS(this.contentDOM), this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(t) {
    this._root != t && (this._root = t, this.observer.setWindow((t.nodeType == 9 ? t : t.ownerDocument).defaultView || window), this.mountStyles());
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    this.root.activeElement == this.contentDOM && this.contentDOM.blur();
    for (let t of this.plugins)
      t.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = !0;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(t, e = {}) {
    return Su.of(new Xs(typeof t == "number" ? X.cursor(t) : t, e.y, e.x, e.yMargin, e.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: t, scrollLeft: e } = this.scrollDOM, i = this.viewState.scrollAnchorAt(t);
    return Su.of(new Xs(X.cursor(i.from), "start", "start", i.top - t, e, !0));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(t) {
    t == null ? this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1 : typeof t == "boolean" ? this.inputState.tabFocusMode = t ? 0 : -1 : this.inputState.tabFocusMode != 0 && (this.inputState.tabFocusMode = Date.now() + t);
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(t) {
    return ee.define(() => ({}), { eventHandlers: t });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(t) {
    return ee.define(() => ({}), { eventObservers: t });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(t, e) {
    let i = sl.newName(), s = [Au.of(i), Oo.of(qp(`.${i}`, t))];
    return e && e.dark && s.push(Dp.of(!0)), s;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(t) {
    return fl.lowest(Oo.of(qp("." + zp, t, Cb)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(t) {
    var e;
    let i = t.querySelector(".cm-content"), s = i && Ht.get(i) || Ht.get(t);
    return ((e = s == null ? void 0 : s.rootView) === null || e === void 0 ? void 0 : e.view) || null;
  }
}
it.styleModule = Oo;
it.inputHandler = nb;
it.clipboardInputFilter = um;
it.clipboardOutputFilter = cm;
it.scrollHandler = ob;
it.focusChangeEffect = lb;
it.perLineTextDirection = sb;
it.exceptionSink = ib;
it.updateListener = Ep;
it.editable = xn;
it.mouseSelectionStyle = eb;
it.dragMovesSelection = tb;
it.clickAddsSelectionRange = IS;
it.decorations = Ro;
it.outerDecorations = cb;
it.atomicRanges = hm;
it.bidiIsolatedRanges = fb;
it.scrollMargins = hb;
it.darkTheme = Dp;
it.cspNonce = /* @__PURE__ */ lt.define({ combine: (n) => n.length ? n[0] : "" });
it.contentAttributes = fm;
it.editorAttributes = ub;
it.lineWrapping = /* @__PURE__ */ it.contentAttributes.of({ class: "cm-lineWrapping" });
it.announce = /* @__PURE__ */ yt.define();
const LC = 4096, L1 = {};
class fc {
  constructor(t, e, i, s, o, u) {
    this.from = t, this.to = e, this.dir = i, this.isolates = s, this.fresh = o, this.order = u;
  }
  static update(t, e) {
    if (e.empty && !t.some((o) => o.fresh))
      return t;
    let i = [], s = t.length ? t[t.length - 1].dir : jt.LTR;
    for (let o = Math.max(0, t.length - 10); o < t.length; o++) {
      let u = t[o];
      u.dir == s && !e.touchesRange(u.from, u.to) && i.push(new fc(e.mapPos(u.from, 1), e.mapPos(u.to, -1), u.dir, u.isolates, !1, u.order));
    }
    return i;
  }
}
function U1(n, t, e) {
  for (let i = n.state.facet(t), s = i.length - 1; s >= 0; s--) {
    let o = i[s], u = typeof o == "function" ? o(n) : o;
    u && xp(u, e);
  }
  return e;
}
const UC = st.mac ? "mac" : st.windows ? "win" : st.linux ? "linux" : "key";
function VC(n, t) {
  const e = n.split(/-(?!$)/);
  let i = e[e.length - 1];
  i == "Space" && (i = " ");
  let s, o, u, c;
  for (let h = 0; h < e.length - 1; ++h) {
    const p = e[h];
    if (/^(cmd|meta|m)$/i.test(p))
      c = !0;
    else if (/^a(lt)?$/i.test(p))
      s = !0;
    else if (/^(c|ctrl|control)$/i.test(p))
      o = !0;
    else if (/^s(hift)?$/i.test(p))
      u = !0;
    else if (/^mod$/i.test(p))
      t == "mac" ? c = !0 : o = !0;
    else
      throw new Error("Unrecognized modifier name: " + p);
  }
  return s && (i = "Alt-" + i), o && (i = "Ctrl-" + i), c && (i = "Meta-" + i), u && (i = "Shift-" + i), i;
}
function Cu(n, t, e) {
  return t.altKey && (n = "Alt-" + n), t.ctrlKey && (n = "Ctrl-" + n), t.metaKey && (n = "Meta-" + n), e !== !1 && t.shiftKey && (n = "Shift-" + n), n;
}
const HC = /* @__PURE__ */ fl.default(/* @__PURE__ */ it.domEventHandlers({
  keydown(n, t) {
    return Mb(Eb(t.state), n, t, "editor");
  }
})), ir = /* @__PURE__ */ lt.define({ enables: HC }), V1 = /* @__PURE__ */ new WeakMap();
function Eb(n) {
  let t = n.facet(ir), e = V1.get(t);
  return e || V1.set(t, e = jC(t.reduce((i, s) => i.concat(s), []))), e;
}
function XC(n, t, e) {
  return Mb(Eb(n.state), t, n, e);
}
let tl = null;
const $C = 4e3;
function jC(n, t = UC) {
  let e = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null), s = (u, c) => {
    let h = i[u];
    if (h == null)
      i[u] = c;
    else if (h != c)
      throw new Error("Key binding " + u + " is used both as a regular binding and as a multi-stroke prefix");
  }, o = (u, c, h, p, m) => {
    var O, y;
    let S = e[u] || (e[u] = /* @__PURE__ */ Object.create(null)), x = c.split(/ (?!$)/).map((M) => VC(M, t));
    for (let M = 1; M < x.length; M++) {
      let U = x.slice(0, M).join(" ");
      s(U, !0), S[U] || (S[U] = {
        preventDefault: !0,
        stopPropagation: !1,
        run: [(W) => {
          let Z = tl = { view: W, prefix: U, scope: u };
          return setTimeout(() => {
            tl == Z && (tl = null);
          }, $C), !0;
        }]
      });
    }
    let w = x.join(" ");
    s(w, !1);
    let C = S[w] || (S[w] = {
      preventDefault: !1,
      stopPropagation: !1,
      run: ((y = (O = S._any) === null || O === void 0 ? void 0 : O.run) === null || y === void 0 ? void 0 : y.slice()) || []
    });
    h && C.run.push(h), p && (C.preventDefault = !0), m && (C.stopPropagation = !0);
  };
  for (let u of n) {
    let c = u.scope ? u.scope.split(" ") : ["editor"];
    if (u.any)
      for (let p of c) {
        let m = e[p] || (e[p] = /* @__PURE__ */ Object.create(null));
        m._any || (m._any = { preventDefault: !1, stopPropagation: !1, run: [] });
        let { any: O } = u;
        for (let y in m)
          m[y].run.push((S) => O(S, _p));
      }
    let h = u[t] || u.key;
    if (h)
      for (let p of c)
        o(p, h, u.run, u.preventDefault, u.stopPropagation), u.shift && o(p, "Shift-" + h, u.shift, u.preventDefault, u.stopPropagation);
  }
  return e;
}
let _p = null;
function Mb(n, t, e, i) {
  _p = t;
  let s = dA(t), o = Ue(s, 0), u = Hi(o) == s.length && s != " ", c = "", h = !1, p = !1, m = !1;
  tl && tl.view == e && tl.scope == i && (c = tl.prefix + " ", Ob.indexOf(t.keyCode) < 0 && (p = !0, tl = null));
  let O = /* @__PURE__ */ new Set(), y = (C) => {
    if (C) {
      for (let M of C.run)
        if (!O.has(M) && (O.add(M), M(e)))
          return C.stopPropagation && (m = !0), !0;
      C.preventDefault && (C.stopPropagation && (m = !0), p = !0);
    }
    return !1;
  }, S = n[i], x, w;
  return S && (y(S[c + Cu(s, t, !u)]) ? h = !0 : u && (t.altKey || t.metaKey || t.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
  !(st.windows && t.ctrlKey && t.altKey) && (x = rl[t.keyCode]) && x != s ? (y(S[c + Cu(x, t, !0)]) || t.shiftKey && (w = Mo[t.keyCode]) != s && w != x && y(S[c + Cu(w, t, !1)])) && (h = !0) : u && t.shiftKey && y(S[c + Cu(s, t, !0)]) && (h = !0), !h && y(S._any) && (h = !0)), p && (h = !0), h && m && t.stopPropagation(), _p = null, h;
}
class Go {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(t, e, i, s, o) {
    this.className = t, this.left = e, this.top = i, this.width = s, this.height = o;
  }
  draw() {
    let t = document.createElement("div");
    return t.className = this.className, this.adjust(t), t;
  }
  update(t, e) {
    return e.className != this.className ? !1 : (this.adjust(t), !0);
  }
  adjust(t) {
    t.style.left = this.left + "px", t.style.top = this.top + "px", this.width != null && (t.style.width = this.width + "px"), t.style.height = this.height + "px";
  }
  eq(t) {
    return this.left == t.left && this.top == t.top && this.width == t.width && this.height == t.height && this.className == t.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(t, e, i) {
    if (i.empty) {
      let s = t.coordsAtPos(i.head, i.assoc || 1);
      if (!s)
        return [];
      let o = Qb(t);
      return [new Go(e, s.left - o.left, s.top - o.top, null, s.bottom - s.top)];
    } else
      return WC(t, e, i);
  }
}
function Qb(n) {
  let t = n.scrollDOM.getBoundingClientRect();
  return { left: (n.textDirection == jt.LTR ? t.left : t.right - n.scrollDOM.clientWidth * n.scaleX) - n.scrollDOM.scrollLeft * n.scaleX, top: t.top - n.scrollDOM.scrollTop * n.scaleY };
}
function H1(n, t, e, i) {
  let s = n.coordsAtPos(t, e * 2);
  if (!s)
    return i;
  let o = n.dom.getBoundingClientRect(), u = (s.top + s.bottom) / 2, c = n.posAtCoords({ x: o.left + 1, y: u }), h = n.posAtCoords({ x: o.right - 1, y: u });
  return c == null || h == null ? i : { from: Math.max(i.from, Math.min(c, h)), to: Math.min(i.to, Math.max(c, h)) };
}
function WC(n, t, e) {
  if (e.to <= n.viewport.from || e.from >= n.viewport.to)
    return [];
  let i = Math.max(e.from, n.viewport.from), s = Math.min(e.to, n.viewport.to), o = n.textDirection == jt.LTR, u = n.contentDOM, c = u.getBoundingClientRect(), h = Qb(n), p = u.querySelector(".cm-line"), m = p && window.getComputedStyle(p), O = c.left + (m ? parseInt(m.paddingLeft) + Math.min(0, parseInt(m.textIndent)) : 0), y = c.right - (m ? parseInt(m.paddingRight) : 0), S = Qp(n, i, 1), x = Qp(n, s, -1), w = S.type == ze.Text ? S : null, C = x.type == ze.Text ? x : null;
  if (w && (n.lineWrapping || S.widgetLineBreaks) && (w = H1(n, i, 1, w)), C && (n.lineWrapping || x.widgetLineBreaks) && (C = H1(n, s, -1, C)), w && C && w.from == C.from && w.to == C.to)
    return U(W(e.from, e.to, w));
  {
    let N = w ? W(e.from, null, w) : Z(S, !1), Y = C ? W(null, e.to, C) : Z(x, !0), R = [];
    return (w || S).to < (C || x).from - (w && C ? 1 : 0) || S.widgetLineBreaks > 1 && N.bottom + n.defaultLineHeight / 2 < Y.top ? R.push(M(O, N.bottom, y, Y.top)) : N.bottom < Y.top && n.elementAtHeight((N.bottom + Y.top) / 2).type == ze.Text && (N.bottom = Y.top = (N.bottom + Y.top) / 2), U(N).concat(R).concat(U(Y));
  }
  function M(N, Y, R, K) {
    return new Go(t, N - h.left, Y - h.top, R - N, K - Y);
  }
  function U({ top: N, bottom: Y, horizontal: R }) {
    let K = [];
    for (let G = 0; G < R.length; G += 2)
      K.push(M(R[G], N, R[G + 1], Y));
    return K;
  }
  function W(N, Y, R) {
    let K = 1e9, G = -1e9, J = [];
    function F(ot, ht, _, P, nt) {
      let dt = n.coordsAtPos(ot, ot == R.to ? -2 : 2), k = n.coordsAtPos(_, _ == R.from ? 2 : -2);
      !dt || !k || (K = Math.min(dt.top, k.top, K), G = Math.max(dt.bottom, k.bottom, G), nt == jt.LTR ? J.push(o && ht ? O : dt.left, o && P ? y : k.right) : J.push(!o && P ? O : k.left, !o && ht ? y : dt.right));
    }
    let V = N ?? R.from, at = Y ?? R.to;
    for (let ot of n.visibleRanges)
      if (ot.to > V && ot.from < at)
        for (let ht = Math.max(ot.from, V), _ = Math.min(ot.to, at); ; ) {
          let P = n.state.doc.lineAt(ht);
          for (let nt of n.bidiSpans(P)) {
            let dt = nt.from + P.from, k = nt.to + P.from;
            if (dt >= _)
              break;
            k > ht && F(Math.max(dt, ht), N == null && dt <= V, Math.min(k, _), Y == null && k >= at, nt.dir);
          }
          if (ht = P.to + 1, ht >= _)
            break;
        }
    return J.length == 0 && F(V, N == null, at, Y == null, n.textDirection), { top: K, bottom: G, horizontal: J };
  }
  function Z(N, Y) {
    let R = c.top + (Y ? N.top : N.bottom);
    return { top: R, bottom: R, horizontal: [] };
  }
}
function GC(n, t) {
  return n.constructor == t.constructor && n.eq(t);
}
class YC {
  constructor(t, e) {
    this.view = t, this.layer = e, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = t.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), e.above && this.dom.classList.add("cm-layer-above"), e.class && this.dom.classList.add(e.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(t.state), t.requestMeasure(this.measureReq), e.mount && e.mount(this.dom, t);
  }
  update(t) {
    t.startState.facet(Yu) != t.state.facet(Yu) && this.setOrder(t.state), (this.layer.update(t, this.dom) || t.geometryChanged) && (this.scale(), t.view.requestMeasure(this.measureReq));
  }
  docViewUpdate(t) {
    this.layer.updateOnDocViewUpdate !== !1 && t.requestMeasure(this.measureReq);
  }
  setOrder(t) {
    let e = 0, i = t.facet(Yu);
    for (; e < i.length && i[e] != this.layer; )
      e++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - e);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: t, scaleY: e } = this.view;
    (t != this.scaleX || e != this.scaleY) && (this.scaleX = t, this.scaleY = e, this.dom.style.transform = `scale(${1 / t}, ${1 / e})`);
  }
  draw(t) {
    if (t.length != this.drawn.length || t.some((e, i) => !GC(e, this.drawn[i]))) {
      let e = this.dom.firstChild, i = 0;
      for (let s of t)
        s.update && e && s.constructor && this.drawn[i].constructor && s.update(e, this.drawn[i]) ? (e = e.nextSibling, i++) : this.dom.insertBefore(s.draw(), e);
      for (; e; ) {
        let s = e.nextSibling;
        e.remove(), e = s;
      }
      this.drawn = t;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
}
const Yu = /* @__PURE__ */ lt.define();
function Rb(n) {
  return [
    ee.define((t) => new YC(t, n)),
    Yu.of(n)
  ];
}
const Do = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, {
      cursorBlinkRate: 1200,
      drawRangeCursor: !0
    }, {
      cursorBlinkRate: (t, e) => Math.min(t, e),
      drawRangeCursor: (t, e) => t || e
    });
  }
});
function ZC(n = {}) {
  return [
    Do.of(n),
    FC,
    KC,
    JC,
    rb.of(!0)
  ];
}
function Db(n) {
  return n.startState.facet(Do) != n.state.facet(Do);
}
const FC = /* @__PURE__ */ Rb({
  above: !0,
  markers(n) {
    let { state: t } = n, e = t.facet(Do), i = [];
    for (let s of t.selection.ranges) {
      let o = s == t.selection.main;
      if (s.empty || e.drawRangeCursor) {
        let u = o ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", c = s.empty ? s : X.cursor(s.head, s.head > s.anchor ? -1 : 1);
        for (let h of Go.forRange(n, u, c))
          i.push(h);
      }
    }
    return i;
  },
  update(n, t) {
    n.transactions.some((i) => i.selection) && (t.style.animationName = t.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
    let e = Db(n);
    return e && X1(n.state, t), n.docChanged || n.selectionSet || e;
  },
  mount(n, t) {
    X1(t.state, n);
  },
  class: "cm-cursorLayer"
});
function X1(n, t) {
  t.style.animationDuration = n.facet(Do).cursorBlinkRate + "ms";
}
const KC = /* @__PURE__ */ Rb({
  above: !1,
  markers(n) {
    return n.state.selection.ranges.map((t) => t.empty ? [] : Go.forRange(n, "cm-selectionBackground", t)).reduce((t, e) => t.concat(e));
  },
  update(n, t) {
    return n.docChanged || n.selectionSet || n.viewportChanged || Db(n);
  },
  class: "cm-selectionLayer"
}), JC = /* @__PURE__ */ fl.highest(/* @__PURE__ */ it.theme({
  ".cm-line": {
    "& ::selection, &::selection": { backgroundColor: "transparent !important" },
    caretColor: "transparent !important"
  },
  ".cm-content": {
    caretColor: "transparent !important",
    "& :focus": {
      caretColor: "initial !important",
      "&::selection, & ::selection": {
        backgroundColor: "Highlight !important"
      }
    }
  }
})), zb = /* @__PURE__ */ yt.define({
  map(n, t) {
    return n == null ? null : t.mapPos(n);
  }
}), So = /* @__PURE__ */ Oe.define({
  create() {
    return null;
  },
  update(n, t) {
    return n != null && (n = t.changes.mapPos(n)), t.effects.reduce((e, i) => i.is(zb) ? i.value : e, n);
  }
}), IC = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.view = n, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(n) {
    var t;
    let e = n.state.field(So);
    e == null ? this.cursor != null && ((t = this.cursor) === null || t === void 0 || t.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (n.startState.field(So) != e || n.docChanged || n.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: n } = this, t = n.state.field(So), e = t != null && n.coordsAtPos(t);
    if (!e)
      return null;
    let i = n.scrollDOM.getBoundingClientRect();
    return {
      left: e.left - i.left + n.scrollDOM.scrollLeft * n.scaleX,
      top: e.top - i.top + n.scrollDOM.scrollTop * n.scaleY,
      height: e.bottom - e.top
    };
  }
  drawCursor(n) {
    if (this.cursor) {
      let { scaleX: t, scaleY: e } = this.view;
      n ? (this.cursor.style.left = n.left / t + "px", this.cursor.style.top = n.top / e + "px", this.cursor.style.height = n.height / e + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(n) {
    this.view.state.field(So) != n && this.view.dispatch({ effects: zb.of(n) });
  }
}, {
  eventObservers: {
    dragover(n) {
      this.setDropPos(this.view.posAtCoords({ x: n.clientX, y: n.clientY }));
    },
    dragleave(n) {
      (n.target == this.view.contentDOM || !this.view.contentDOM.contains(n.relatedTarget)) && this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function tE() {
  return [So, IC];
}
function $1(n, t, e, i, s) {
  t.lastIndex = 0;
  for (let o = n.iterRange(e, i), u = e, c; !o.next().done; u += o.value.length)
    if (!o.lineBreak)
      for (; c = t.exec(o.value); )
        s(u + c.index, c);
}
function eE(n, t) {
  let e = n.visibleRanges;
  if (e.length == 1 && e[0].from == n.viewport.from && e[0].to == n.viewport.to)
    return e;
  let i = [];
  for (let { from: s, to: o } of e)
    s = Math.max(n.state.doc.lineAt(s).from, s - t), o = Math.min(n.state.doc.lineAt(o).to, o + t), i.length && i[i.length - 1].to >= s ? i[i.length - 1].to = o : i.push({ from: s, to: o });
  return i;
}
class iE {
  /**
  Create a decorator.
  */
  constructor(t) {
    const { regexp: e, decoration: i, decorate: s, boundary: o, maxLength: u = 1e3 } = t;
    if (!e.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = e, s)
      this.addMatch = (c, h, p, m) => s(m, p, p + c[0].length, c, h);
    else if (typeof i == "function")
      this.addMatch = (c, h, p, m) => {
        let O = i(c, h, p);
        O && m(p, p + c[0].length, O);
      };
    else if (i)
      this.addMatch = (c, h, p, m) => m(p, p + c[0].length, i);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = o, this.maxLength = u;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(t) {
    let e = new Tn(), i = e.add.bind(e);
    for (let { from: s, to: o } of eE(t, this.maxLength))
      $1(t.state.doc, this.regexp, s, o, (u, c) => this.addMatch(c, t, u, i));
    return e.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(t, e) {
    let i = 1e9, s = -1;
    return t.docChanged && t.changes.iterChanges((o, u, c, h) => {
      h >= t.view.viewport.from && c <= t.view.viewport.to && (i = Math.min(c, i), s = Math.max(h, s));
    }), t.viewportMoved || s - i > 1e3 ? this.createDeco(t.view) : s > -1 ? this.updateRange(t.view, e.map(t.changes), i, s) : e;
  }
  updateRange(t, e, i, s) {
    for (let o of t.visibleRanges) {
      let u = Math.max(o.from, i), c = Math.min(o.to, s);
      if (c >= u) {
        let h = t.state.doc.lineAt(u), p = h.to < c ? t.state.doc.lineAt(c) : h, m = Math.max(o.from, h.from), O = Math.min(o.to, p.to);
        if (this.boundary) {
          for (; u > h.from; u--)
            if (this.boundary.test(h.text[u - 1 - h.from])) {
              m = u;
              break;
            }
          for (; c < p.to; c++)
            if (this.boundary.test(p.text[c - p.from])) {
              O = c;
              break;
            }
        }
        let y = [], S, x = (w, C, M) => y.push(M.range(w, C));
        if (h == p)
          for (this.regexp.lastIndex = m - h.from; (S = this.regexp.exec(h.text)) && S.index < O - h.from; )
            this.addMatch(S, t, S.index + h.from, x);
        else
          $1(t.state.doc, this.regexp, m, O, (w, C) => this.addMatch(C, t, w, x));
        e = e.update({ filterFrom: m, filterTo: O, filter: (w, C) => w < m || C > O, add: y });
      }
    }
    return e;
  }
}
const Bp = /x/.unicode != null ? "gu" : "g", nE = /* @__PURE__ */ new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Bp), lE = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let Cd = null;
function sE() {
  var n;
  if (Cd == null && typeof document < "u" && document.body) {
    let t = document.body.style;
    Cd = ((n = t.tabSize) !== null && n !== void 0 ? n : t.MozTabSize) != null;
  }
  return Cd || !1;
}
const Zu = /* @__PURE__ */ lt.define({
  combine(n) {
    let t = Fi(n, {
      render: null,
      specialChars: nE,
      addSpecialChars: null
    });
    return (t.replaceTabs = !sE()) && (t.specialChars = new RegExp("	|" + t.specialChars.source, Bp)), t.addSpecialChars && (t.specialChars = new RegExp(t.specialChars.source + "|" + t.addSpecialChars.source, Bp)), t;
  }
});
function rE(n = {}) {
  return [Zu.of(n), oE()];
}
let j1 = null;
function oE() {
  return j1 || (j1 = ee.fromClass(class {
    constructor(n) {
      this.view = n, this.decorations = ft.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(n.state.facet(Zu)), this.decorations = this.decorator.createDeco(n);
    }
    makeDecorator(n) {
      return new iE({
        regexp: n.specialChars,
        decoration: (t, e, i) => {
          let { doc: s } = e.state, o = Ue(t[0], 0);
          if (o == 9) {
            let u = s.lineAt(i), c = e.state.tabSize, h = er(u.text, c, i - u.from);
            return ft.replace({
              widget: new fE((c - h % c) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[o] || (this.decorationCache[o] = ft.replace({ widget: new cE(n, o) }));
        },
        boundary: n.replaceTabs ? void 0 : /[^]/
      });
    }
    update(n) {
      let t = n.state.facet(Zu);
      n.startState.facet(Zu) != t ? (this.decorator = this.makeDecorator(t), this.decorations = this.decorator.createDeco(n.view)) : this.decorations = this.decorator.updateDeco(n, this.decorations);
    }
  }, {
    decorations: (n) => n.decorations
  }));
}
const aE = "•";
function uE(n) {
  return n >= 32 ? aE : n == 10 ? "␤" : String.fromCharCode(9216 + n);
}
class cE extends Ki {
  constructor(t, e) {
    super(), this.options = t, this.code = e;
  }
  eq(t) {
    return t.code == this.code;
  }
  toDOM(t) {
    let e = uE(this.code), i = t.state.phrase("Control character") + " " + (lE[this.code] || "0x" + this.code.toString(16)), s = this.options.render && this.options.render(this.code, i, e);
    if (s)
      return s;
    let o = document.createElement("span");
    return o.textContent = e, o.title = i, o.setAttribute("aria-label", i), o.className = "cm-specialChar", o;
  }
  ignoreEvent() {
    return !1;
  }
}
class fE extends Ki {
  constructor(t) {
    super(), this.width = t;
  }
  eq(t) {
    return t.width == this.width;
  }
  toDOM() {
    let t = document.createElement("span");
    return t.textContent = "	", t.className = "cm-tab", t.style.width = this.width + "px", t;
  }
  ignoreEvent() {
    return !1;
  }
}
function hE() {
  return pE;
}
const dE = /* @__PURE__ */ ft.line({ class: "cm-activeLine" }), pE = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.docChanged || n.selectionSet) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let t = -1, e = [];
    for (let i of n.state.selection.ranges) {
      let s = n.lineBlockAt(i.head);
      s.from > t && (e.push(dE.range(s.from)), t = s.from);
    }
    return ft.set(e);
  }
}, {
  decorations: (n) => n.decorations
});
class mE extends Ki {
  constructor(t) {
    super(), this.content = t;
  }
  toDOM(t) {
    let e = document.createElement("span");
    return e.className = "cm-placeholder", e.style.pointerEvents = "none", e.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : typeof this.content == "function" ? this.content(t) : this.content.cloneNode(!0)), e.setAttribute("aria-hidden", "true"), e;
  }
  coordsAt(t) {
    let e = t.firstChild ? Ys(t.firstChild) : [];
    if (!e.length)
      return null;
    let i = window.getComputedStyle(t.parentNode), s = $o(e[0], i.direction != "rtl"), o = parseInt(i.lineHeight);
    return s.bottom - s.top > o * 1.5 ? { left: s.left, right: s.right, top: s.top, bottom: s.top + o } : s;
  }
  ignoreEvent() {
    return !1;
  }
}
function gE(n) {
  let t = ee.fromClass(class {
    constructor(e) {
      this.view = e, this.placeholder = n ? ft.set([ft.widget({ widget: new mE(n), side: 1 }).range(0)]) : ft.none;
    }
    get decorations() {
      return this.view.state.doc.length ? ft.none : this.placeholder;
    }
  }, { decorations: (e) => e.decorations });
  return typeof n == "string" ? [
    t,
    it.contentAttributes.of({ "aria-placeholder": n })
  ] : t;
}
const Np = 2e3;
function OE(n, t, e) {
  let i = Math.min(t.line, e.line), s = Math.max(t.line, e.line), o = [];
  if (t.off > Np || e.off > Np || t.col < 0 || e.col < 0) {
    let u = Math.min(t.off, e.off), c = Math.max(t.off, e.off);
    for (let h = i; h <= s; h++) {
      let p = n.doc.line(h);
      p.length <= c && o.push(X.range(p.from + u, p.to + c));
    }
  } else {
    let u = Math.min(t.col, e.col), c = Math.max(t.col, e.col);
    for (let h = i; h <= s; h++) {
      let p = n.doc.line(h), m = mp(p.text, u, n.tabSize, !0);
      if (m < 0)
        o.push(X.cursor(p.to));
      else {
        let O = mp(p.text, c, n.tabSize);
        o.push(X.range(p.from + m, p.from + O));
      }
    }
  }
  return o;
}
function yE(n, t) {
  let e = n.coordsAtPos(n.viewport.from);
  return e ? Math.round(Math.abs((e.left - t) / n.defaultCharacterWidth)) : -1;
}
function W1(n, t) {
  let e = n.posAtCoords({ x: t.clientX, y: t.clientY }, !1), i = n.state.doc.lineAt(e), s = e - i.from, o = s > Np ? -1 : s == i.length ? yE(n, t.clientX) : er(i.text, n.state.tabSize, e - i.from);
  return { line: i.number, col: o, off: s };
}
function vE(n, t) {
  let e = W1(n, t), i = n.state.selection;
  return e ? {
    update(s) {
      if (s.docChanged) {
        let o = s.changes.mapPos(s.startState.doc.line(e.line).from), u = s.state.doc.lineAt(o);
        e = { line: u.number, col: e.col, off: Math.min(e.off, u.length) }, i = i.map(s.changes);
      }
    },
    get(s, o, u) {
      let c = W1(n, s);
      if (!c)
        return i;
      let h = OE(n.state, e, c);
      return h.length ? u ? X.create(h.concat(i.ranges)) : X.create(h) : i;
    }
  } : null;
}
function SE(n) {
  let t = (e) => e.altKey && e.button == 0;
  return it.mouseSelectionStyle.of((e, i) => t(i) ? vE(e, i) : null);
}
const bE = {
  Alt: [18, (n) => !!n.altKey],
  Control: [17, (n) => !!n.ctrlKey],
  Shift: [16, (n) => !!n.shiftKey],
  Meta: [91, (n) => !!n.metaKey]
}, xE = { style: "cursor: crosshair" };
function wE(n = {}) {
  let [t, e] = bE[n.key || "Alt"], i = ee.fromClass(class {
    constructor(s) {
      this.view = s, this.isDown = !1;
    }
    set(s) {
      this.isDown != s && (this.isDown = s, this.view.update([]));
    }
  }, {
    eventObservers: {
      keydown(s) {
        this.set(s.keyCode == t || e(s));
      },
      keyup(s) {
        (s.keyCode == t || !e(s)) && this.set(!1);
      },
      mousemove(s) {
        this.set(e(s));
      }
    }
  });
  return [
    i,
    it.contentAttributes.of((s) => {
      var o;
      return !((o = s.plugin(i)) === null || o === void 0) && o.isDown ? xE : null;
    })
  ];
}
const ao = "-10000px";
class qb {
  constructor(t, e, i, s) {
    this.facet = e, this.createTooltipView = i, this.removeTooltipView = s, this.input = t.state.facet(e), this.tooltips = this.input.filter((u) => u);
    let o = null;
    this.tooltipViews = this.tooltips.map((u) => o = i(u, o));
  }
  update(t, e) {
    var i;
    let s = t.state.facet(this.facet), o = s.filter((h) => h);
    if (s === this.input) {
      for (let h of this.tooltipViews)
        h.update && h.update(t);
      return !1;
    }
    let u = [], c = e ? [] : null;
    for (let h = 0; h < o.length; h++) {
      let p = o[h], m = -1;
      if (p) {
        for (let O = 0; O < this.tooltips.length; O++) {
          let y = this.tooltips[O];
          y && y.create == p.create && (m = O);
        }
        if (m < 0)
          u[h] = this.createTooltipView(p, h ? u[h - 1] : null), c && (c[h] = !!p.above);
        else {
          let O = u[h] = this.tooltipViews[m];
          c && (c[h] = e[m]), O.update && O.update(t);
        }
      }
    }
    for (let h of this.tooltipViews)
      u.indexOf(h) < 0 && (this.removeTooltipView(h), (i = h.destroy) === null || i === void 0 || i.call(h));
    return e && (c.forEach((h, p) => e[p] = h), e.length = c.length), this.input = s, this.tooltips = o, this.tooltipViews = u, !0;
  }
}
function TE(n) {
  let t = n.dom.ownerDocument.documentElement;
  return { top: 0, left: 0, bottom: t.clientHeight, right: t.clientWidth };
}
const Ed = /* @__PURE__ */ lt.define({
  combine: (n) => {
    var t, e, i;
    return {
      position: st.ios ? "absolute" : ((t = n.find((s) => s.position)) === null || t === void 0 ? void 0 : t.position) || "fixed",
      parent: ((e = n.find((s) => s.parent)) === null || e === void 0 ? void 0 : e.parent) || null,
      tooltipSpace: ((i = n.find((s) => s.tooltipSpace)) === null || i === void 0 ? void 0 : i.tooltipSpace) || TE
    };
  }
}), G1 = /* @__PURE__ */ new WeakMap(), Om = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.view = n, this.above = [], this.inView = !0, this.madeAbsolute = !1, this.lastTransaction = 0, this.measureTimeout = -1;
    let t = n.state.facet(Ed);
    this.position = t.position, this.parent = t.parent, this.classes = n.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null, this.manager = new qb(n, ym, (e, i) => this.createTooltip(e, i), (e) => {
      this.resizeObserver && this.resizeObserver.unobserve(e.dom), e.dom.remove();
    }), this.above = this.manager.tooltips.map((e) => !!e.above), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((e) => {
      Date.now() > this.lastTransaction - 50 && e.length > 0 && e[e.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), n.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let n of this.manager.tooltipViews)
        this.intersectionObserver.observe(n.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(n) {
    n.transactions.length && (this.lastTransaction = Date.now());
    let t = this.manager.update(n, this.above);
    t && this.observeIntersection();
    let e = t || n.geometryChanged, i = n.state.facet(Ed);
    if (i.position != this.position && !this.madeAbsolute) {
      this.position = i.position;
      for (let s of this.manager.tooltipViews)
        s.dom.style.position = this.position;
      e = !0;
    }
    if (i.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i.parent, this.createContainer();
      for (let s of this.manager.tooltipViews)
        this.container.appendChild(s.dom);
      e = !0;
    } else this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    e && this.maybeMeasure();
  }
  createTooltip(n, t) {
    let e = n.create(this.view), i = t ? t.dom : null;
    if (e.dom.classList.add("cm-tooltip"), n.arrow && !e.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let s = document.createElement("div");
      s.className = "cm-tooltip-arrow", e.dom.appendChild(s);
    }
    return e.dom.style.position = this.position, e.dom.style.top = ao, e.dom.style.left = "0px", this.container.insertBefore(e.dom, i), e.mount && e.mount(this.view), this.resizeObserver && this.resizeObserver.observe(e.dom), e;
  }
  destroy() {
    var n, t, e;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let i of this.manager.tooltipViews)
      i.dom.remove(), (n = i.destroy) === null || n === void 0 || n.call(i);
    this.parent && this.container.remove(), (t = this.resizeObserver) === null || t === void 0 || t.disconnect(), (e = this.intersectionObserver) === null || e === void 0 || e.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let n = 1, t = 1, e = !1;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: o } = this.manager.tooltipViews[0];
      if (st.gecko)
        e = o.offsetParent != this.container.ownerDocument.body;
      else if (o.style.top == ao && o.style.left == "0px") {
        let u = o.getBoundingClientRect();
        e = Math.abs(u.top + 1e4) > 1 || Math.abs(u.left) > 1;
      }
    }
    if (e || this.position == "absolute")
      if (this.parent) {
        let o = this.parent.getBoundingClientRect();
        o.width && o.height && (n = o.width / this.parent.offsetWidth, t = o.height / this.parent.offsetHeight);
      } else
        ({ scaleX: n, scaleY: t } = this.view.viewState);
    let i = this.view.scrollDOM.getBoundingClientRect(), s = dm(this.view);
    return {
      visible: {
        left: i.left + s.left,
        top: i.top + s.top,
        right: i.right - s.right,
        bottom: i.bottom - s.bottom
      },
      parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
      pos: this.manager.tooltips.map((o, u) => {
        let c = this.manager.tooltipViews[u];
        return c.getCoords ? c.getCoords(o.pos) : this.view.coordsAtPos(o.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: o }) => o.getBoundingClientRect()),
      space: this.view.state.facet(Ed).tooltipSpace(this.view),
      scaleX: n,
      scaleY: t,
      makeAbsolute: e
    };
  }
  writeMeasure(n) {
    var t;
    if (n.makeAbsolute) {
      this.madeAbsolute = !0, this.position = "absolute";
      for (let c of this.manager.tooltipViews)
        c.dom.style.position = "absolute";
    }
    let { visible: e, space: i, scaleX: s, scaleY: o } = n, u = [];
    for (let c = 0; c < this.manager.tooltips.length; c++) {
      let h = this.manager.tooltips[c], p = this.manager.tooltipViews[c], { dom: m } = p, O = n.pos[c], y = n.size[c];
      if (!O || h.clip !== !1 && (O.bottom <= Math.max(e.top, i.top) || O.top >= Math.min(e.bottom, i.bottom) || O.right < Math.max(e.left, i.left) - 0.1 || O.left > Math.min(e.right, i.right) + 0.1)) {
        m.style.top = ao;
        continue;
      }
      let S = h.arrow ? p.dom.querySelector(".cm-tooltip-arrow") : null, x = S ? 7 : 0, w = y.right - y.left, C = (t = G1.get(p)) !== null && t !== void 0 ? t : y.bottom - y.top, M = p.offset || AE, U = this.view.textDirection == jt.LTR, W = y.width > i.right - i.left ? U ? i.left : i.right - y.width : U ? Math.max(i.left, Math.min(O.left - (S ? 14 : 0) + M.x, i.right - w)) : Math.min(Math.max(i.left, O.left - w + (S ? 14 : 0) - M.x), i.right - w), Z = this.above[c];
      !h.strictSide && (Z ? O.top - C - x - M.y < i.top : O.bottom + C + x + M.y > i.bottom) && Z == i.bottom - O.bottom > O.top - i.top && (Z = this.above[c] = !Z);
      let N = (Z ? O.top - i.top : i.bottom - O.bottom) - x;
      if (N < C && p.resize !== !1) {
        if (N < this.view.defaultLineHeight) {
          m.style.top = ao;
          continue;
        }
        G1.set(p, C), m.style.height = (C = N) / o + "px";
      } else m.style.height && (m.style.height = "");
      let Y = Z ? O.top - C - x - M.y : O.bottom + x + M.y, R = W + w;
      if (p.overlap !== !0)
        for (let K of u)
          K.left < R && K.right > W && K.top < Y + C && K.bottom > Y && (Y = Z ? K.top - C - 2 - x : K.bottom + x + 2);
      if (this.position == "absolute" ? (m.style.top = (Y - n.parent.top) / o + "px", Y1(m, (W - n.parent.left) / s)) : (m.style.top = Y / o + "px", Y1(m, W / s)), S) {
        let K = O.left + (U ? M.x : -M.x) - (W + 14 - 7);
        S.style.left = K / s + "px";
      }
      p.overlap !== !0 && u.push({ left: W, top: Y, right: R, bottom: Y + C }), m.classList.toggle("cm-tooltip-above", Z), m.classList.toggle("cm-tooltip-below", !Z), p.positioned && p.positioned(n.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let n of this.manager.tooltipViews)
        n.dom.style.top = ao;
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
});
function Y1(n, t) {
  let e = parseInt(n.style.left, 10);
  (isNaN(e) || Math.abs(t - e) > 1) && (n.style.left = t + "px");
}
const kE = /* @__PURE__ */ it.baseTheme({
  ".cm-tooltip": {
    zIndex: 500,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: "7px",
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: "7px solid transparent",
      borderRight: "7px solid transparent"
    },
    ".cm-tooltip-above &": {
      bottom: "-7px",
      "&:before": {
        borderTop: "7px solid #bbb"
      },
      "&:after": {
        borderTop: "7px solid #f5f5f5",
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: "-7px",
      "&:before": {
        borderBottom: "7px solid #bbb"
      },
      "&:after": {
        borderBottom: "7px solid #f5f5f5",
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), AE = { x: 0, y: 0 }, ym = /* @__PURE__ */ lt.define({
  enables: [Om, kE]
}), hc = /* @__PURE__ */ lt.define({
  combine: (n) => n.reduce((t, e) => t.concat(e), [])
});
class Bc {
  // Needs to be static so that host tooltip instances always match
  static create(t) {
    return new Bc(t);
  }
  constructor(t) {
    this.view = t, this.mounted = !1, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new qb(t, hc, (e, i) => this.createHostedView(e, i), (e) => e.dom.remove());
  }
  createHostedView(t, e) {
    let i = t.create(this.view);
    return i.dom.classList.add("cm-tooltip-section"), this.dom.insertBefore(i.dom, e ? e.dom.nextSibling : this.dom.firstChild), this.mounted && i.mount && i.mount(this.view), i;
  }
  mount(t) {
    for (let e of this.manager.tooltipViews)
      e.mount && e.mount(t);
    this.mounted = !0;
  }
  positioned(t) {
    for (let e of this.manager.tooltipViews)
      e.positioned && e.positioned(t);
  }
  update(t) {
    this.manager.update(t);
  }
  destroy() {
    var t;
    for (let e of this.manager.tooltipViews)
      (t = e.destroy) === null || t === void 0 || t.call(e);
  }
  passProp(t) {
    let e;
    for (let i of this.manager.tooltipViews) {
      let s = i[t];
      if (s !== void 0) {
        if (e === void 0)
          e = s;
        else if (e !== s)
          return;
      }
    }
    return e;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
}
const CE = /* @__PURE__ */ ym.compute([hc], (n) => {
  let t = n.facet(hc);
  return t.length === 0 ? null : {
    pos: Math.min(...t.map((e) => e.pos)),
    end: Math.max(...t.map((e) => {
      var i;
      return (i = e.end) !== null && i !== void 0 ? i : e.pos;
    })),
    create: Bc.create,
    above: t[0].above,
    arrow: t.some((e) => e.arrow)
  };
});
class EE {
  constructor(t, e, i, s, o) {
    this.view = t, this.source = e, this.field = i, this.setHover = s, this.hoverTime = o, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: t.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), t.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), t.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active.length)
      return;
    let t = Date.now() - this.lastMove.time;
    t < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - t) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view: t, lastMove: e } = this, i = t.docView.nearest(e.target);
    if (!i)
      return;
    let s, o = 1;
    if (i instanceof il)
      s = i.posAtStart;
    else {
      if (s = t.posAtCoords(e), s == null)
        return;
      let c = t.coordsAtPos(s);
      if (!c || e.y < c.top || e.y > c.bottom || e.x < c.left - t.defaultCharacterWidth || e.x > c.right + t.defaultCharacterWidth)
        return;
      let h = t.bidiSpans(t.state.doc.lineAt(s)).find((m) => m.from <= s && m.to >= s), p = h && h.dir == jt.RTL ? -1 : 1;
      o = e.x < c.left ? -p : p;
    }
    let u = this.source(t, s, o);
    if (u != null && u.then) {
      let c = this.pending = { pos: s };
      u.then((h) => {
        this.pending == c && (this.pending = null, h && !(Array.isArray(h) && !h.length) && t.dispatch({ effects: this.setHover.of(Array.isArray(h) ? h : [h]) }));
      }, (h) => Xe(t.state, h, "hover tooltip"));
    } else u && !(Array.isArray(u) && !u.length) && t.dispatch({ effects: this.setHover.of(Array.isArray(u) ? u : [u]) });
  }
  get tooltip() {
    let t = this.view.plugin(Om), e = t ? t.manager.tooltips.findIndex((i) => i.create == Bc.create) : -1;
    return e > -1 ? t.manager.tooltipViews[e] : null;
  }
  mousemove(t) {
    var e, i;
    this.lastMove = { x: t.clientX, y: t.clientY, target: t.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let { active: s, tooltip: o } = this;
    if (s.length && o && !ME(o.dom, t) || this.pending) {
      let { pos: u } = s[0] || this.pending, c = (i = (e = s[0]) === null || e === void 0 ? void 0 : e.end) !== null && i !== void 0 ? i : u;
      (u == c ? this.view.posAtCoords(this.lastMove) != u : !QE(this.view, u, c, t.clientX, t.clientY)) && (this.view.dispatch({ effects: this.setHover.of([]) }), this.pending = null);
    }
  }
  mouseleave(t) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1;
    let { active: e } = this;
    if (e.length) {
      let { tooltip: i } = this;
      i && i.dom.contains(t.relatedTarget) ? this.watchTooltipLeave(i.dom) : this.view.dispatch({ effects: this.setHover.of([]) });
    }
  }
  watchTooltipLeave(t) {
    let e = (i) => {
      t.removeEventListener("mouseleave", e), this.active.length && !this.view.dom.contains(i.relatedTarget) && this.view.dispatch({ effects: this.setHover.of([]) });
    };
    t.addEventListener("mouseleave", e);
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
const Eu = 4;
function ME(n, t) {
  let { left: e, right: i, top: s, bottom: o } = n.getBoundingClientRect(), u;
  if (u = n.querySelector(".cm-tooltip-arrow")) {
    let c = u.getBoundingClientRect();
    s = Math.min(c.top, s), o = Math.max(c.bottom, o);
  }
  return t.clientX >= e - Eu && t.clientX <= i + Eu && t.clientY >= s - Eu && t.clientY <= o + Eu;
}
function QE(n, t, e, i, s, o) {
  let u = n.scrollDOM.getBoundingClientRect(), c = n.documentTop + n.documentPadding.top + n.contentHeight;
  if (u.left > i || u.right < i || u.top > s || Math.min(u.bottom, c) < s)
    return !1;
  let h = n.posAtCoords({ x: i, y: s }, !1);
  return h >= t && h <= e;
}
function RE(n, t = {}) {
  let e = yt.define(), i = Oe.define({
    create() {
      return [];
    },
    update(s, o) {
      if (s.length && (t.hideOnChange && (o.docChanged || o.selection) ? s = [] : t.hideOn && (s = s.filter((u) => !t.hideOn(o, u))), o.docChanged)) {
        let u = [];
        for (let c of s) {
          let h = o.changes.mapPos(c.pos, -1, we.TrackDel);
          if (h != null) {
            let p = Object.assign(/* @__PURE__ */ Object.create(null), c);
            p.pos = h, p.end != null && (p.end = o.changes.mapPos(p.end)), u.push(p);
          }
        }
        s = u;
      }
      for (let u of o.effects)
        u.is(e) && (s = u.value), u.is(DE) && (s = []);
      return s;
    },
    provide: (s) => hc.from(s)
  });
  return {
    active: i,
    extension: [
      i,
      ee.define((s) => new EE(
        s,
        n,
        i,
        e,
        t.hoverTime || 300
        /* Hover.Time */
      )),
      CE
    ]
  };
}
function _b(n, t) {
  let e = n.plugin(Om);
  if (!e)
    return null;
  let i = e.manager.tooltips.indexOf(t);
  return i < 0 ? null : e.manager.tooltipViews[i];
}
const DE = /* @__PURE__ */ yt.define(), Z1 = /* @__PURE__ */ lt.define({
  combine(n) {
    let t, e;
    for (let i of n)
      t = t || i.topContainer, e = e || i.bottomContainer;
    return { topContainer: t, bottomContainer: e };
  }
});
function zo(n, t) {
  let e = n.plugin(Bb), i = e ? e.specs.indexOf(t) : -1;
  return i > -1 ? e.panels[i] : null;
}
const Bb = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.input = n.state.facet(qo), this.specs = this.input.filter((e) => e), this.panels = this.specs.map((e) => e(n));
    let t = n.state.facet(Z1);
    this.top = new Mu(n, !0, t.topContainer), this.bottom = new Mu(n, !1, t.bottomContainer), this.top.sync(this.panels.filter((e) => e.top)), this.bottom.sync(this.panels.filter((e) => !e.top));
    for (let e of this.panels)
      e.dom.classList.add("cm-panel"), e.mount && e.mount();
  }
  update(n) {
    let t = n.state.facet(Z1);
    this.top.container != t.topContainer && (this.top.sync([]), this.top = new Mu(n.view, !0, t.topContainer)), this.bottom.container != t.bottomContainer && (this.bottom.sync([]), this.bottom = new Mu(n.view, !1, t.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let e = n.state.facet(qo);
    if (e != this.input) {
      let i = e.filter((h) => h), s = [], o = [], u = [], c = [];
      for (let h of i) {
        let p = this.specs.indexOf(h), m;
        p < 0 ? (m = h(n.view), c.push(m)) : (m = this.panels[p], m.update && m.update(n)), s.push(m), (m.top ? o : u).push(m);
      }
      this.specs = i, this.panels = s, this.top.sync(o), this.bottom.sync(u);
      for (let h of c)
        h.dom.classList.add("cm-panel"), h.mount && h.mount();
    } else
      for (let i of this.panels)
        i.update && i.update(n);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (n) => it.scrollMargins.of((t) => {
    let e = t.plugin(n);
    return e && { top: e.top.scrollMargin(), bottom: e.bottom.scrollMargin() };
  })
});
class Mu {
  constructor(t, e, i) {
    this.view = t, this.top = e, this.container = i, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(t) {
    for (let e of this.panels)
      e.destroy && t.indexOf(e) < 0 && e.destroy();
    this.panels = t, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let e = this.container || this.view.dom;
      e.insertBefore(this.dom, this.top ? e.firstChild : null);
    }
    let t = this.dom.firstChild;
    for (let e of this.panels)
      if (e.dom.parentNode == this.dom) {
        for (; t != e.dom; )
          t = F1(t);
        t = t.nextSibling;
      } else
        this.dom.insertBefore(e.dom, t);
    for (; t; )
      t = F1(t);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let t of this.classes.split(" "))
        t && this.container.classList.remove(t);
      for (let t of (this.classes = this.view.themeClasses).split(" "))
        t && this.container.classList.add(t);
    }
  }
}
function F1(n) {
  let t = n.nextSibling;
  return n.remove(), t;
}
const qo = /* @__PURE__ */ lt.define({
  enables: Bb
});
class An extends Vl {
  /**
  @internal
  */
  compare(t) {
    return this == t || this.constructor == t.constructor && this.eq(t);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(t) {
    return !1;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(t) {
  }
}
An.prototype.elementClass = "";
An.prototype.toDOM = void 0;
An.prototype.mapMode = we.TrackBefore;
An.prototype.startSide = An.prototype.endSide = -1;
An.prototype.point = !0;
const Fu = /* @__PURE__ */ lt.define(), zE = /* @__PURE__ */ lt.define(), qE = {
  class: "",
  renderEmptyElements: !1,
  elementStyle: "",
  markers: () => Rt.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, ko = /* @__PURE__ */ lt.define();
function _E(n) {
  return [Nb(), ko.of(Object.assign(Object.assign({}, qE), n))];
}
const K1 = /* @__PURE__ */ lt.define({
  combine: (n) => n.some((t) => t)
});
function Nb(n) {
  return [
    BE
  ];
}
const BE = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.view = n, this.prevViewport = n.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = n.state.facet(ko).map((t) => new I1(n, t));
    for (let t of this.gutters)
      this.dom.appendChild(t.dom);
    this.fixed = !n.state.facet(K1), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(!1), n.scrollDOM.insertBefore(this.dom, n.contentDOM);
  }
  update(n) {
    if (this.updateGutters(n)) {
      let t = this.prevViewport, e = n.view.viewport, i = Math.min(t.to, e.to) - Math.max(t.from, e.from);
      this.syncGutters(i < (e.to - e.from) * 0.8);
    }
    n.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px"), this.view.state.facet(K1) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = n.view.viewport;
  }
  syncGutters(n) {
    let t = this.dom.nextSibling;
    n && this.dom.remove();
    let e = Rt.iter(this.view.state.facet(Fu), this.view.viewport.from), i = [], s = this.gutters.map((o) => new NE(o, this.view.viewport, -this.view.documentPadding.top));
    for (let o of this.view.viewportLineBlocks)
      if (i.length && (i = []), Array.isArray(o.type)) {
        let u = !0;
        for (let c of o.type)
          if (c.type == ze.Text && u) {
            Pp(e, i, c.from);
            for (let h of s)
              h.line(this.view, c, i);
            u = !1;
          } else if (c.widget)
            for (let h of s)
              h.widget(this.view, c);
      } else if (o.type == ze.Text) {
        Pp(e, i, o.from);
        for (let u of s)
          u.line(this.view, o, i);
      } else if (o.widget)
        for (let u of s)
          u.widget(this.view, o);
    for (let o of s)
      o.finish();
    n && this.view.scrollDOM.insertBefore(this.dom, t);
  }
  updateGutters(n) {
    let t = n.startState.facet(ko), e = n.state.facet(ko), i = n.docChanged || n.heightChanged || n.viewportChanged || !Rt.eq(n.startState.facet(Fu), n.state.facet(Fu), n.view.viewport.from, n.view.viewport.to);
    if (t == e)
      for (let s of this.gutters)
        s.update(n) && (i = !0);
    else {
      i = !0;
      let s = [];
      for (let o of e) {
        let u = t.indexOf(o);
        u < 0 ? s.push(new I1(this.view, o)) : (this.gutters[u].update(n), s.push(this.gutters[u]));
      }
      for (let o of this.gutters)
        o.dom.remove(), s.indexOf(o) < 0 && o.destroy();
      for (let o of s)
        this.dom.appendChild(o.dom);
      this.gutters = s;
    }
    return i;
  }
  destroy() {
    for (let n of this.gutters)
      n.destroy();
    this.dom.remove();
  }
}, {
  provide: (n) => it.scrollMargins.of((t) => {
    let e = t.plugin(n);
    return !e || e.gutters.length == 0 || !e.fixed ? null : t.textDirection == jt.LTR ? { left: e.dom.offsetWidth * t.scaleX } : { right: e.dom.offsetWidth * t.scaleX };
  })
});
function J1(n) {
  return Array.isArray(n) ? n : [n];
}
function Pp(n, t, e) {
  for (; n.value && n.from <= e; )
    n.from == e && t.push(n.value), n.next();
}
class NE {
  constructor(t, e, i) {
    this.gutter = t, this.height = i, this.i = 0, this.cursor = Rt.iter(t.markers, e.from);
  }
  addElement(t, e, i) {
    let { gutter: s } = this, o = (e.top - this.height) / t.scaleY, u = e.height / t.scaleY;
    if (this.i == s.elements.length) {
      let c = new Pb(t, u, o, i);
      s.elements.push(c), s.dom.appendChild(c.dom);
    } else
      s.elements[this.i].update(t, u, o, i);
    this.height = e.bottom, this.i++;
  }
  line(t, e, i) {
    let s = [];
    Pp(this.cursor, s, e.from), i.length && (s = s.concat(i));
    let o = this.gutter.config.lineMarker(t, e, s);
    o && s.unshift(o);
    let u = this.gutter;
    s.length == 0 && !u.config.renderEmptyElements || this.addElement(t, e, s);
  }
  widget(t, e) {
    let i = this.gutter.config.widgetMarker(t, e.widget, e), s = i ? [i] : null;
    for (let o of t.state.facet(zE)) {
      let u = o(t, e.widget, e);
      u && (s || (s = [])).push(u);
    }
    s && this.addElement(t, e, s);
  }
  finish() {
    let t = this.gutter;
    for (; t.elements.length > this.i; ) {
      let e = t.elements.pop();
      t.dom.removeChild(e.dom), e.destroy();
    }
  }
}
class I1 {
  constructor(t, e) {
    this.view = t, this.config = e, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i in e.domEventHandlers)
      this.dom.addEventListener(i, (s) => {
        let o = s.target, u;
        if (o != this.dom && this.dom.contains(o)) {
          for (; o.parentNode != this.dom; )
            o = o.parentNode;
          let h = o.getBoundingClientRect();
          u = (h.top + h.bottom) / 2;
        } else
          u = s.clientY;
        let c = t.lineBlockAtHeight(u - t.documentTop);
        e.domEventHandlers[i](t, c, s) && s.preventDefault();
      });
    this.markers = J1(e.markers(t)), e.initialSpacer && (this.spacer = new Pb(t, 0, 0, [e.initialSpacer(t)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(t) {
    let e = this.markers;
    if (this.markers = J1(this.config.markers(t.view)), this.spacer && this.config.updateSpacer) {
      let s = this.config.updateSpacer(this.spacer.markers[0], t);
      s != this.spacer.markers[0] && this.spacer.update(t.view, 0, 0, [s]);
    }
    let i = t.view.viewport;
    return !Rt.eq(this.markers, e, i.from, i.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(t) : !1);
  }
  destroy() {
    for (let t of this.elements)
      t.destroy();
  }
}
class Pb {
  constructor(t, e, i, s) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(t, e, i, s);
  }
  update(t, e, i, s) {
    this.height != e && (this.height = e, this.dom.style.height = e + "px"), this.above != i && (this.dom.style.marginTop = (this.above = i) ? i + "px" : ""), PE(this.markers, s) || this.setMarkers(t, s);
  }
  setMarkers(t, e) {
    let i = "cm-gutterElement", s = this.dom.firstChild;
    for (let o = 0, u = 0; ; ) {
      let c = u, h = o < e.length ? e[o++] : null, p = !1;
      if (h) {
        let m = h.elementClass;
        m && (i += " " + m);
        for (let O = u; O < this.markers.length; O++)
          if (this.markers[O].compare(h)) {
            c = O, p = !0;
            break;
          }
      } else
        c = this.markers.length;
      for (; u < c; ) {
        let m = this.markers[u++];
        if (m.toDOM) {
          m.destroy(s);
          let O = s.nextSibling;
          s.remove(), s = O;
        }
      }
      if (!h)
        break;
      h.toDOM && (p ? s = s.nextSibling : this.dom.insertBefore(h.toDOM(t), s)), p && u++;
    }
    this.dom.className = i, this.markers = e;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function PE(n, t) {
  if (n.length != t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (!n[e].compare(t[e]))
      return !1;
  return !0;
}
const LE = /* @__PURE__ */ lt.define(), UE = /* @__PURE__ */ lt.define(), Ps = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(t, e) {
        let i = Object.assign({}, t);
        for (let s in e) {
          let o = i[s], u = e[s];
          i[s] = o ? (c, h, p) => o(c, h, p) || u(c, h, p) : u;
        }
        return i;
      }
    });
  }
});
class Md extends An {
  constructor(t) {
    super(), this.number = t;
  }
  eq(t) {
    return this.number == t.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
}
function Qd(n, t) {
  return n.state.facet(Ps).formatNumber(t, n.state);
}
const VE = /* @__PURE__ */ ko.compute([Ps], (n) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: !1,
  markers(t) {
    return t.state.facet(LE);
  },
  lineMarker(t, e, i) {
    return i.some((s) => s.toDOM) ? null : new Md(Qd(t, t.state.doc.lineAt(e.from).number));
  },
  widgetMarker: (t, e, i) => {
    for (let s of t.state.facet(UE)) {
      let o = s(t, e, i);
      if (o)
        return o;
    }
    return null;
  },
  lineMarkerChange: (t) => t.startState.facet(Ps) != t.state.facet(Ps),
  initialSpacer(t) {
    return new Md(Qd(t, tv(t.state.doc.lines)));
  },
  updateSpacer(t, e) {
    let i = Qd(e.view, tv(e.view.state.doc.lines));
    return i == t.number ? t : new Md(i);
  },
  domEventHandlers: n.facet(Ps).domEventHandlers
}));
function HE(n = {}) {
  return [
    Ps.of(n),
    Nb(),
    VE
  ];
}
function tv(n) {
  let t = 9;
  for (; t < n; )
    t = t * 10 + 9;
  return t;
}
const XE = /* @__PURE__ */ new class extends An {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), $E = /* @__PURE__ */ Fu.compute(["selection"], (n) => {
  let t = [], e = -1;
  for (let i of n.selection.ranges) {
    let s = n.doc.lineAt(i.head).from;
    s > e && (e = s, t.push(XE.range(s)));
  }
  return Rt.of(t);
});
function jE() {
  return $E;
}
const Lb = 1024;
let WE = 0;
class Rd {
  constructor(t, e) {
    this.from = t, this.to = e;
  }
}
class wt {
  /**
  Create a new node prop type.
  */
  constructor(t = {}) {
    this.id = WE++, this.perNode = !!t.perNode, this.deserialize = t.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(t) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof t != "function" && (t = We.match(t)), (e) => {
      let i = t(e);
      return i === void 0 ? null : [this, i];
    };
  }
}
wt.closedBy = new wt({ deserialize: (n) => n.split(" ") });
wt.openedBy = new wt({ deserialize: (n) => n.split(" ") });
wt.group = new wt({ deserialize: (n) => n.split(" ") });
wt.isolate = new wt({ deserialize: (n) => {
  if (n && n != "rtl" && n != "ltr" && n != "auto")
    throw new RangeError("Invalid value for isolate: " + n);
  return n || "auto";
} });
wt.contextHash = new wt({ perNode: !0 });
wt.lookAhead = new wt({ perNode: !0 });
wt.mounted = new wt({ perNode: !0 });
class dc {
  constructor(t, e, i) {
    this.tree = t, this.overlay = e, this.parser = i;
  }
  /**
  @internal
  */
  static get(t) {
    return t && t.props && t.props[wt.mounted.id];
  }
}
const GE = /* @__PURE__ */ Object.create(null);
class We {
  /**
  @internal
  */
  constructor(t, e, i, s = 0) {
    this.name = t, this.props = e, this.id = i, this.flags = s;
  }
  /**
  Define a node type.
  */
  static define(t) {
    let e = t.props && t.props.length ? /* @__PURE__ */ Object.create(null) : GE, i = (t.top ? 1 : 0) | (t.skipped ? 2 : 0) | (t.error ? 4 : 0) | (t.name == null ? 8 : 0), s = new We(t.name || "", e, t.id, i);
    if (t.props) {
      for (let o of t.props)
        if (Array.isArray(o) || (o = o(s)), o) {
          if (o[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          e[o[0].id] = o[1];
        }
    }
    return s;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(t) {
    return this.props[t.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(t) {
    if (typeof t == "string") {
      if (this.name == t)
        return !0;
      let e = this.prop(wt.group);
      return e ? e.indexOf(t) > -1 : !1;
    }
    return this.id == t;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(t) {
    let e = /* @__PURE__ */ Object.create(null);
    for (let i in t)
      for (let s of i.split(" "))
        e[s] = t[i];
    return (i) => {
      for (let s = i.prop(wt.group), o = -1; o < (s ? s.length : 0); o++) {
        let u = e[o < 0 ? i.name : s[o]];
        if (u)
          return u;
      }
    };
  }
}
We.none = new We(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
class vm {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(t) {
    this.types = t;
    for (let e = 0; e < t.length; e++)
      if (t[e].id != e)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...t) {
    let e = [];
    for (let i of this.types) {
      let s = null;
      for (let o of t) {
        let u = o(i);
        u && (s || (s = Object.assign({}, i.props)), s[u[0].id] = u[1]);
      }
      e.push(s ? new We(i.name, s, i.id, i.flags) : i);
    }
    return new vm(e);
  }
}
const Qu = /* @__PURE__ */ new WeakMap(), ev = /* @__PURE__ */ new WeakMap();
var ce;
(function(n) {
  n[n.ExcludeBuffers = 1] = "ExcludeBuffers", n[n.IncludeAnonymous = 2] = "IncludeAnonymous", n[n.IgnoreMounts = 4] = "IgnoreMounts", n[n.IgnoreOverlays = 8] = "IgnoreOverlays";
})(ce || (ce = {}));
class re {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(t, e, i, s, o) {
    if (this.type = t, this.children = e, this.positions = i, this.length = s, this.props = null, o && o.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [u, c] of o)
        this.props[typeof u == "number" ? u : u.id] = c;
    }
  }
  /**
  @internal
  */
  toString() {
    let t = dc.get(this);
    if (t && !t.overlay)
      return t.tree.toString();
    let e = "";
    for (let i of this.children) {
      let s = i.toString();
      s && (e && (e += ","), e += s);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (e.length ? "(" + e + ")" : "") : e;
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(t = 0) {
    return new Up(this.topNode, t);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(t, e = 0, i = 0) {
    let s = Qu.get(this) || this.topNode, o = new Up(s);
    return o.moveTo(t, e), Qu.set(this, o._tree), o;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new je(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(t, e = 0) {
    let i = _o(Qu.get(this) || this.topNode, t, e, !1);
    return Qu.set(this, i), i;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(t, e = 0) {
    let i = _o(ev.get(this) || this.topNode, t, e, !0);
    return ev.set(this, i), i;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(t, e = 0) {
    return FE(this, t, e);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(t) {
    let { enter: e, leave: i, from: s = 0, to: o = this.length } = t, u = t.mode || 0, c = (u & ce.IncludeAnonymous) > 0;
    for (let h = this.cursor(u | ce.IncludeAnonymous); ; ) {
      let p = !1;
      if (h.from <= o && h.to >= s && (!c && h.type.isAnonymous || e(h) !== !1)) {
        if (h.firstChild())
          continue;
        p = !0;
      }
      for (; p && i && (c || !h.type.isAnonymous) && i(h), !h.nextSibling(); ) {
        if (!h.parent())
          return;
        p = !0;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(t) {
    return t.perNode ? this.props ? this.props[t.id] : void 0 : this.type.prop(t);
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let t = [];
    if (this.props)
      for (let e in this.props)
        t.push([+e, this.props[e]]);
    return t;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(t = {}) {
    return this.children.length <= 8 ? this : xm(We.none, this.children, this.positions, 0, this.children.length, 0, this.length, (e, i, s) => new re(this.type, e, i, s, this.propValues), t.makeTree || ((e, i, s) => new re(We.none, e, i, s)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(t) {
    return KE(t);
  }
}
re.empty = new re(We.none, [], [], 0);
class Sm {
  constructor(t, e) {
    this.buffer = t, this.index = e;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new Sm(this.buffer, this.index);
  }
}
class al {
  /**
  Create a tree buffer.
  */
  constructor(t, e, i) {
    this.buffer = t, this.length = e, this.set = i;
  }
  /**
  @internal
  */
  get type() {
    return We.none;
  }
  /**
  @internal
  */
  toString() {
    let t = [];
    for (let e = 0; e < this.buffer.length; )
      t.push(this.childString(e)), e = this.buffer[e + 3];
    return t.join(",");
  }
  /**
  @internal
  */
  childString(t) {
    let e = this.buffer[t], i = this.buffer[t + 3], s = this.set.types[e], o = s.name;
    if (/\W/.test(o) && !s.isError && (o = JSON.stringify(o)), t += 4, i == t)
      return o;
    let u = [];
    for (; t < i; )
      u.push(this.childString(t)), t = this.buffer[t + 3];
    return o + "(" + u.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(t, e, i, s, o) {
    let { buffer: u } = this, c = -1;
    for (let h = t; h != e && !(Ub(o, s, u[h + 1], u[h + 2]) && (c = h, i > 0)); h = u[h + 3])
      ;
    return c;
  }
  /**
  @internal
  */
  slice(t, e, i) {
    let s = this.buffer, o = new Uint16Array(e - t), u = 0;
    for (let c = t, h = 0; c < e; ) {
      o[h++] = s[c++], o[h++] = s[c++] - i;
      let p = o[h++] = s[c++] - i;
      o[h++] = s[c++] - t, u = Math.max(u, p);
    }
    return new al(o, u, this.set);
  }
}
function Ub(n, t, e, i) {
  switch (n) {
    case -2:
      return e < t;
    case -1:
      return i >= t && e < t;
    case 0:
      return e < t && i > t;
    case 1:
      return e <= t && i > t;
    case 2:
      return i > t;
    case 4:
      return !0;
  }
}
function _o(n, t, e, i) {
  for (var s; n.from == n.to || (e < 1 ? n.from >= t : n.from > t) || (e > -1 ? n.to <= t : n.to < t); ) {
    let u = !i && n instanceof je && n.index < 0 ? null : n.parent;
    if (!u)
      return n;
    n = u;
  }
  let o = i ? 0 : ce.IgnoreOverlays;
  if (i)
    for (let u = n, c = u.parent; c; u = c, c = u.parent)
      u instanceof je && u.index < 0 && ((s = c.enter(t, e, o)) === null || s === void 0 ? void 0 : s.from) != u.from && (n = c);
  for (; ; ) {
    let u = n.enter(t, e, o);
    if (!u)
      return n;
    n = u;
  }
}
class Vb {
  cursor(t = 0) {
    return new Up(this, t);
  }
  getChild(t, e = null, i = null) {
    let s = iv(this, t, e, i);
    return s.length ? s[0] : null;
  }
  getChildren(t, e = null, i = null) {
    return iv(this, t, e, i);
  }
  resolve(t, e = 0) {
    return _o(this, t, e, !1);
  }
  resolveInner(t, e = 0) {
    return _o(this, t, e, !0);
  }
  matchContext(t) {
    return Lp(this.parent, t);
  }
  enterUnfinishedNodesBefore(t) {
    let e = this.childBefore(t), i = this;
    for (; e; ) {
      let s = e.lastChild;
      if (!s || s.to != e.to)
        break;
      s.type.isError && s.from == s.to ? (i = e, e = s.prevSibling) : e = s;
    }
    return i;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
}
class je extends Vb {
  constructor(t, e, i, s) {
    super(), this._tree = t, this.from = e, this.index = i, this._parent = s;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(t, e, i, s, o = 0) {
    for (let u = this; ; ) {
      for (let { children: c, positions: h } = u._tree, p = e > 0 ? c.length : -1; t != p; t += e) {
        let m = c[t], O = h[t] + u.from;
        if (Ub(s, i, O, O + m.length)) {
          if (m instanceof al) {
            if (o & ce.ExcludeBuffers)
              continue;
            let y = m.findChild(0, m.buffer.length, e, i - O, s);
            if (y > -1)
              return new $i(new YE(u, m, t, O), null, y);
          } else if (o & ce.IncludeAnonymous || !m.type.isAnonymous || bm(m)) {
            let y;
            if (!(o & ce.IgnoreMounts) && (y = dc.get(m)) && !y.overlay)
              return new je(y.tree, O, t, u);
            let S = new je(m, O, t, u);
            return o & ce.IncludeAnonymous || !S.type.isAnonymous ? S : S.nextChild(e < 0 ? m.children.length - 1 : 0, e, i, s);
          }
        }
      }
      if (o & ce.IncludeAnonymous || !u.type.isAnonymous || (u.index >= 0 ? t = u.index + e : t = e < 0 ? -1 : u._parent._tree.children.length, u = u._parent, !u))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t) {
    return this.nextChild(
      0,
      1,
      t,
      2
      /* Side.After */
    );
  }
  childBefore(t) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      t,
      -2
      /* Side.Before */
    );
  }
  enter(t, e, i = 0) {
    let s;
    if (!(i & ce.IgnoreOverlays) && (s = dc.get(this._tree)) && s.overlay) {
      let o = t - this.from;
      for (let { from: u, to: c } of s.overlay)
        if ((e > 0 ? u <= o : u < o) && (e < 0 ? c >= o : c > o))
          return new je(s.tree, s.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, t, e, i);
  }
  nextSignificantParent() {
    let t = this;
    for (; t.type.isAnonymous && t._parent; )
      t = t._parent;
    return t;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
}
function iv(n, t, e, i) {
  let s = n.cursor(), o = [];
  if (!s.firstChild())
    return o;
  if (e != null) {
    for (let u = !1; !u; )
      if (u = s.type.is(e), !s.nextSibling())
        return o;
  }
  for (; ; ) {
    if (i != null && s.type.is(i))
      return o;
    if (s.type.is(t) && o.push(s.node), !s.nextSibling())
      return i == null ? o : [];
  }
}
function Lp(n, t, e = t.length - 1) {
  for (let i = n; e >= 0; i = i.parent) {
    if (!i)
      return !1;
    if (!i.type.isAnonymous) {
      if (t[e] && t[e] != i.name)
        return !1;
      e--;
    }
  }
  return !0;
}
class YE {
  constructor(t, e, i, s) {
    this.parent = t, this.buffer = e, this.index = i, this.start = s;
  }
}
class $i extends Vb {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(t, e, i) {
    super(), this.context = t, this._parent = e, this.index = i, this.type = t.buffer.set.types[t.buffer.buffer[i]];
  }
  child(t, e, i) {
    let { buffer: s } = this.context, o = s.findChild(this.index + 4, s.buffer[this.index + 3], t, e - this.context.start, i);
    return o < 0 ? null : new $i(this.context, this, o);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(t) {
    return this.child(
      1,
      t,
      2
      /* Side.After */
    );
  }
  childBefore(t) {
    return this.child(
      -1,
      t,
      -2
      /* Side.Before */
    );
  }
  enter(t, e, i = 0) {
    if (i & ce.ExcludeBuffers)
      return null;
    let { buffer: s } = this.context, o = s.findChild(this.index + 4, s.buffer[this.index + 3], e > 0 ? 1 : -1, t - this.context.start, e);
    return o < 0 ? null : new $i(this.context, this, o);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(t) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + t,
      t,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer: t } = this.context, e = t.buffer[this.index + 3];
    return e < (this._parent ? t.buffer[this._parent.index + 3] : t.buffer.length) ? new $i(this.context, this._parent, e) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: t } = this.context, e = this._parent ? this._parent.index + 4 : 0;
    return this.index == e ? this.externalSibling(-1) : new $i(this.context, this._parent, t.findChild(
      e,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let t = [], e = [], { buffer: i } = this.context, s = this.index + 4, o = i.buffer[this.index + 3];
    if (o > s) {
      let u = i.buffer[this.index + 1];
      t.push(i.slice(s, o, u)), e.push(0);
    }
    return new re(this.type, t, e, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
}
function Hb(n) {
  if (!n.length)
    return null;
  let t = 0, e = n[0];
  for (let o = 1; o < n.length; o++) {
    let u = n[o];
    (u.from > e.from || u.to < e.to) && (e = u, t = o);
  }
  let i = e instanceof je && e.index < 0 ? null : e.parent, s = n.slice();
  return i ? s[t] = i : s.splice(t, 1), new ZE(s, e);
}
class ZE {
  constructor(t, e) {
    this.heads = t, this.node = e;
  }
  get next() {
    return Hb(this.heads);
  }
}
function FE(n, t, e) {
  let i = n.resolveInner(t, e), s = null;
  for (let o = i instanceof je ? i : i.context.parent; o; o = o.parent)
    if (o.index < 0) {
      let u = o.parent;
      (s || (s = [i])).push(u.resolve(t, e)), o = u;
    } else {
      let u = dc.get(o.tree);
      if (u && u.overlay && u.overlay[0].from <= t && u.overlay[u.overlay.length - 1].to >= t) {
        let c = new je(u.tree, u.overlay[0].from + o.from, -1, o);
        (s || (s = [i])).push(_o(c, t, e, !1));
      }
    }
  return s ? Hb(s) : i;
}
class Up {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(t, e = 0) {
    if (this.mode = e, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, t instanceof je)
      this.yieldNode(t);
    else {
      this._tree = t.context.parent, this.buffer = t.context;
      for (let i = t._parent; i; i = i._parent)
        this.stack.unshift(i.index);
      this.bufferNode = t, this.yieldBuf(t.index);
    }
  }
  yieldNode(t) {
    return t ? (this._tree = t, this.type = t.type, this.from = t.from, this.to = t.to, !0) : !1;
  }
  yieldBuf(t, e) {
    this.index = t;
    let { start: i, buffer: s } = this.buffer;
    return this.type = e || s.set.types[s.buffer[t]], this.from = i + s.buffer[t + 1], this.to = i + s.buffer[t + 2], !0;
  }
  /**
  @internal
  */
  yield(t) {
    return t ? t instanceof je ? (this.buffer = null, this.yieldNode(t)) : (this.buffer = t.context, this.yieldBuf(t.index, t.type)) : !1;
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(t, e, i) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(t < 0 ? this._tree._tree.children.length - 1 : 0, t, e, i, this.mode));
    let { buffer: s } = this.buffer, o = s.findChild(this.index + 4, s.buffer[this.index + 3], t, e - this.buffer.start, i);
    return o < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(o));
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(t) {
    return this.enterChild(
      1,
      t,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(t) {
    return this.enterChild(
      -1,
      t,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(t, e, i = this.mode) {
    return this.buffer ? i & ce.ExcludeBuffers ? !1 : this.enterChild(1, t, e) : this.yield(this._tree.enter(t, e, i));
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & ce.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let t = this.mode & ce.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(t);
  }
  /**
  @internal
  */
  sibling(t) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + t, t, 0, 4, this.mode)) : !1;
    let { buffer: e } = this.buffer, i = this.stack.length - 1;
    if (t < 0) {
      let s = i < 0 ? 0 : this.stack[i] + 4;
      if (this.index != s)
        return this.yieldBuf(e.findChild(
          s,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let s = e.buffer[this.index + 3];
      if (s < (i < 0 ? e.buffer.length : e.buffer[this.stack[i] + 3]))
        return this.yieldBuf(s);
    }
    return i < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + t, t, 0, 4, this.mode)) : !1;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(t) {
    let e, i, { buffer: s } = this;
    if (s) {
      if (t > 0) {
        if (this.index < s.buffer.buffer.length)
          return !1;
      } else
        for (let o = 0; o < this.index; o++)
          if (s.buffer.buffer[o + 3] < this.index)
            return !1;
      ({ index: e, parent: i } = s);
    } else
      ({ index: e, _parent: i } = this._tree);
    for (; i; { index: e, _parent: i } = i)
      if (e > -1)
        for (let o = e + t, u = t < 0 ? -1 : i._tree.children.length; o != u; o += t) {
          let c = i._tree.children[o];
          if (this.mode & ce.IncludeAnonymous || c instanceof al || !c.type.isAnonymous || bm(c))
            return !1;
        }
    return !0;
  }
  move(t, e) {
    if (e && this.enterChild(
      t,
      0,
      4
      /* Side.DontCare */
    ))
      return !0;
    for (; ; ) {
      if (this.sibling(t))
        return !0;
      if (this.atLastNode(t) || !this.parent())
        return !1;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(t = !0) {
    return this.move(1, t);
  }
  /**
  Move to the next node in a last-to-first pre-order traversal. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(t = !0) {
    return this.move(-1, t);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(t, e = 0) {
    for (; (this.from == this.to || (e < 1 ? this.from >= t : this.from > t) || (e > -1 ? this.to <= t : this.to < t)) && this.parent(); )
      ;
    for (; this.enterChild(1, t, e); )
      ;
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let t = this.bufferNode, e = null, i = 0;
    if (t && t.context == this.buffer)
      t: for (let s = this.index, o = this.stack.length; o >= 0; ) {
        for (let u = t; u; u = u._parent)
          if (u.index == s) {
            if (s == this.index)
              return u;
            e = u, i = o + 1;
            break t;
          }
        s = this.stack[--o];
      }
    for (let s = i; s < this.stack.length; s++)
      e = new $i(this.buffer, e, this.stack[s]);
    return this.bufferNode = new $i(this.buffer, e, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(t, e) {
    for (let i = 0; ; ) {
      let s = !1;
      if (this.type.isAnonymous || t(this) !== !1) {
        if (this.firstChild()) {
          i++;
          continue;
        }
        this.type.isAnonymous || (s = !0);
      }
      for (; ; ) {
        if (s && e && e(this), s = this.type.isAnonymous, !i)
          return;
        if (this.nextSibling())
          break;
        this.parent(), i--, s = !0;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(t) {
    if (!this.buffer)
      return Lp(this.node.parent, t);
    let { buffer: e } = this.buffer, { types: i } = e.set;
    for (let s = t.length - 1, o = this.stack.length - 1; s >= 0; o--) {
      if (o < 0)
        return Lp(this._tree, t, s);
      let u = i[e.buffer[this.stack[o]]];
      if (!u.isAnonymous) {
        if (t[s] && t[s] != u.name)
          return !1;
        s--;
      }
    }
    return !0;
  }
}
function bm(n) {
  return n.children.some((t) => t instanceof al || !t.type.isAnonymous || bm(t));
}
function KE(n) {
  var t;
  let { buffer: e, nodeSet: i, maxBufferLength: s = Lb, reused: o = [], minRepeatType: u = i.types.length } = n, c = Array.isArray(e) ? new Sm(e, e.length) : e, h = i.types, p = 0, m = 0;
  function O(N, Y, R, K, G, J) {
    let { id: F, start: V, end: at, size: ot } = c, ht = m, _ = p;
    for (; ot < 0; )
      if (c.next(), ot == -1) {
        let $ = o[F];
        R.push($), K.push(V - N);
        return;
      } else if (ot == -3) {
        p = F;
        return;
      } else if (ot == -4) {
        m = F;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${ot}`);
    let P = h[F], nt, dt, k = V - N;
    if (at - V <= s && (dt = C(c.pos - Y, G))) {
      let $ = new Uint16Array(dt.size - dt.skip), tt = c.pos - dt.size, I = $.length;
      for (; c.pos > tt; )
        I = M(dt.start, $, I);
      nt = new al($, at - dt.start, i), k = dt.start - N;
    } else {
      let $ = c.pos - ot;
      c.next();
      let tt = [], I = [], ut = F >= u ? F : -1, St = 0, gt = at;
      for (; c.pos > $; )
        ut >= 0 && c.id == ut && c.size >= 0 ? (c.end <= gt - s && (x(tt, I, V, St, c.end, gt, ut, ht, _), St = tt.length, gt = c.end), c.next()) : J > 2500 ? y(V, $, tt, I) : O(V, $, tt, I, ut, J + 1);
      if (ut >= 0 && St > 0 && St < tt.length && x(tt, I, V, St, V, gt, ut, ht, _), tt.reverse(), I.reverse(), ut > -1 && St > 0) {
        let ke = S(P, _);
        nt = xm(P, tt, I, 0, tt.length, 0, at - V, ke, ke);
      } else
        nt = w(P, tt, I, at - V, ht - at, _);
    }
    R.push(nt), K.push(k);
  }
  function y(N, Y, R, K) {
    let G = [], J = 0, F = -1;
    for (; c.pos > Y; ) {
      let { id: V, start: at, end: ot, size: ht } = c;
      if (ht > 4)
        c.next();
      else {
        if (F > -1 && at < F)
          break;
        F < 0 && (F = ot - s), G.push(V, at, ot), J++, c.next();
      }
    }
    if (J) {
      let V = new Uint16Array(J * 4), at = G[G.length - 2];
      for (let ot = G.length - 3, ht = 0; ot >= 0; ot -= 3)
        V[ht++] = G[ot], V[ht++] = G[ot + 1] - at, V[ht++] = G[ot + 2] - at, V[ht++] = ht;
      R.push(new al(V, G[2] - at, i)), K.push(at - N);
    }
  }
  function S(N, Y) {
    return (R, K, G) => {
      let J = 0, F = R.length - 1, V, at;
      if (F >= 0 && (V = R[F]) instanceof re) {
        if (!F && V.type == N && V.length == G)
          return V;
        (at = V.prop(wt.lookAhead)) && (J = K[F] + V.length + at);
      }
      return w(N, R, K, G, J, Y);
    };
  }
  function x(N, Y, R, K, G, J, F, V, at) {
    let ot = [], ht = [];
    for (; N.length > K; )
      ot.push(N.pop()), ht.push(Y.pop() + R - G);
    N.push(w(i.types[F], ot, ht, J - G, V - J, at)), Y.push(G - R);
  }
  function w(N, Y, R, K, G, J, F) {
    if (J) {
      let V = [wt.contextHash, J];
      F = F ? [V].concat(F) : [V];
    }
    if (G > 25) {
      let V = [wt.lookAhead, G];
      F = F ? [V].concat(F) : [V];
    }
    return new re(N, Y, R, K, F);
  }
  function C(N, Y) {
    let R = c.fork(), K = 0, G = 0, J = 0, F = R.end - s, V = { size: 0, start: 0, skip: 0 };
    t: for (let at = R.pos - N; R.pos > at; ) {
      let ot = R.size;
      if (R.id == Y && ot >= 0) {
        V.size = K, V.start = G, V.skip = J, J += 4, K += 4, R.next();
        continue;
      }
      let ht = R.pos - ot;
      if (ot < 0 || ht < at || R.start < F)
        break;
      let _ = R.id >= u ? 4 : 0, P = R.start;
      for (R.next(); R.pos > ht; ) {
        if (R.size < 0)
          if (R.size == -3)
            _ += 4;
          else
            break t;
        else R.id >= u && (_ += 4);
        R.next();
      }
      G = P, K += ot, J += _;
    }
    return (Y < 0 || K == N) && (V.size = K, V.start = G, V.skip = J), V.size > 4 ? V : void 0;
  }
  function M(N, Y, R) {
    let { id: K, start: G, end: J, size: F } = c;
    if (c.next(), F >= 0 && K < u) {
      let V = R;
      if (F > 4) {
        let at = c.pos - (F - 4);
        for (; c.pos > at; )
          R = M(N, Y, R);
      }
      Y[--R] = V, Y[--R] = J - N, Y[--R] = G - N, Y[--R] = K;
    } else F == -3 ? p = K : F == -4 && (m = K);
    return R;
  }
  let U = [], W = [];
  for (; c.pos > 0; )
    O(n.start || 0, n.bufferStart || 0, U, W, -1, 0);
  let Z = (t = n.length) !== null && t !== void 0 ? t : U.length ? W[0] + U[0].length : 0;
  return new re(h[n.topID], U.reverse(), W.reverse(), Z);
}
const nv = /* @__PURE__ */ new WeakMap();
function Ku(n, t) {
  if (!n.isAnonymous || t instanceof al || t.type != n)
    return 1;
  let e = nv.get(t);
  if (e == null) {
    e = 1;
    for (let i of t.children) {
      if (i.type != n || !(i instanceof re)) {
        e = 1;
        break;
      }
      e += Ku(n, i);
    }
    nv.set(t, e);
  }
  return e;
}
function xm(n, t, e, i, s, o, u, c, h) {
  let p = 0;
  for (let x = i; x < s; x++)
    p += Ku(n, t[x]);
  let m = Math.ceil(
    p * 1.5 / 8
    /* Balance.BranchFactor */
  ), O = [], y = [];
  function S(x, w, C, M, U) {
    for (let W = C; W < M; ) {
      let Z = W, N = w[W], Y = Ku(n, x[W]);
      for (W++; W < M; W++) {
        let R = Ku(n, x[W]);
        if (Y + R >= m)
          break;
        Y += R;
      }
      if (W == Z + 1) {
        if (Y > m) {
          let R = x[Z];
          S(R.children, R.positions, 0, R.children.length, w[Z] + U);
          continue;
        }
        O.push(x[Z]);
      } else {
        let R = w[W - 1] + x[W - 1].length - N;
        O.push(xm(n, x, w, Z, W, N, R, null, h));
      }
      y.push(N + U - o);
    }
  }
  return S(t, e, i, s, 0), (c || h)(O, y, u);
}
class JE {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(t, e, i) {
    let s = this.map.get(t);
    s || this.map.set(t, s = /* @__PURE__ */ new Map()), s.set(e, i);
  }
  getBuffer(t, e) {
    let i = this.map.get(t);
    return i && i.get(e);
  }
  /**
  Set the value for this syntax node.
  */
  set(t, e) {
    t instanceof $i ? this.setBuffer(t.context.buffer, t.index, e) : t instanceof je && this.map.set(t.tree, e);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(t) {
    return t instanceof $i ? this.getBuffer(t.context.buffer, t.index) : t instanceof je ? this.map.get(t.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(t, e) {
    t.buffer ? this.setBuffer(t.buffer.buffer, t.index, e) : this.map.set(t.tree, e);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(t) {
    return t.buffer ? this.getBuffer(t.buffer.buffer, t.index) : this.map.get(t.tree);
  }
}
class Ll {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(t, e, i, s, o = !1, u = !1) {
    this.from = t, this.to = e, this.tree = i, this.offset = s, this.open = (o ? 1 : 0) | (u ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(t, e = [], i = !1) {
    let s = [new Ll(0, t.length, t, 0, !1, i)];
    for (let o of e)
      o.to > t.length && s.push(o);
    return s;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(t, e, i = 128) {
    if (!e.length)
      return t;
    let s = [], o = 1, u = t.length ? t[0] : null;
    for (let c = 0, h = 0, p = 0; ; c++) {
      let m = c < e.length ? e[c] : null, O = m ? m.fromA : 1e9;
      if (O - h >= i)
        for (; u && u.from < O; ) {
          let y = u;
          if (h >= y.from || O <= y.to || p) {
            let S = Math.max(y.from, h) - p, x = Math.min(y.to, O) - p;
            y = S >= x ? null : new Ll(S, x, y.tree, y.offset + p, c > 0, !!m);
          }
          if (y && s.push(y), u.to > O)
            break;
          u = o < t.length ? t[o++] : null;
        }
      if (!m)
        break;
      h = m.toA, p = m.toA - m.toB;
    }
    return s;
  }
}
class Xb {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(t, e, i) {
    return typeof t == "string" && (t = new IE(t)), i = i ? i.length ? i.map((s) => new Rd(s.from, s.to)) : [new Rd(0, 0)] : [new Rd(0, t.length)], this.createParse(t, e || [], i);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(t, e, i) {
    let s = this.startParse(t, e, i);
    for (; ; ) {
      let o = s.advance();
      if (o)
        return o;
    }
  }
}
class IE {
  constructor(t) {
    this.string = t;
  }
  get length() {
    return this.string.length;
  }
  chunk(t) {
    return this.string.slice(t);
  }
  get lineChunks() {
    return !1;
  }
  read(t, e) {
    return this.string.slice(t, e);
  }
}
new wt({ perNode: !0 });
let tM = 0;
class gi {
  /**
  @internal
  */
  constructor(t, e, i, s) {
    this.name = t, this.set = e, this.base = i, this.modified = s, this.id = tM++;
  }
  toString() {
    let { name: t } = this;
    for (let e of this.modified)
      e.name && (t = `${e.name}(${t})`);
    return t;
  }
  static define(t, e) {
    let i = typeof t == "string" ? t : "?";
    if (t instanceof gi && (e = t), e != null && e.base)
      throw new Error("Can not derive from a modified tag");
    let s = new gi(i, [], null, []);
    if (s.set.push(s), e)
      for (let o of e.set)
        s.set.push(o);
    return s;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier(t) {
    let e = new pc(t);
    return (i) => i.modified.indexOf(e) > -1 ? i : pc.get(i.base || i, i.modified.concat(e).sort((s, o) => s.id - o.id));
  }
}
let eM = 0;
class pc {
  constructor(t) {
    this.name = t, this.instances = [], this.id = eM++;
  }
  static get(t, e) {
    if (!e.length)
      return t;
    let i = e[0].instances.find((c) => c.base == t && iM(e, c.modified));
    if (i)
      return i;
    let s = [], o = new gi(t.name, s, t, e);
    for (let c of e)
      c.instances.push(o);
    let u = nM(e);
    for (let c of t.set)
      if (!c.modified.length)
        for (let h of u)
          s.push(pc.get(c, h));
    return o;
  }
}
function iM(n, t) {
  return n.length == t.length && n.every((e, i) => e == t[i]);
}
function nM(n) {
  let t = [[]];
  for (let e = 0; e < n.length; e++)
    for (let i = 0, s = t.length; i < s; i++)
      t.push(t[i].concat(n[e]));
  return t.sort((e, i) => i.length - e.length);
}
function $b(n) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let e in n) {
    let i = n[e];
    Array.isArray(i) || (i = [i]);
    for (let s of e.split(" "))
      if (s) {
        let o = [], u = 2, c = s;
        for (let O = 0; ; ) {
          if (c == "..." && O > 0 && O + 3 == s.length) {
            u = 1;
            break;
          }
          let y = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(c);
          if (!y)
            throw new RangeError("Invalid path: " + s);
          if (o.push(y[0] == "*" ? "" : y[0][0] == '"' ? JSON.parse(y[0]) : y[0]), O += y[0].length, O == s.length)
            break;
          let S = s[O++];
          if (O == s.length && S == "!") {
            u = 0;
            break;
          }
          if (S != "/")
            throw new RangeError("Invalid path: " + s);
          c = s.slice(O);
        }
        let h = o.length - 1, p = o[h];
        if (!p)
          throw new RangeError("Invalid path: " + s);
        let m = new mc(i, u, h > 0 ? o.slice(0, h) : null);
        t[p] = m.sort(t[p]);
      }
  }
  return jb.add(t);
}
const jb = new wt();
class mc {
  constructor(t, e, i, s) {
    this.tags = t, this.mode = e, this.context = i, this.next = s;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(t) {
    return !t || t.depth < this.depth ? (this.next = t, this) : (t.next = this.sort(t.next), t);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
mc.empty = new mc([], 2, null);
function Wb(n, t) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let o of n)
    if (!Array.isArray(o.tag))
      e[o.tag.id] = o.class;
    else
      for (let u of o.tag)
        e[u.id] = o.class;
  let { scope: i, all: s = null } = t || {};
  return {
    style: (o) => {
      let u = s;
      for (let c of o)
        for (let h of c.set) {
          let p = e[h.id];
          if (p) {
            u = u ? u + " " + p : p;
            break;
          }
        }
      return u;
    },
    scope: i
  };
}
function lM(n, t) {
  let e = null;
  for (let i of n) {
    let s = i.style(t);
    s && (e = e ? e + " " + s : s);
  }
  return e;
}
function sM(n, t, e, i = 0, s = n.length) {
  let o = new rM(i, Array.isArray(t) ? t : [t], e);
  o.highlightRange(n.cursor(), i, s, "", o.highlighters), o.flush(s);
}
class rM {
  constructor(t, e, i) {
    this.at = t, this.highlighters = e, this.span = i, this.class = "";
  }
  startSpan(t, e) {
    e != this.class && (this.flush(t), t > this.at && (this.at = t), this.class = e);
  }
  flush(t) {
    t > this.at && this.class && this.span(this.at, t, this.class);
  }
  highlightRange(t, e, i, s, o) {
    let { type: u, from: c, to: h } = t;
    if (c >= i || h <= e)
      return;
    u.isTop && (o = this.highlighters.filter((S) => !S.scope || S.scope(u)));
    let p = s, m = oM(t) || mc.empty, O = lM(o, m.tags);
    if (O && (p && (p += " "), p += O, m.mode == 1 && (s += (s ? " " : "") + O)), this.startSpan(Math.max(e, c), p), m.opaque)
      return;
    let y = t.tree && t.tree.prop(wt.mounted);
    if (y && y.overlay) {
      let S = t.node.enter(y.overlay[0].from + c, 1), x = this.highlighters.filter((C) => !C.scope || C.scope(y.tree.type)), w = t.firstChild();
      for (let C = 0, M = c; ; C++) {
        let U = C < y.overlay.length ? y.overlay[C] : null, W = U ? U.from + c : h, Z = Math.max(e, M), N = Math.min(i, W);
        if (Z < N && w)
          for (; t.from < N && (this.highlightRange(t, Z, N, s, o), this.startSpan(Math.min(N, t.to), p), !(t.to >= W || !t.nextSibling())); )
            ;
        if (!U || W > i)
          break;
        M = U.to + c, M > e && (this.highlightRange(S.cursor(), Math.max(e, U.from + c), Math.min(i, M), "", x), this.startSpan(Math.min(i, M), p));
      }
      w && t.parent();
    } else if (t.firstChild()) {
      y && (s = "");
      do
        if (!(t.to <= e)) {
          if (t.from >= i)
            break;
          this.highlightRange(t, e, i, s, o), this.startSpan(Math.min(i, t.to), p);
        }
      while (t.nextSibling());
      t.parent();
    }
  }
}
function oM(n) {
  let t = n.type.prop(jb);
  for (; t && t.context && !n.matchContext(t.context); )
    t = t.next;
  return t || null;
}
const et = gi.define, Ru = et(), Jn = et(), lv = et(Jn), sv = et(Jn), In = et(), Du = et(In), Dd = et(In), Li = et(), Rl = et(Li), Ni = et(), Pi = et(), Vp = et(), uo = et(Vp), zu = et(), z = {
  /**
  A comment.
  */
  comment: Ru,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: et(Ru),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: et(Ru),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: et(Ru),
  /**
  Any kind of identifier.
  */
  name: Jn,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: et(Jn),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName: lv,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: et(lv),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName: sv,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: et(sv),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: et(Jn),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: et(Jn),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: et(Jn),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: et(Jn),
  /**
  A literal value.
  */
  literal: In,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string: Du,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: et(Du),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: et(Du),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: et(Du),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number: Dd,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: et(Dd),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: et(Dd),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: et(In),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: et(In),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: et(In),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: et(In),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: et(In),
  /**
  A language keyword.
  */
  keyword: Ni,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: et(Ni),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: et(Ni),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: et(Ni),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: et(Ni),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: et(Ni),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: et(Ni),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: et(Ni),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: et(Ni),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: et(Ni),
  /**
  An operator.
  */
  operator: Pi,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: et(Pi),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: et(Pi),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: et(Pi),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: et(Pi),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: et(Pi),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: et(Pi),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: et(Pi),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: et(Pi),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: et(Pi),
  /**
  Program or markup punctuation.
  */
  punctuation: Vp,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: et(Vp),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket: uo,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: et(uo),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: et(uo),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: et(uo),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: et(uo),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: Li,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading: Rl,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: et(Rl),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: et(Rl),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: et(Rl),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: et(Rl),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: et(Rl),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: et(Rl),
  /**
  A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
  */
  contentSeparator: et(Li),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: et(Li),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: et(Li),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: et(Li),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: et(Li),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: et(Li),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: et(Li),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: et(Li),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: et(),
  /**
  Deleted text.
  */
  deleted: et(),
  /**
  Changed text.
  */
  changed: et(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: et(),
  /**
  Metadata or meta-instruction.
  */
  meta: zu,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: et(zu),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: et(zu),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: et(zu),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: gi.defineModifier("definition"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: gi.defineModifier("constant"),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: gi.defineModifier("function"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: gi.defineModifier("standard"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: gi.defineModifier("local"),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: gi.defineModifier("special")
};
for (let n in z) {
  let t = z[n];
  t instanceof gi && (t.name = n);
}
Wb([
  { tag: z.link, class: "tok-link" },
  { tag: z.heading, class: "tok-heading" },
  { tag: z.emphasis, class: "tok-emphasis" },
  { tag: z.strong, class: "tok-strong" },
  { tag: z.keyword, class: "tok-keyword" },
  { tag: z.atom, class: "tok-atom" },
  { tag: z.bool, class: "tok-bool" },
  { tag: z.url, class: "tok-url" },
  { tag: z.labelName, class: "tok-labelName" },
  { tag: z.inserted, class: "tok-inserted" },
  { tag: z.deleted, class: "tok-deleted" },
  { tag: z.literal, class: "tok-literal" },
  { tag: z.string, class: "tok-string" },
  { tag: z.number, class: "tok-number" },
  { tag: [z.regexp, z.escape, z.special(z.string)], class: "tok-string2" },
  { tag: z.variableName, class: "tok-variableName" },
  { tag: z.local(z.variableName), class: "tok-variableName tok-local" },
  { tag: z.definition(z.variableName), class: "tok-variableName tok-definition" },
  { tag: z.special(z.variableName), class: "tok-variableName2" },
  { tag: z.definition(z.propertyName), class: "tok-propertyName tok-definition" },
  { tag: z.typeName, class: "tok-typeName" },
  { tag: z.namespace, class: "tok-namespace" },
  { tag: z.className, class: "tok-className" },
  { tag: z.macroName, class: "tok-macroName" },
  { tag: z.propertyName, class: "tok-propertyName" },
  { tag: z.operator, class: "tok-operator" },
  { tag: z.comment, class: "tok-comment" },
  { tag: z.meta, class: "tok-meta" },
  { tag: z.invalid, class: "tok-invalid" },
  { tag: z.punctuation, class: "tok-punctuation" }
]);
var zd;
const Ls = /* @__PURE__ */ new wt();
function aM(n) {
  return lt.define({
    combine: n ? (t) => t.concat(n) : void 0
  });
}
const uM = /* @__PURE__ */ new wt();
class Ai {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(t, e, i = [], s = "") {
    this.data = t, this.name = s, At.prototype.hasOwnProperty("tree") || Object.defineProperty(At.prototype, "tree", { get() {
      return ge(this);
    } }), this.parser = e, this.extension = [
      ul.of(this),
      At.languageData.of((o, u, c) => {
        let h = rv(o, u, c), p = h.type.prop(Ls);
        if (!p)
          return [];
        let m = o.facet(p), O = h.type.prop(uM);
        if (O) {
          let y = h.resolve(u - h.from, c);
          for (let S of O)
            if (S.test(y, o)) {
              let x = o.facet(S.facet);
              return S.type == "replace" ? x : x.concat(m);
            }
        }
        return m;
      })
    ].concat(i);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(t, e, i = -1) {
    return rv(t, e, i).type.prop(Ls) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(t) {
    let e = t.facet(ul);
    if ((e == null ? void 0 : e.data) == this.data)
      return [{ from: 0, to: t.doc.length }];
    if (!e || !e.allowsNesting)
      return [];
    let i = [], s = (o, u) => {
      if (o.prop(Ls) == this.data) {
        i.push({ from: u, to: u + o.length });
        return;
      }
      let c = o.prop(wt.mounted);
      if (c) {
        if (c.tree.prop(Ls) == this.data) {
          if (c.overlay)
            for (let h of c.overlay)
              i.push({ from: h.from + u, to: h.to + u });
          else
            i.push({ from: u, to: u + o.length });
          return;
        } else if (c.overlay) {
          let h = i.length;
          if (s(c.tree, c.overlay[0].from + u), i.length > h)
            return;
        }
      }
      for (let h = 0; h < o.children.length; h++) {
        let p = o.children[h];
        p instanceof re && s(p, o.positions[h] + u);
      }
    };
    return s(ge(t), 0), i;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0;
  }
}
Ai.setState = /* @__PURE__ */ yt.define();
function rv(n, t, e) {
  let i = n.facet(ul), s = ge(n).topNode;
  if (!i || i.allowsNesting)
    for (let o = s; o; o = o.enter(t, e, ce.ExcludeBuffers))
      o.type.isTop && (s = o);
  return s;
}
class gc extends Ai {
  constructor(t, e, i) {
    super(t, e, [], i), this.parser = e;
  }
  /**
  Define a language from a parser.
  */
  static define(t) {
    let e = aM(t.languageData);
    return new gc(e, t.parser.configure({
      props: [Ls.add((i) => i.isTop ? e : void 0)]
    }), t.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(t, e) {
    return new gc(this.data, this.parser.configure(t), e || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function ge(n) {
  let t = n.field(Ai.state, !1);
  return t ? t.tree : re.empty;
}
class cM {
  /**
  Create an input object for the given document.
  */
  constructor(t) {
    this.doc = t, this.cursorPos = 0, this.string = "", this.cursor = t.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(t) {
    return this.string = this.cursor.next(t - this.cursorPos).value, this.cursorPos = t + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(t) {
    return this.syncTo(t), this.string;
  }
  get lineChunks() {
    return !0;
  }
  read(t, e) {
    let i = this.cursorPos - this.string.length;
    return t < i || e >= this.cursorPos ? this.doc.sliceString(t, e) : this.string.slice(t - i, e - i);
  }
}
let co = null;
class Oc {
  constructor(t, e, i = [], s, o, u, c, h) {
    this.parser = t, this.state = e, this.fragments = i, this.tree = s, this.treeLen = o, this.viewport = u, this.skipped = c, this.scheduleOn = h, this.parse = null, this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(t, e, i) {
    return new Oc(t, e, [], re.empty, 0, i, [], null);
  }
  startParse() {
    return this.parser.startParse(new cM(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(t, e) {
    return e != null && e >= this.state.doc.length && (e = void 0), this.tree != re.empty && this.isDone(e ?? this.state.doc.length) ? (this.takeTree(), !0) : this.withContext(() => {
      var i;
      if (typeof t == "number") {
        let s = Date.now() + t;
        t = () => Date.now() > s;
      }
      for (this.parse || (this.parse = this.startParse()), e != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > e) && e < this.state.doc.length && this.parse.stopAt(e); ; ) {
        let s = this.parse.advance();
        if (s)
          if (this.fragments = this.withoutTempSkipped(Ll.addTree(s, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i = this.parse.stoppedAt) !== null && i !== void 0 ? i : this.state.doc.length, this.tree = s, this.parse = null, this.treeLen < (e ?? this.state.doc.length))
            this.parse = this.startParse();
          else
            return !0;
        if (t())
          return !1;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let t, e;
    this.parse && (t = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > t) && this.parse.stopAt(t), this.withContext(() => {
      for (; !(e = this.parse.advance()); )
        ;
    }), this.treeLen = t, this.tree = e, this.fragments = this.withoutTempSkipped(Ll.addTree(this.tree, this.fragments, !0)), this.parse = null);
  }
  withContext(t) {
    let e = co;
    co = this;
    try {
      return t();
    } finally {
      co = e;
    }
  }
  withoutTempSkipped(t) {
    for (let e; e = this.tempSkipped.pop(); )
      t = ov(t, e.from, e.to);
    return t;
  }
  /**
  @internal
  */
  changes(t, e) {
    let { fragments: i, tree: s, treeLen: o, viewport: u, skipped: c } = this;
    if (this.takeTree(), !t.empty) {
      let h = [];
      if (t.iterChangedRanges((p, m, O, y) => h.push({ fromA: p, toA: m, fromB: O, toB: y })), i = Ll.applyChanges(i, h), s = re.empty, o = 0, u = { from: t.mapPos(u.from, -1), to: t.mapPos(u.to, 1) }, this.skipped.length) {
        c = [];
        for (let p of this.skipped) {
          let m = t.mapPos(p.from, 1), O = t.mapPos(p.to, -1);
          m < O && c.push({ from: m, to: O });
        }
      }
    }
    return new Oc(this.parser, e, i, s, o, u, c, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(t) {
    if (this.viewport.from == t.from && this.viewport.to == t.to)
      return !1;
    this.viewport = t;
    let e = this.skipped.length;
    for (let i = 0; i < this.skipped.length; i++) {
      let { from: s, to: o } = this.skipped[i];
      s < t.to && o > t.from && (this.fragments = ov(this.fragments, s, o), this.skipped.splice(i--, 1));
    }
    return this.skipped.length >= e ? !1 : (this.reset(), !0);
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(t, e) {
    this.skipped.push({ from: t, to: e });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(t) {
    return new class extends Xb {
      createParse(e, i, s) {
        let o = s[0].from, u = s[s.length - 1].to;
        return {
          parsedPos: o,
          advance() {
            let h = co;
            if (h) {
              for (let p of s)
                h.tempSkipped.push(p);
              t && (h.scheduleOn = h.scheduleOn ? Promise.all([h.scheduleOn, t]) : t);
            }
            return this.parsedPos = u, new re(We.none, [], [], u - o);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  /**
  @internal
  */
  isDone(t) {
    t = Math.min(t, this.state.doc.length);
    let e = this.fragments;
    return this.treeLen >= t && e.length && e[0].from == 0 && e[0].to >= t;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return co;
  }
}
function ov(n, t, e) {
  return Ll.applyChanges(n, [{ fromA: t, toA: e, fromB: t, toB: e }]);
}
class Js {
  constructor(t) {
    this.context = t, this.tree = t.tree;
  }
  apply(t) {
    if (!t.docChanged && this.tree == this.context.tree)
      return this;
    let e = this.context.changes(t.changes, t.state), i = this.context.treeLen == t.startState.doc.length ? void 0 : Math.max(t.changes.mapPos(this.context.treeLen), e.viewport.to);
    return e.work(20, i) || e.takeTree(), new Js(e);
  }
  static init(t) {
    let e = Math.min(3e3, t.doc.length), i = Oc.create(t.facet(ul).parser, t, { from: 0, to: e });
    return i.work(20, e) || i.takeTree(), new Js(i);
  }
}
Ai.state = /* @__PURE__ */ Oe.define({
  create: Js.init,
  update(n, t) {
    for (let e of t.effects)
      if (e.is(Ai.setState))
        return e.value;
    return t.startState.facet(ul) != t.state.facet(ul) ? Js.init(t.state) : n.apply(t);
  }
});
let Gb = (n) => {
  let t = setTimeout(
    () => n(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(t);
};
typeof requestIdleCallback < "u" && (Gb = (n) => {
  let t = -1, e = setTimeout(
    () => {
      t = requestIdleCallback(n, {
        timeout: 400
        /* Work.MinPause */
      });
    },
    100
    /* Work.MinPause */
  );
  return () => t < 0 ? clearTimeout(e) : cancelIdleCallback(t);
});
const qd = typeof navigator < "u" && (!((zd = navigator.scheduling) === null || zd === void 0) && zd.isInputPending) ? () => navigator.scheduling.isInputPending() : null, fM = /* @__PURE__ */ ee.fromClass(class {
  constructor(t) {
    this.view = t, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(t) {
    let e = this.view.state.field(Ai.state).context;
    (e.updateViewport(t.view.viewport) || this.view.viewport.to > e.treeLen) && this.scheduleWork(), (t.docChanged || t.selectionSet) && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(e);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: t } = this.view, e = t.field(Ai.state);
    (e.tree != e.context.tree || !e.context.isDone(t.doc.length)) && (this.working = Gb(this.work));
  }
  work(t) {
    this.working = null;
    let e = Date.now();
    if (this.chunkEnd < e && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = e + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i, viewport: { to: s } } = this.view, o = i.field(Ai.state);
    if (o.tree == o.context.tree && o.context.isDone(
      s + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let u = Date.now() + Math.min(this.chunkBudget, 100, t && !qd ? Math.max(25, t.timeRemaining() - 5) : 1e9), c = o.context.treeLen < s && i.doc.length > s + 1e3, h = o.context.work(() => qd && qd() || Date.now() > u, s + (c ? 0 : 1e5));
    this.chunkBudget -= Date.now() - e, (h || this.chunkBudget <= 0) && (o.context.takeTree(), this.view.dispatch({ effects: Ai.setState.of(new Js(o.context)) })), this.chunkBudget > 0 && !(h && !c) && this.scheduleWork(), this.checkAsyncSchedule(o.context);
  }
  checkAsyncSchedule(t) {
    t.scheduleOn && (this.workScheduled++, t.scheduleOn.then(() => this.scheduleWork()).catch((e) => Xe(this.view.state, e)).then(() => this.workScheduled--), t.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), ul = /* @__PURE__ */ lt.define({
  combine(n) {
    return n.length ? n[0] : null;
  },
  enables: (n) => [
    Ai.state,
    fM,
    it.contentAttributes.compute([n], (t) => {
      let e = t.facet(n);
      return e && e.name ? { "data-language": e.name } : {};
    })
  ]
});
class hM {
  /**
  Create a language support object.
  */
  constructor(t, e = []) {
    this.language = t, this.support = e, this.extension = [t, e];
  }
}
const dM = /* @__PURE__ */ lt.define(), Yo = /* @__PURE__ */ lt.define({
  combine: (n) => {
    if (!n.length)
      return "  ";
    let t = n[0];
    if (!t || /\S/.test(t) || Array.from(t).some((e) => e != t[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(n[0]));
    return t;
  }
});
function yc(n) {
  let t = n.facet(Yo);
  return t.charCodeAt(0) == 9 ? n.tabSize * t.length : t.length;
}
function Bo(n, t) {
  let e = "", i = n.tabSize, s = n.facet(Yo)[0];
  if (s == "	") {
    for (; t >= i; )
      e += "	", t -= i;
    s = " ";
  }
  for (let o = 0; o < t; o++)
    e += s;
  return e;
}
function wm(n, t) {
  n instanceof At && (n = new Nc(n));
  for (let i of n.state.facet(dM)) {
    let s = i(n, t);
    if (s !== void 0)
      return s;
  }
  let e = ge(n.state);
  return e.length >= t ? pM(n, e, t) : null;
}
class Nc {
  /**
  Create an indent context.
  */
  constructor(t, e = {}) {
    this.state = t, this.options = e, this.unit = yc(t);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(t, e = 1) {
    let i = this.state.doc.lineAt(t), { simulateBreak: s, simulateDoubleBreak: o } = this.options;
    return s != null && s >= i.from && s <= i.to ? o && s == t ? { text: "", from: t } : (e < 0 ? s < t : s <= t) ? { text: i.text.slice(s - i.from), from: s } : { text: i.text.slice(0, s - i.from), from: i.from } : i;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(t, e = 1) {
    if (this.options.simulateDoubleBreak && t == this.options.simulateBreak)
      return "";
    let { text: i, from: s } = this.lineAt(t, e);
    return i.slice(t - s, Math.min(i.length, t + 100 - s));
  }
  /**
  Find the column for the given position.
  */
  column(t, e = 1) {
    let { text: i, from: s } = this.lineAt(t, e), o = this.countColumn(i, t - s), u = this.options.overrideIndentation ? this.options.overrideIndentation(s) : -1;
    return u > -1 && (o += u - this.countColumn(i, i.search(/\S|$/))), o;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(t, e = t.length) {
    return er(t, this.state.tabSize, e);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(t, e = 1) {
    let { text: i, from: s } = this.lineAt(t, e), o = this.options.overrideIndentation;
    if (o) {
      let u = o(s);
      if (u > -1)
        return u;
    }
    return this.countColumn(i, i.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const Yb = /* @__PURE__ */ new wt();
function pM(n, t, e) {
  let i = t.resolveStack(e), s = t.resolveInner(e, -1).resolve(e, 0).enterUnfinishedNodesBefore(e);
  if (s != i.node) {
    let o = [];
    for (let u = s; u && !(u.from == i.node.from && u.type == i.node.type); u = u.parent)
      o.push(u);
    for (let u = o.length - 1; u >= 0; u--)
      i = { node: o[u], next: i };
  }
  return Zb(i, n, e);
}
function Zb(n, t, e) {
  for (let i = n; i; i = i.next) {
    let s = gM(i.node);
    if (s)
      return s(Tm.create(t, e, i));
  }
  return 0;
}
function mM(n) {
  return n.pos == n.options.simulateBreak && n.options.simulateDoubleBreak;
}
function gM(n) {
  let t = n.type.prop(Yb);
  if (t)
    return t;
  let e = n.firstChild, i;
  if (e && (i = e.type.prop(wt.closedBy))) {
    let s = n.lastChild, o = s && i.indexOf(s.name) > -1;
    return (u) => Fb(u, !0, 1, void 0, o && !mM(u) ? s.from : void 0);
  }
  return n.parent == null ? OM : null;
}
function OM() {
  return 0;
}
class Tm extends Nc {
  constructor(t, e, i) {
    super(t.state, t.options), this.base = t, this.pos = e, this.context = i;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(t, e, i) {
    return new Tm(t, e, i);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(t) {
    let e = this.state.doc.lineAt(t.from);
    for (; ; ) {
      let i = t.resolve(e.from);
      for (; i.parent && i.parent.from == i.from; )
        i = i.parent;
      if (yM(i, t))
        break;
      e = this.state.doc.lineAt(i.from);
    }
    return this.lineIndent(e.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return Zb(this.context.next, this.base, this.pos);
  }
}
function yM(n, t) {
  for (let e = t; e; e = e.parent)
    if (n == e)
      return !0;
  return !1;
}
function vM(n) {
  let t = n.node, e = t.childAfter(t.from), i = t.lastChild;
  if (!e)
    return null;
  let s = n.options.simulateBreak, o = n.state.doc.lineAt(e.from), u = s == null || s <= o.from ? o.to : Math.min(o.to, s);
  for (let c = e.to; ; ) {
    let h = t.childAfter(c);
    if (!h || h == i)
      return null;
    if (!h.type.isSkipped) {
      if (h.from >= u)
        return null;
      let p = /^ */.exec(o.text.slice(e.to - o.from))[0].length;
      return { from: e.from, to: e.to + p };
    }
    c = h.to;
  }
}
function _d({ closing: n, align: t = !0, units: e = 1 }) {
  return (i) => Fb(i, t, e, n);
}
function Fb(n, t, e, i, s) {
  let o = n.textAfter, u = o.match(/^\s*/)[0].length, c = i && o.slice(u, u + i.length) == i || s == n.pos + u, h = t ? vM(n) : null;
  return h ? c ? n.column(h.from) : n.column(h.to) : n.baseIndent + (c ? 0 : n.unit * e);
}
const SM = 200;
function bM() {
  return At.transactionFilter.of((n) => {
    if (!n.docChanged || !n.isUserEvent("input.type") && !n.isUserEvent("input.complete"))
      return n;
    let t = n.startState.languageDataAt("indentOnInput", n.startState.selection.main.head);
    if (!t.length)
      return n;
    let e = n.newDoc, { head: i } = n.newSelection.main, s = e.lineAt(i);
    if (i > s.from + SM)
      return n;
    let o = e.sliceString(s.from, i);
    if (!t.some((p) => p.test(o)))
      return n;
    let { state: u } = n, c = -1, h = [];
    for (let { head: p } of u.selection.ranges) {
      let m = u.doc.lineAt(p);
      if (m.from == c)
        continue;
      c = m.from;
      let O = wm(u, m.from);
      if (O == null)
        continue;
      let y = /^\s*/.exec(m.text)[0], S = Bo(u, O);
      y != S && h.push({ from: m.from, to: m.from + y.length, insert: S });
    }
    return h.length ? [n, { changes: h, sequential: !0 }] : n;
  });
}
const xM = /* @__PURE__ */ lt.define(), Kb = /* @__PURE__ */ new wt();
function wM(n) {
  let t = n.firstChild, e = n.lastChild;
  return t && t.to < e.from ? { from: t.to, to: e.type.isError ? n.to : e.from } : null;
}
function TM(n, t, e) {
  let i = ge(n);
  if (i.length < e)
    return null;
  let s = i.resolveStack(e, 1), o = null;
  for (let u = s; u; u = u.next) {
    let c = u.node;
    if (c.to <= e || c.from > e)
      continue;
    if (o && c.from < t)
      break;
    let h = c.type.prop(Kb);
    if (h && (c.to < i.length - 50 || i.length == n.doc.length || !kM(c))) {
      let p = h(c, n);
      p && p.from <= e && p.from >= t && p.to > e && (o = p);
    }
  }
  return o;
}
function kM(n) {
  let t = n.lastChild;
  return t && t.to == n.to && t.type.isError;
}
function vc(n, t, e) {
  for (let i of n.facet(xM)) {
    let s = i(n, t, e);
    if (s)
      return s;
  }
  return TM(n, t, e);
}
function Jb(n, t) {
  let e = t.mapPos(n.from, 1), i = t.mapPos(n.to, -1);
  return e >= i ? void 0 : { from: e, to: i };
}
const Pc = /* @__PURE__ */ yt.define({ map: Jb }), Zo = /* @__PURE__ */ yt.define({ map: Jb });
function Ib(n) {
  let t = [];
  for (let { head: e } of n.state.selection.ranges)
    t.some((i) => i.from <= e && i.to >= e) || t.push(n.lineBlockAt(e));
  return t;
}
const jl = /* @__PURE__ */ Oe.define({
  create() {
    return ft.none;
  },
  update(n, t) {
    n = n.map(t.changes);
    for (let e of t.effects)
      if (e.is(Pc) && !AM(n, e.value.from, e.value.to)) {
        let { preparePlaceholder: i } = t.state.facet(ix), s = i ? ft.replace({ widget: new zM(i(t.state, e.value)) }) : av;
        n = n.update({ add: [s.range(e.value.from, e.value.to)] });
      } else e.is(Zo) && (n = n.update({
        filter: (i, s) => e.value.from != i || e.value.to != s,
        filterFrom: e.value.from,
        filterTo: e.value.to
      }));
    if (t.selection) {
      let e = !1, { head: i } = t.selection.main;
      n.between(i, i, (s, o) => {
        s < i && o > i && (e = !0);
      }), e && (n = n.update({
        filterFrom: i,
        filterTo: i,
        filter: (s, o) => o <= i || s >= i
      }));
    }
    return n;
  },
  provide: (n) => it.decorations.from(n),
  toJSON(n, t) {
    let e = [];
    return n.between(0, t.doc.length, (i, s) => {
      e.push(i, s);
    }), e;
  },
  fromJSON(n) {
    if (!Array.isArray(n) || n.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let t = [];
    for (let e = 0; e < n.length; ) {
      let i = n[e++], s = n[e++];
      if (typeof i != "number" || typeof s != "number")
        throw new RangeError("Invalid JSON for fold state");
      t.push(av.range(i, s));
    }
    return ft.set(t, !0);
  }
});
function Sc(n, t, e) {
  var i;
  let s = null;
  return (i = n.field(jl, !1)) === null || i === void 0 || i.between(t, e, (o, u) => {
    (!s || s.from > o) && (s = { from: o, to: u });
  }), s;
}
function AM(n, t, e) {
  let i = !1;
  return n.between(t, t, (s, o) => {
    s == t && o == e && (i = !0);
  }), i;
}
function tx(n, t) {
  return n.field(jl, !1) ? t : t.concat(yt.appendConfig.of(nx()));
}
const CM = (n) => {
  for (let t of Ib(n)) {
    let e = vc(n.state, t.from, t.to);
    if (e)
      return n.dispatch({ effects: tx(n.state, [Pc.of(e), ex(n, e)]) }), !0;
  }
  return !1;
}, EM = (n) => {
  if (!n.state.field(jl, !1))
    return !1;
  let t = [];
  for (let e of Ib(n)) {
    let i = Sc(n.state, e.from, e.to);
    i && t.push(Zo.of(i), ex(n, i, !1));
  }
  return t.length && n.dispatch({ effects: t }), t.length > 0;
};
function ex(n, t, e = !0) {
  let i = n.state.doc.lineAt(t.from).number, s = n.state.doc.lineAt(t.to).number;
  return it.announce.of(`${n.state.phrase(e ? "Folded lines" : "Unfolded lines")} ${i} ${n.state.phrase("to")} ${s}.`);
}
const MM = (n) => {
  let { state: t } = n, e = [];
  for (let i = 0; i < t.doc.length; ) {
    let s = n.lineBlockAt(i), o = vc(t, s.from, s.to);
    o && e.push(Pc.of(o)), i = (o ? n.lineBlockAt(o.to) : s).to + 1;
  }
  return e.length && n.dispatch({ effects: tx(n.state, e) }), !!e.length;
}, QM = (n) => {
  let t = n.state.field(jl, !1);
  if (!t || !t.size)
    return !1;
  let e = [];
  return t.between(0, n.state.doc.length, (i, s) => {
    e.push(Zo.of({ from: i, to: s }));
  }), n.dispatch({ effects: e }), !0;
}, RM = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: CM },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: EM },
  { key: "Ctrl-Alt-[", run: MM },
  { key: "Ctrl-Alt-]", run: QM }
], DM = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
}, ix = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, DM);
  }
});
function nx(n) {
  return [jl, BM];
}
function lx(n, t) {
  let { state: e } = n, i = e.facet(ix), s = (u) => {
    let c = n.lineBlockAt(n.posAtDOM(u.target)), h = Sc(n.state, c.from, c.to);
    h && n.dispatch({ effects: Zo.of(h) }), u.preventDefault();
  };
  if (i.placeholderDOM)
    return i.placeholderDOM(n, s, t);
  let o = document.createElement("span");
  return o.textContent = i.placeholderText, o.setAttribute("aria-label", e.phrase("folded code")), o.title = e.phrase("unfold"), o.className = "cm-foldPlaceholder", o.onclick = s, o;
}
const av = /* @__PURE__ */ ft.replace({ widget: /* @__PURE__ */ new class extends Ki {
  toDOM(n) {
    return lx(n, null);
  }
}() });
class zM extends Ki {
  constructor(t) {
    super(), this.value = t;
  }
  eq(t) {
    return this.value == t.value;
  }
  toDOM(t) {
    return lx(t, this.value);
  }
}
const qM = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
};
class Bd extends An {
  constructor(t, e) {
    super(), this.config = t, this.open = e;
  }
  eq(t) {
    return this.config == t.config && this.open == t.open;
  }
  toDOM(t) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let e = document.createElement("span");
    return e.textContent = this.open ? this.config.openText : this.config.closedText, e.title = t.state.phrase(this.open ? "Fold line" : "Unfold line"), e;
  }
}
function _M(n = {}) {
  let t = Object.assign(Object.assign({}, qM), n), e = new Bd(t, !0), i = new Bd(t, !1), s = ee.fromClass(class {
    constructor(u) {
      this.from = u.viewport.from, this.markers = this.buildMarkers(u);
    }
    update(u) {
      (u.docChanged || u.viewportChanged || u.startState.facet(ul) != u.state.facet(ul) || u.startState.field(jl, !1) != u.state.field(jl, !1) || ge(u.startState) != ge(u.state) || t.foldingChanged(u)) && (this.markers = this.buildMarkers(u.view));
    }
    buildMarkers(u) {
      let c = new Tn();
      for (let h of u.viewportLineBlocks) {
        let p = Sc(u.state, h.from, h.to) ? i : vc(u.state, h.from, h.to) ? e : null;
        p && c.add(h.from, h.from, p);
      }
      return c.finish();
    }
  }), { domEventHandlers: o } = t;
  return [
    s,
    _E({
      class: "cm-foldGutter",
      markers(u) {
        var c;
        return ((c = u.plugin(s)) === null || c === void 0 ? void 0 : c.markers) || Rt.empty;
      },
      initialSpacer() {
        return new Bd(t, !1);
      },
      domEventHandlers: Object.assign(Object.assign({}, o), { click: (u, c, h) => {
        if (o.click && o.click(u, c, h))
          return !0;
        let p = Sc(u.state, c.from, c.to);
        if (p)
          return u.dispatch({ effects: Zo.of(p) }), !0;
        let m = vc(u.state, c.from, c.to);
        return m ? (u.dispatch({ effects: Pc.of(m) }), !0) : !1;
      } })
    }),
    nx()
  ];
}
const BM = /* @__PURE__ */ it.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class Fo {
  constructor(t, e) {
    this.specs = t;
    let i;
    function s(c) {
      let h = sl.newName();
      return (i || (i = /* @__PURE__ */ Object.create(null)))["." + h] = c, h;
    }
    const o = typeof e.all == "string" ? e.all : e.all ? s(e.all) : void 0, u = e.scope;
    this.scope = u instanceof Ai ? (c) => c.prop(Ls) == u.data : u ? (c) => c == u : void 0, this.style = Wb(t.map((c) => ({
      tag: c.tag,
      class: c.class || s(Object.assign({}, c, { tag: null }))
    })), {
      all: o
    }).style, this.module = i ? new sl(i) : null, this.themeType = e.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(t, e) {
    return new Fo(t, e || {});
  }
}
const Hp = /* @__PURE__ */ lt.define(), sx = /* @__PURE__ */ lt.define({
  combine(n) {
    return n.length ? [n[0]] : null;
  }
});
function Nd(n) {
  let t = n.facet(Hp);
  return t.length ? t : n.facet(sx);
}
function rx(n, t) {
  let e = [PM], i;
  return n instanceof Fo && (n.module && e.push(it.styleModule.of(n.module)), i = n.themeType), t != null && t.fallback ? e.push(sx.of(n)) : i ? e.push(Hp.computeN([it.darkTheme], (s) => s.facet(it.darkTheme) == (i == "dark") ? [n] : [])) : e.push(Hp.of(n)), e;
}
class NM {
  constructor(t) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = ge(t.state), this.decorations = this.buildDeco(t, Nd(t.state)), this.decoratedTo = t.viewport.to;
  }
  update(t) {
    let e = ge(t.state), i = Nd(t.state), s = i != Nd(t.startState), { viewport: o } = t.view, u = t.changes.mapPos(this.decoratedTo, 1);
    e.length < o.to && !s && e.type == this.tree.type && u >= o.to ? (this.decorations = this.decorations.map(t.changes), this.decoratedTo = u) : (e != this.tree || t.viewportChanged || s) && (this.tree = e, this.decorations = this.buildDeco(t.view, i), this.decoratedTo = o.to);
  }
  buildDeco(t, e) {
    if (!e || !this.tree.length)
      return ft.none;
    let i = new Tn();
    for (let { from: s, to: o } of t.visibleRanges)
      sM(this.tree, e, (u, c, h) => {
        i.add(u, c, this.markCache[h] || (this.markCache[h] = ft.mark({ class: h })));
      }, s, o);
    return i.finish();
  }
}
const PM = /* @__PURE__ */ fl.high(/* @__PURE__ */ ee.fromClass(NM, {
  decorations: (n) => n.decorations
})), LM = /* @__PURE__ */ Fo.define([
  {
    tag: z.meta,
    color: "#404740"
  },
  {
    tag: z.link,
    textDecoration: "underline"
  },
  {
    tag: z.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: z.emphasis,
    fontStyle: "italic"
  },
  {
    tag: z.strong,
    fontWeight: "bold"
  },
  {
    tag: z.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: z.keyword,
    color: "#708"
  },
  {
    tag: [z.atom, z.bool, z.url, z.contentSeparator, z.labelName],
    color: "#219"
  },
  {
    tag: [z.literal, z.inserted],
    color: "#164"
  },
  {
    tag: [z.string, z.deleted],
    color: "#a11"
  },
  {
    tag: [z.regexp, z.escape, /* @__PURE__ */ z.special(z.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ z.definition(z.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ z.local(z.variableName),
    color: "#30a"
  },
  {
    tag: [z.typeName, z.namespace],
    color: "#085"
  },
  {
    tag: z.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ z.special(z.variableName), z.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ z.definition(z.propertyName),
    color: "#00c"
  },
  {
    tag: z.comment,
    color: "#940"
  },
  {
    tag: z.invalid,
    color: "#f00"
  }
]), UM = /* @__PURE__ */ it.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), ox = 1e4, ax = "()[]{}", ux = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, {
      afterCursor: !0,
      brackets: ax,
      maxScanDistance: ox,
      renderMatch: XM
    });
  }
}), VM = /* @__PURE__ */ ft.mark({ class: "cm-matchingBracket" }), HM = /* @__PURE__ */ ft.mark({ class: "cm-nonmatchingBracket" });
function XM(n) {
  let t = [], e = n.matched ? VM : HM;
  return t.push(e.range(n.start.from, n.start.to)), n.end && t.push(e.range(n.end.from, n.end.to)), t;
}
const $M = /* @__PURE__ */ Oe.define({
  create() {
    return ft.none;
  },
  update(n, t) {
    if (!t.docChanged && !t.selection)
      return n;
    let e = [], i = t.state.facet(ux);
    for (let s of t.state.selection.ranges) {
      if (!s.empty)
        continue;
      let o = ji(t.state, s.head, -1, i) || s.head > 0 && ji(t.state, s.head - 1, 1, i) || i.afterCursor && (ji(t.state, s.head, 1, i) || s.head < t.state.doc.length && ji(t.state, s.head + 1, -1, i));
      o && (e = e.concat(i.renderMatch(o, t.state)));
    }
    return ft.set(e, !0);
  },
  provide: (n) => it.decorations.from(n)
}), jM = [
  $M,
  UM
];
function WM(n = {}) {
  return [ux.of(n), jM];
}
const GM = /* @__PURE__ */ new wt();
function Xp(n, t, e) {
  let i = n.prop(t < 0 ? wt.openedBy : wt.closedBy);
  if (i)
    return i;
  if (n.name.length == 1) {
    let s = e.indexOf(n.name);
    if (s > -1 && s % 2 == (t < 0 ? 1 : 0))
      return [e[s + t]];
  }
  return null;
}
function $p(n) {
  let t = n.type.prop(GM);
  return t ? t(n.node) : n;
}
function ji(n, t, e, i = {}) {
  let s = i.maxScanDistance || ox, o = i.brackets || ax, u = ge(n), c = u.resolveInner(t, e);
  for (let h = c; h; h = h.parent) {
    let p = Xp(h.type, e, o);
    if (p && h.from < h.to) {
      let m = $p(h);
      if (m && (e > 0 ? t >= m.from && t < m.to : t > m.from && t <= m.to))
        return YM(n, t, e, h, m, p, o);
    }
  }
  return ZM(n, t, e, u, c.type, s, o);
}
function YM(n, t, e, i, s, o, u) {
  let c = i.parent, h = { from: s.from, to: s.to }, p = 0, m = c == null ? void 0 : c.cursor();
  if (m && (e < 0 ? m.childBefore(i.from) : m.childAfter(i.to)))
    do
      if (e < 0 ? m.to <= i.from : m.from >= i.to) {
        if (p == 0 && o.indexOf(m.type.name) > -1 && m.from < m.to) {
          let O = $p(m);
          return { start: h, end: O ? { from: O.from, to: O.to } : void 0, matched: !0 };
        } else if (Xp(m.type, e, u))
          p++;
        else if (Xp(m.type, -e, u)) {
          if (p == 0) {
            let O = $p(m);
            return {
              start: h,
              end: O && O.from < O.to ? { from: O.from, to: O.to } : void 0,
              matched: !1
            };
          }
          p--;
        }
      }
    while (e < 0 ? m.prevSibling() : m.nextSibling());
  return { start: h, matched: !1 };
}
function ZM(n, t, e, i, s, o, u) {
  let c = e < 0 ? n.sliceDoc(t - 1, t) : n.sliceDoc(t, t + 1), h = u.indexOf(c);
  if (h < 0 || h % 2 == 0 != e > 0)
    return null;
  let p = { from: e < 0 ? t - 1 : t, to: e > 0 ? t + 1 : t }, m = n.doc.iterRange(t, e > 0 ? n.doc.length : 0), O = 0;
  for (let y = 0; !m.next().done && y <= o; ) {
    let S = m.value;
    e < 0 && (y += S.length);
    let x = t + y * e;
    for (let w = e > 0 ? 0 : S.length - 1, C = e > 0 ? S.length : -1; w != C; w += e) {
      let M = u.indexOf(S[w]);
      if (!(M < 0 || i.resolveInner(x + w, 1).type != s))
        if (M % 2 == 0 == e > 0)
          O++;
        else {
          if (O == 1)
            return { start: p, end: { from: x + w, to: x + w + 1 }, matched: M >> 1 == h >> 1 };
          O--;
        }
    }
    e > 0 && (y += S.length);
  }
  return m.done ? { start: p, matched: !1 } : null;
}
const FM = /* @__PURE__ */ Object.create(null), uv = [We.none], cv = [], fv = /* @__PURE__ */ Object.create(null), KM = /* @__PURE__ */ Object.create(null);
for (let [n, t] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  KM[n] = /* @__PURE__ */ JM(FM, t);
function Pd(n, t) {
  cv.indexOf(n) > -1 || (cv.push(n), console.warn(t));
}
function JM(n, t) {
  let e = [];
  for (let c of t.split(" ")) {
    let h = [];
    for (let p of c.split(".")) {
      let m = n[p] || z[p];
      m ? typeof m == "function" ? h.length ? h = h.map(m) : Pd(p, `Modifier ${p} used at start of tag`) : h.length ? Pd(p, `Tag ${p} used as modifier`) : h = Array.isArray(m) ? m : [m] : Pd(p, `Unknown highlighting tag ${p}`);
    }
    for (let p of h)
      e.push(p);
  }
  if (!e.length)
    return 0;
  let i = t.replace(/ /g, "_"), s = i + " " + e.map((c) => c.id), o = fv[s];
  if (o)
    return o.id;
  let u = fv[s] = We.define({
    id: uv.length,
    name: i,
    props: [$b({ [i]: e })]
  });
  return uv.push(u), u.id;
}
jt.RTL, jt.LTR;
const IM = (n) => {
  let { state: t } = n, e = t.doc.lineAt(t.selection.main.from), i = Am(n.state, e.from);
  return i.line ? tQ(n) : i.block ? iQ(n) : !1;
};
function km(n, t) {
  return ({ state: e, dispatch: i }) => {
    if (e.readOnly)
      return !1;
    let s = n(t, e);
    return s ? (i(e.update(s)), !0) : !1;
  };
}
const tQ = /* @__PURE__ */ km(
  sQ,
  0
  /* CommentOption.Toggle */
), eQ = /* @__PURE__ */ km(
  cx,
  0
  /* CommentOption.Toggle */
), iQ = /* @__PURE__ */ km(
  (n, t) => cx(n, t, lQ(t)),
  0
  /* CommentOption.Toggle */
);
function Am(n, t) {
  let e = n.languageDataAt("commentTokens", t, 1);
  return e.length ? e[0] : {};
}
const fo = 50;
function nQ(n, { open: t, close: e }, i, s) {
  let o = n.sliceDoc(i - fo, i), u = n.sliceDoc(s, s + fo), c = /\s*$/.exec(o)[0].length, h = /^\s*/.exec(u)[0].length, p = o.length - c;
  if (o.slice(p - t.length, p) == t && u.slice(h, h + e.length) == e)
    return {
      open: { pos: i - c, margin: c && 1 },
      close: { pos: s + h, margin: h && 1 }
    };
  let m, O;
  s - i <= 2 * fo ? m = O = n.sliceDoc(i, s) : (m = n.sliceDoc(i, i + fo), O = n.sliceDoc(s - fo, s));
  let y = /^\s*/.exec(m)[0].length, S = /\s*$/.exec(O)[0].length, x = O.length - S - e.length;
  return m.slice(y, y + t.length) == t && O.slice(x, x + e.length) == e ? {
    open: {
      pos: i + y + t.length,
      margin: /\s/.test(m.charAt(y + t.length)) ? 1 : 0
    },
    close: {
      pos: s - S - e.length,
      margin: /\s/.test(O.charAt(x - 1)) ? 1 : 0
    }
  } : null;
}
function lQ(n) {
  let t = [];
  for (let e of n.selection.ranges) {
    let i = n.doc.lineAt(e.from), s = e.to <= i.to ? i : n.doc.lineAt(e.to);
    s.from > i.from && s.from == e.to && (s = e.to == i.to + 1 ? i : n.doc.lineAt(e.to - 1));
    let o = t.length - 1;
    o >= 0 && t[o].to > i.from ? t[o].to = s.to : t.push({ from: i.from + /^\s*/.exec(i.text)[0].length, to: s.to });
  }
  return t;
}
function cx(n, t, e = t.selection.ranges) {
  let i = e.map((o) => Am(t, o.from).block);
  if (!i.every((o) => o))
    return null;
  let s = e.map((o, u) => nQ(t, i[u], o.from, o.to));
  if (n != 2 && !s.every((o) => o))
    return { changes: t.changes(e.map((o, u) => s[u] ? [] : [{ from: o.from, insert: i[u].open + " " }, { from: o.to, insert: " " + i[u].close }])) };
  if (n != 1 && s.some((o) => o)) {
    let o = [];
    for (let u = 0, c; u < s.length; u++)
      if (c = s[u]) {
        let h = i[u], { open: p, close: m } = c;
        o.push({ from: p.pos - h.open.length, to: p.pos + p.margin }, { from: m.pos - m.margin, to: m.pos + h.close.length });
      }
    return { changes: o };
  }
  return null;
}
function sQ(n, t, e = t.selection.ranges) {
  let i = [], s = -1;
  for (let { from: o, to: u } of e) {
    let c = i.length, h = 1e9, p = Am(t, o).line;
    if (p) {
      for (let m = o; m <= u; ) {
        let O = t.doc.lineAt(m);
        if (O.from > s && (o == u || u > O.from)) {
          s = O.from;
          let y = /^\s*/.exec(O.text)[0].length, S = y == O.length, x = O.text.slice(y, y + p.length) == p ? y : -1;
          y < O.text.length && y < h && (h = y), i.push({ line: O, comment: x, token: p, indent: y, empty: S, single: !1 });
        }
        m = O.to + 1;
      }
      if (h < 1e9)
        for (let m = c; m < i.length; m++)
          i[m].indent < i[m].line.text.length && (i[m].indent = h);
      i.length == c + 1 && (i[c].single = !0);
    }
  }
  if (n != 2 && i.some((o) => o.comment < 0 && (!o.empty || o.single))) {
    let o = [];
    for (let { line: c, token: h, indent: p, empty: m, single: O } of i)
      (O || !m) && o.push({ from: c.from + p, insert: h + " " });
    let u = t.changes(o);
    return { changes: u, selection: t.selection.map(u, 1) };
  } else if (n != 1 && i.some((o) => o.comment >= 0)) {
    let o = [];
    for (let { line: u, comment: c, token: h } of i)
      if (c >= 0) {
        let p = u.from + c, m = p + h.length;
        u.text[m - u.from] == " " && m++, o.push({ from: p, to: m });
      }
    return { changes: o };
  }
  return null;
}
const jp = /* @__PURE__ */ Zi.define(), rQ = /* @__PURE__ */ Zi.define(), oQ = /* @__PURE__ */ lt.define(), fx = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (t, e) => e
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (t, e) => (i, s) => t(i, s) || e(i, s)
    });
  }
}), hx = /* @__PURE__ */ Oe.define({
  create() {
    return Wi.empty;
  },
  update(n, t) {
    let e = t.state.facet(fx), i = t.annotation(jp);
    if (i) {
      let h = $e.fromTransaction(t, i.selection), p = i.side, m = p == 0 ? n.undone : n.done;
      return h ? m = bc(m, m.length, e.minDepth, h) : m = mx(m, t.startState.selection), new Wi(p == 0 ? i.rest : m, p == 0 ? m : i.rest);
    }
    let s = t.annotation(rQ);
    if ((s == "full" || s == "before") && (n = n.isolate()), t.annotation(se.addToHistory) === !1)
      return t.changes.empty ? n : n.addMapping(t.changes.desc);
    let o = $e.fromTransaction(t), u = t.annotation(se.time), c = t.annotation(se.userEvent);
    return o ? n = n.addChanges(o, u, c, e, t) : t.selection && (n = n.addSelection(t.startState.selection, u, c, e.newGroupDelay)), (s == "full" || s == "after") && (n = n.isolate()), n;
  },
  toJSON(n) {
    return { done: n.done.map((t) => t.toJSON()), undone: n.undone.map((t) => t.toJSON()) };
  },
  fromJSON(n) {
    return new Wi(n.done.map($e.fromJSON), n.undone.map($e.fromJSON));
  }
});
function aQ(n = {}) {
  return [
    hx,
    fx.of(n),
    it.domEventHandlers({
      beforeinput(t, e) {
        let i = t.inputType == "historyUndo" ? dx : t.inputType == "historyRedo" ? Wp : null;
        return i ? (t.preventDefault(), i(e)) : !1;
      }
    })
  ];
}
function Lc(n, t) {
  return function({ state: e, dispatch: i }) {
    if (!t && e.readOnly)
      return !1;
    let s = e.field(hx, !1);
    if (!s)
      return !1;
    let o = s.pop(n, e, t);
    return o ? (i(o), !0) : !1;
  };
}
const dx = /* @__PURE__ */ Lc(0, !1), Wp = /* @__PURE__ */ Lc(1, !1), uQ = /* @__PURE__ */ Lc(0, !0), cQ = /* @__PURE__ */ Lc(1, !0);
class $e {
  constructor(t, e, i, s, o) {
    this.changes = t, this.effects = e, this.mapped = i, this.startSelection = s, this.selectionsAfter = o;
  }
  setSelAfter(t) {
    return new $e(this.changes, this.effects, this.mapped, this.startSelection, t);
  }
  toJSON() {
    var t, e, i;
    return {
      changes: (t = this.changes) === null || t === void 0 ? void 0 : t.toJSON(),
      mapped: (e = this.mapped) === null || e === void 0 ? void 0 : e.toJSON(),
      startSelection: (i = this.startSelection) === null || i === void 0 ? void 0 : i.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s) => s.toJSON())
    };
  }
  static fromJSON(t) {
    return new $e(t.changes && ue.fromJSON(t.changes), [], t.mapped && Gi.fromJSON(t.mapped), t.startSelection && X.fromJSON(t.startSelection), t.selectionsAfter.map(X.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(t, e) {
    let i = Oi;
    for (let s of t.startState.facet(oQ)) {
      let o = s(t);
      o.length && (i = i.concat(o));
    }
    return !i.length && t.changes.empty ? null : new $e(t.changes.invert(t.startState.doc), i, void 0, e || t.startState.selection, Oi);
  }
  static selection(t) {
    return new $e(void 0, Oi, void 0, void 0, t);
  }
}
function bc(n, t, e, i) {
  let s = t + 1 > e + 20 ? t - e - 1 : 0, o = n.slice(s, t);
  return o.push(i), o;
}
function fQ(n, t) {
  let e = [], i = !1;
  return n.iterChangedRanges((s, o) => e.push(s, o)), t.iterChangedRanges((s, o, u, c) => {
    for (let h = 0; h < e.length; ) {
      let p = e[h++], m = e[h++];
      c >= p && u <= m && (i = !0);
    }
  }), i;
}
function hQ(n, t) {
  return n.ranges.length == t.ranges.length && n.ranges.filter((e, i) => e.empty != t.ranges[i].empty).length === 0;
}
function px(n, t) {
  return n.length ? t.length ? n.concat(t) : n : t;
}
const Oi = [], dQ = 200;
function mx(n, t) {
  if (n.length) {
    let e = n[n.length - 1], i = e.selectionsAfter.slice(Math.max(0, e.selectionsAfter.length - dQ));
    return i.length && i[i.length - 1].eq(t) ? n : (i.push(t), bc(n, n.length - 1, 1e9, e.setSelAfter(i)));
  } else
    return [$e.selection([t])];
}
function pQ(n) {
  let t = n[n.length - 1], e = n.slice();
  return e[n.length - 1] = t.setSelAfter(t.selectionsAfter.slice(0, t.selectionsAfter.length - 1)), e;
}
function Ld(n, t) {
  if (!n.length)
    return n;
  let e = n.length, i = Oi;
  for (; e; ) {
    let s = mQ(n[e - 1], t, i);
    if (s.changes && !s.changes.empty || s.effects.length) {
      let o = n.slice(0, e);
      return o[e - 1] = s, o;
    } else
      t = s.mapped, e--, i = s.selectionsAfter;
  }
  return i.length ? [$e.selection(i)] : Oi;
}
function mQ(n, t, e) {
  let i = px(n.selectionsAfter.length ? n.selectionsAfter.map((c) => c.map(t)) : Oi, e);
  if (!n.changes)
    return $e.selection(i);
  let s = n.changes.map(t), o = t.mapDesc(n.changes, !0), u = n.mapped ? n.mapped.composeDesc(o) : o;
  return new $e(s, yt.mapEffects(n.effects, t), u, n.startSelection.map(o), i);
}
const gQ = /^(input\.type|delete)($|\.)/;
class Wi {
  constructor(t, e, i = 0, s = void 0) {
    this.done = t, this.undone = e, this.prevTime = i, this.prevUserEvent = s;
  }
  isolate() {
    return this.prevTime ? new Wi(this.done, this.undone) : this;
  }
  addChanges(t, e, i, s, o) {
    let u = this.done, c = u[u.length - 1];
    return c && c.changes && !c.changes.empty && t.changes && (!i || gQ.test(i)) && (!c.selectionsAfter.length && e - this.prevTime < s.newGroupDelay && s.joinToEvent(o, fQ(c.changes, t.changes)) || // For compose (but not compose.start) events, always join with previous event
    i == "input.type.compose") ? u = bc(u, u.length - 1, s.minDepth, new $e(t.changes.compose(c.changes), px(yt.mapEffects(t.effects, c.changes), c.effects), c.mapped, c.startSelection, Oi)) : u = bc(u, u.length, s.minDepth, t), new Wi(u, Oi, e, i);
  }
  addSelection(t, e, i, s) {
    let o = this.done.length ? this.done[this.done.length - 1].selectionsAfter : Oi;
    return o.length > 0 && e - this.prevTime < s && i == this.prevUserEvent && i && /^select($|\.)/.test(i) && hQ(o[o.length - 1], t) ? this : new Wi(mx(this.done, t), this.undone, e, i);
  }
  addMapping(t) {
    return new Wi(Ld(this.done, t), Ld(this.undone, t), this.prevTime, this.prevUserEvent);
  }
  pop(t, e, i) {
    let s = t == 0 ? this.done : this.undone;
    if (s.length == 0)
      return null;
    let o = s[s.length - 1], u = o.selectionsAfter[0] || e.selection;
    if (i && o.selectionsAfter.length)
      return e.update({
        selection: o.selectionsAfter[o.selectionsAfter.length - 1],
        annotations: jp.of({ side: t, rest: pQ(s), selection: u }),
        userEvent: t == 0 ? "select.undo" : "select.redo",
        scrollIntoView: !0
      });
    if (o.changes) {
      let c = s.length == 1 ? Oi : s.slice(0, s.length - 1);
      return o.mapped && (c = Ld(c, o.mapped)), e.update({
        changes: o.changes,
        selection: o.startSelection,
        effects: o.effects,
        annotations: jp.of({ side: t, rest: c, selection: u }),
        filter: !1,
        userEvent: t == 0 ? "undo" : "redo",
        scrollIntoView: !0
      });
    } else
      return null;
  }
}
Wi.empty = /* @__PURE__ */ new Wi(Oi, Oi);
const OQ = [
  { key: "Mod-z", run: dx, preventDefault: !0 },
  { key: "Mod-y", mac: "Mod-Shift-z", run: Wp, preventDefault: !0 },
  { linux: "Ctrl-Shift-z", run: Wp, preventDefault: !0 },
  { key: "Mod-u", run: uQ, preventDefault: !0 },
  { key: "Alt-u", mac: "Mod-Shift-u", run: cQ, preventDefault: !0 }
];
function nr(n, t) {
  return X.create(n.ranges.map(t), n.mainIndex);
}
function Ji(n, t) {
  return n.update({ selection: t, scrollIntoView: !0, userEvent: "select" });
}
function Mi({ state: n, dispatch: t }, e) {
  let i = nr(n.selection, e);
  return i.eq(n.selection, !0) ? !1 : (t(Ji(n, i)), !0);
}
function Uc(n, t) {
  return X.cursor(t ? n.to : n.from);
}
function gx(n, t) {
  return Mi(n, (e) => e.empty ? n.moveByChar(e, t) : Uc(e, t));
}
function Re(n) {
  return n.textDirectionAt(n.state.selection.main.head) == jt.LTR;
}
const Ox = (n) => gx(n, !Re(n)), yx = (n) => gx(n, Re(n));
function vx(n, t) {
  return Mi(n, (e) => e.empty ? n.moveByGroup(e, t) : Uc(e, t));
}
const yQ = (n) => vx(n, !Re(n)), vQ = (n) => vx(n, Re(n));
function SQ(n, t, e) {
  if (t.type.prop(e))
    return !0;
  let i = t.to - t.from;
  return i && (i > 2 || /[^\s,.;:]/.test(n.sliceDoc(t.from, t.to))) || t.firstChild;
}
function Vc(n, t, e) {
  let i = ge(n).resolveInner(t.head), s = e ? wt.closedBy : wt.openedBy;
  for (let h = t.head; ; ) {
    let p = e ? i.childAfter(h) : i.childBefore(h);
    if (!p)
      break;
    SQ(n, p, s) ? i = p : h = e ? p.to : p.from;
  }
  let o = i.type.prop(s), u, c;
  return o && (u = e ? ji(n, i.from, 1) : ji(n, i.to, -1)) && u.matched ? c = e ? u.end.to : u.end.from : c = e ? i.to : i.from, X.cursor(c, e ? -1 : 1);
}
const bQ = (n) => Mi(n, (t) => Vc(n.state, t, !Re(n))), xQ = (n) => Mi(n, (t) => Vc(n.state, t, Re(n)));
function Sx(n, t) {
  return Mi(n, (e) => {
    if (!e.empty)
      return Uc(e, t);
    let i = n.moveVertically(e, t);
    return i.head != e.head ? i : n.moveToLineBoundary(e, t);
  });
}
const bx = (n) => Sx(n, !1), xx = (n) => Sx(n, !0);
function wx(n) {
  let t = n.scrollDOM.clientHeight < n.scrollDOM.scrollHeight - 2, e = 0, i = 0, s;
  if (t) {
    for (let o of n.state.facet(it.scrollMargins)) {
      let u = o(n);
      u != null && u.top && (e = Math.max(u == null ? void 0 : u.top, e)), u != null && u.bottom && (i = Math.max(u == null ? void 0 : u.bottom, i));
    }
    s = n.scrollDOM.clientHeight - e - i;
  } else
    s = (n.dom.ownerDocument.defaultView || window).innerHeight;
  return {
    marginTop: e,
    marginBottom: i,
    selfScroll: t,
    height: Math.max(n.defaultLineHeight, s - 5)
  };
}
function Tx(n, t) {
  let e = wx(n), { state: i } = n, s = nr(i.selection, (u) => u.empty ? n.moveVertically(u, t, e.height) : Uc(u, t));
  if (s.eq(i.selection))
    return !1;
  let o;
  if (e.selfScroll) {
    let u = n.coordsAtPos(i.selection.main.head), c = n.scrollDOM.getBoundingClientRect(), h = c.top + e.marginTop, p = c.bottom - e.marginBottom;
    u && u.top > h && u.bottom < p && (o = it.scrollIntoView(s.main.head, { y: "start", yMargin: u.top - h }));
  }
  return n.dispatch(Ji(i, s), { effects: o }), !0;
}
const hv = (n) => Tx(n, !1), Gp = (n) => Tx(n, !0);
function hl(n, t, e) {
  let i = n.lineBlockAt(t.head), s = n.moveToLineBoundary(t, e);
  if (s.head == t.head && s.head != (e ? i.to : i.from) && (s = n.moveToLineBoundary(t, e, !1)), !e && s.head == i.from && i.length) {
    let o = /^\s*/.exec(n.state.sliceDoc(i.from, Math.min(i.from + 100, i.to)))[0].length;
    o && t.head != i.from + o && (s = X.cursor(i.from + o));
  }
  return s;
}
const wQ = (n) => Mi(n, (t) => hl(n, t, !0)), TQ = (n) => Mi(n, (t) => hl(n, t, !1)), kQ = (n) => Mi(n, (t) => hl(n, t, !Re(n))), AQ = (n) => Mi(n, (t) => hl(n, t, Re(n))), CQ = (n) => Mi(n, (t) => X.cursor(n.lineBlockAt(t.head).from, 1)), EQ = (n) => Mi(n, (t) => X.cursor(n.lineBlockAt(t.head).to, -1));
function MQ(n, t, e) {
  let i = !1, s = nr(n.selection, (o) => {
    let u = ji(n, o.head, -1) || ji(n, o.head, 1) || o.head > 0 && ji(n, o.head - 1, 1) || o.head < n.doc.length && ji(n, o.head + 1, -1);
    if (!u || !u.end)
      return o;
    i = !0;
    let c = u.start.from == o.head ? u.end.to : u.end.from;
    return X.cursor(c);
  });
  return i ? (t(Ji(n, s)), !0) : !1;
}
const QQ = ({ state: n, dispatch: t }) => MQ(n, t);
function bi(n, t) {
  let e = nr(n.state.selection, (i) => {
    let s = t(i);
    return X.range(i.anchor, s.head, s.goalColumn, s.bidiLevel || void 0);
  });
  return e.eq(n.state.selection) ? !1 : (n.dispatch(Ji(n.state, e)), !0);
}
function kx(n, t) {
  return bi(n, (e) => n.moveByChar(e, t));
}
const Ax = (n) => kx(n, !Re(n)), Cx = (n) => kx(n, Re(n));
function Ex(n, t) {
  return bi(n, (e) => n.moveByGroup(e, t));
}
const RQ = (n) => Ex(n, !Re(n)), DQ = (n) => Ex(n, Re(n)), zQ = (n) => bi(n, (t) => Vc(n.state, t, !Re(n))), qQ = (n) => bi(n, (t) => Vc(n.state, t, Re(n)));
function Mx(n, t) {
  return bi(n, (e) => n.moveVertically(e, t));
}
const Qx = (n) => Mx(n, !1), Rx = (n) => Mx(n, !0);
function Dx(n, t) {
  return bi(n, (e) => n.moveVertically(e, t, wx(n).height));
}
const dv = (n) => Dx(n, !1), pv = (n) => Dx(n, !0), _Q = (n) => bi(n, (t) => hl(n, t, !0)), BQ = (n) => bi(n, (t) => hl(n, t, !1)), NQ = (n) => bi(n, (t) => hl(n, t, !Re(n))), PQ = (n) => bi(n, (t) => hl(n, t, Re(n))), LQ = (n) => bi(n, (t) => X.cursor(n.lineBlockAt(t.head).from)), UQ = (n) => bi(n, (t) => X.cursor(n.lineBlockAt(t.head).to)), mv = ({ state: n, dispatch: t }) => (t(Ji(n, { anchor: 0 })), !0), gv = ({ state: n, dispatch: t }) => (t(Ji(n, { anchor: n.doc.length })), !0), Ov = ({ state: n, dispatch: t }) => (t(Ji(n, { anchor: n.selection.main.anchor, head: 0 })), !0), yv = ({ state: n, dispatch: t }) => (t(Ji(n, { anchor: n.selection.main.anchor, head: n.doc.length })), !0), VQ = ({ state: n, dispatch: t }) => (t(n.update({ selection: { anchor: 0, head: n.doc.length }, userEvent: "select" })), !0), HQ = ({ state: n, dispatch: t }) => {
  let e = Hc(n).map(({ from: i, to: s }) => X.range(i, Math.min(s + 1, n.doc.length)));
  return t(n.update({ selection: X.create(e), userEvent: "select" })), !0;
}, XQ = ({ state: n, dispatch: t }) => {
  let e = nr(n.selection, (i) => {
    let s = ge(n), o = s.resolveStack(i.from, 1);
    if (i.empty) {
      let u = s.resolveStack(i.from, -1);
      u.node.from >= o.node.from && u.node.to <= o.node.to && (o = u);
    }
    for (let u = o; u; u = u.next) {
      let { node: c } = u;
      if ((c.from < i.from && c.to >= i.to || c.to > i.to && c.from <= i.from) && u.next)
        return X.range(c.to, c.from);
    }
    return i;
  });
  return e.eq(n.selection) ? !1 : (t(Ji(n, e)), !0);
}, $Q = ({ state: n, dispatch: t }) => {
  let e = n.selection, i = null;
  return e.ranges.length > 1 ? i = X.create([e.main]) : e.main.empty || (i = X.create([X.cursor(e.main.head)])), i ? (t(Ji(n, i)), !0) : !1;
};
function Ko(n, t) {
  if (n.state.readOnly)
    return !1;
  let e = "delete.selection", { state: i } = n, s = i.changeByRange((o) => {
    let { from: u, to: c } = o;
    if (u == c) {
      let h = t(o);
      h < u ? (e = "delete.backward", h = qu(n, h, !1)) : h > u && (e = "delete.forward", h = qu(n, h, !0)), u = Math.min(u, h), c = Math.max(c, h);
    } else
      u = qu(n, u, !1), c = qu(n, c, !0);
    return u == c ? { range: o } : { changes: { from: u, to: c }, range: X.cursor(u, u < o.head ? -1 : 1) };
  });
  return s.changes.empty ? !1 : (n.dispatch(i.update(s, {
    scrollIntoView: !0,
    userEvent: e,
    effects: e == "delete.selection" ? it.announce.of(i.phrase("Selection deleted")) : void 0
  })), !0);
}
function qu(n, t, e) {
  if (n instanceof it)
    for (let i of n.state.facet(it.atomicRanges).map((s) => s(n)))
      i.between(t, t, (s, o) => {
        s < t && o > t && (t = e ? o : s);
      });
  return t;
}
const zx = (n, t, e) => Ko(n, (i) => {
  let s = i.from, { state: o } = n, u = o.doc.lineAt(s), c, h;
  if (e && !t && s > u.from && s < u.from + 200 && !/[^ \t]/.test(c = u.text.slice(0, s - u.from))) {
    if (c[c.length - 1] == "	")
      return s - 1;
    let p = er(c, o.tabSize), m = p % yc(o) || yc(o);
    for (let O = 0; O < m && c[c.length - 1 - O] == " "; O++)
      s--;
    h = s;
  } else
    h = Te(u.text, s - u.from, t, t) + u.from, h == s && u.number != (t ? o.doc.lines : 1) ? h += t ? 1 : -1 : !t && /[\ufe00-\ufe0f]/.test(u.text.slice(h - u.from, s - u.from)) && (h = Te(u.text, h - u.from, !1, !1) + u.from);
  return h;
}), Yp = (n) => zx(n, !1, !0), qx = (n) => zx(n, !0, !1), _x = (n, t) => Ko(n, (e) => {
  let i = e.head, { state: s } = n, o = s.doc.lineAt(i), u = s.charCategorizer(i);
  for (let c = null; ; ) {
    if (i == (t ? o.to : o.from)) {
      i == e.head && o.number != (t ? s.doc.lines : 1) && (i += t ? 1 : -1);
      break;
    }
    let h = Te(o.text, i - o.from, t) + o.from, p = o.text.slice(Math.min(i, h) - o.from, Math.max(i, h) - o.from), m = u(p);
    if (c != null && m != c)
      break;
    (p != " " || i != e.head) && (c = m), i = h;
  }
  return i;
}), Bx = (n) => _x(n, !1), jQ = (n) => _x(n, !0), WQ = (n) => Ko(n, (t) => {
  let e = n.lineBlockAt(t.head).to;
  return t.head < e ? e : Math.min(n.state.doc.length, t.head + 1);
}), GQ = (n) => Ko(n, (t) => {
  let e = n.moveToLineBoundary(t, !1).head;
  return t.head > e ? e : Math.max(0, t.head - 1);
}), YQ = (n) => Ko(n, (t) => {
  let e = n.moveToLineBoundary(t, !0).head;
  return t.head < e ? e : Math.min(n.state.doc.length, t.head + 1);
}), ZQ = ({ state: n, dispatch: t }) => {
  if (n.readOnly)
    return !1;
  let e = n.changeByRange((i) => ({
    changes: { from: i.from, to: i.to, insert: Et.of(["", ""]) },
    range: X.cursor(i.from)
  }));
  return t(n.update(e, { scrollIntoView: !0, userEvent: "input" })), !0;
}, FQ = ({ state: n, dispatch: t }) => {
  if (n.readOnly)
    return !1;
  let e = n.changeByRange((i) => {
    if (!i.empty || i.from == 0 || i.from == n.doc.length)
      return { range: i };
    let s = i.from, o = n.doc.lineAt(s), u = s == o.from ? s - 1 : Te(o.text, s - o.from, !1) + o.from, c = s == o.to ? s + 1 : Te(o.text, s - o.from, !0) + o.from;
    return {
      changes: { from: u, to: c, insert: n.doc.slice(s, c).append(n.doc.slice(u, s)) },
      range: X.cursor(c)
    };
  });
  return e.changes.empty ? !1 : (t(n.update(e, { scrollIntoView: !0, userEvent: "move.character" })), !0);
};
function Hc(n) {
  let t = [], e = -1;
  for (let i of n.selection.ranges) {
    let s = n.doc.lineAt(i.from), o = n.doc.lineAt(i.to);
    if (!i.empty && i.to == o.from && (o = n.doc.lineAt(i.to - 1)), e >= s.number) {
      let u = t[t.length - 1];
      u.to = o.to, u.ranges.push(i);
    } else
      t.push({ from: s.from, to: o.to, ranges: [i] });
    e = o.number + 1;
  }
  return t;
}
function Nx(n, t, e) {
  if (n.readOnly)
    return !1;
  let i = [], s = [];
  for (let o of Hc(n)) {
    if (e ? o.to == n.doc.length : o.from == 0)
      continue;
    let u = n.doc.lineAt(e ? o.to + 1 : o.from - 1), c = u.length + 1;
    if (e) {
      i.push({ from: o.to, to: u.to }, { from: o.from, insert: u.text + n.lineBreak });
      for (let h of o.ranges)
        s.push(X.range(Math.min(n.doc.length, h.anchor + c), Math.min(n.doc.length, h.head + c)));
    } else {
      i.push({ from: u.from, to: o.from }, { from: o.to, insert: n.lineBreak + u.text });
      for (let h of o.ranges)
        s.push(X.range(h.anchor - c, h.head - c));
    }
  }
  return i.length ? (t(n.update({
    changes: i,
    scrollIntoView: !0,
    selection: X.create(s, n.selection.mainIndex),
    userEvent: "move.line"
  })), !0) : !1;
}
const KQ = ({ state: n, dispatch: t }) => Nx(n, t, !1), JQ = ({ state: n, dispatch: t }) => Nx(n, t, !0);
function Px(n, t, e) {
  if (n.readOnly)
    return !1;
  let i = [];
  for (let s of Hc(n))
    e ? i.push({ from: s.from, insert: n.doc.slice(s.from, s.to) + n.lineBreak }) : i.push({ from: s.to, insert: n.lineBreak + n.doc.slice(s.from, s.to) });
  return t(n.update({ changes: i, scrollIntoView: !0, userEvent: "input.copyline" })), !0;
}
const IQ = ({ state: n, dispatch: t }) => Px(n, t, !1), tR = ({ state: n, dispatch: t }) => Px(n, t, !0), eR = (n) => {
  if (n.state.readOnly)
    return !1;
  let { state: t } = n, e = t.changes(Hc(t).map(({ from: s, to: o }) => (s > 0 ? s-- : o < t.doc.length && o++, { from: s, to: o }))), i = nr(t.selection, (s) => {
    let o;
    if (n.lineWrapping) {
      let u = n.lineBlockAt(s.head), c = n.coordsAtPos(s.head, s.assoc || 1);
      c && (o = u.bottom + n.documentTop - c.bottom + n.defaultLineHeight / 2);
    }
    return n.moveVertically(s, !0, o);
  }).map(e);
  return n.dispatch({ changes: e, selection: i, scrollIntoView: !0, userEvent: "delete.line" }), !0;
};
function iR(n, t) {
  if (/\(\)|\[\]|\{\}/.test(n.sliceDoc(t - 1, t + 1)))
    return { from: t, to: t };
  let e = ge(n).resolveInner(t), i = e.childBefore(t), s = e.childAfter(t), o;
  return i && s && i.to <= t && s.from >= t && (o = i.type.prop(wt.closedBy)) && o.indexOf(s.name) > -1 && n.doc.lineAt(i.to).from == n.doc.lineAt(s.from).from && !/\S/.test(n.sliceDoc(i.to, s.from)) ? { from: i.to, to: s.from } : null;
}
const vv = /* @__PURE__ */ Lx(!1), nR = /* @__PURE__ */ Lx(!0);
function Lx(n) {
  return ({ state: t, dispatch: e }) => {
    if (t.readOnly)
      return !1;
    let i = t.changeByRange((s) => {
      let { from: o, to: u } = s, c = t.doc.lineAt(o), h = !n && o == u && iR(t, o);
      n && (o = u = (u <= c.to ? c : t.doc.lineAt(u)).to);
      let p = new Nc(t, { simulateBreak: o, simulateDoubleBreak: !!h }), m = wm(p, o);
      for (m == null && (m = er(/^\s*/.exec(t.doc.lineAt(o).text)[0], t.tabSize)); u < c.to && /\s/.test(c.text[u - c.from]); )
        u++;
      h ? { from: o, to: u } = h : o > c.from && o < c.from + 100 && !/\S/.test(c.text.slice(0, o)) && (o = c.from);
      let O = ["", Bo(t, m)];
      return h && O.push(Bo(t, p.lineIndent(c.from, -1))), {
        changes: { from: o, to: u, insert: Et.of(O) },
        range: X.cursor(o + 1 + O[1].length)
      };
    });
    return e(t.update(i, { scrollIntoView: !0, userEvent: "input" })), !0;
  };
}
function Cm(n, t) {
  let e = -1;
  return n.changeByRange((i) => {
    let s = [];
    for (let u = i.from; u <= i.to; ) {
      let c = n.doc.lineAt(u);
      c.number > e && (i.empty || i.to > c.from) && (t(c, s, i), e = c.number), u = c.to + 1;
    }
    let o = n.changes(s);
    return {
      changes: s,
      range: X.range(o.mapPos(i.anchor, 1), o.mapPos(i.head, 1))
    };
  });
}
const lR = ({ state: n, dispatch: t }) => {
  if (n.readOnly)
    return !1;
  let e = /* @__PURE__ */ Object.create(null), i = new Nc(n, { overrideIndentation: (o) => {
    let u = e[o];
    return u ?? -1;
  } }), s = Cm(n, (o, u, c) => {
    let h = wm(i, o.from);
    if (h == null)
      return;
    /\S/.test(o.text) || (h = 0);
    let p = /^\s*/.exec(o.text)[0], m = Bo(n, h);
    (p != m || c.from < o.from + p.length) && (e[o.from] = h, u.push({ from: o.from, to: o.from + p.length, insert: m }));
  });
  return s.changes.empty || t(n.update(s, { userEvent: "indent" })), !0;
}, Ux = ({ state: n, dispatch: t }) => n.readOnly ? !1 : (t(n.update(Cm(n, (e, i) => {
  i.push({ from: e.from, insert: n.facet(Yo) });
}), { userEvent: "input.indent" })), !0), Vx = ({ state: n, dispatch: t }) => n.readOnly ? !1 : (t(n.update(Cm(n, (e, i) => {
  let s = /^\s*/.exec(e.text)[0];
  if (!s)
    return;
  let o = er(s, n.tabSize), u = 0, c = Bo(n, Math.max(0, o - yc(n)));
  for (; u < s.length && u < c.length && s.charCodeAt(u) == c.charCodeAt(u); )
    u++;
  i.push({ from: e.from + u, to: e.from + s.length, insert: c.slice(u) });
}), { userEvent: "delete.dedent" })), !0), sR = (n) => (n.setTabFocusMode(), !0), rR = [
  { key: "Ctrl-b", run: Ox, shift: Ax, preventDefault: !0 },
  { key: "Ctrl-f", run: yx, shift: Cx },
  { key: "Ctrl-p", run: bx, shift: Qx },
  { key: "Ctrl-n", run: xx, shift: Rx },
  { key: "Ctrl-a", run: CQ, shift: LQ },
  { key: "Ctrl-e", run: EQ, shift: UQ },
  { key: "Ctrl-d", run: qx },
  { key: "Ctrl-h", run: Yp },
  { key: "Ctrl-k", run: WQ },
  { key: "Ctrl-Alt-h", run: Bx },
  { key: "Ctrl-o", run: ZQ },
  { key: "Ctrl-t", run: FQ },
  { key: "Ctrl-v", run: Gp }
], oR = /* @__PURE__ */ [
  { key: "ArrowLeft", run: Ox, shift: Ax, preventDefault: !0 },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: yQ, shift: RQ, preventDefault: !0 },
  { mac: "Cmd-ArrowLeft", run: kQ, shift: NQ, preventDefault: !0 },
  { key: "ArrowRight", run: yx, shift: Cx, preventDefault: !0 },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: vQ, shift: DQ, preventDefault: !0 },
  { mac: "Cmd-ArrowRight", run: AQ, shift: PQ, preventDefault: !0 },
  { key: "ArrowUp", run: bx, shift: Qx, preventDefault: !0 },
  { mac: "Cmd-ArrowUp", run: mv, shift: Ov },
  { mac: "Ctrl-ArrowUp", run: hv, shift: dv },
  { key: "ArrowDown", run: xx, shift: Rx, preventDefault: !0 },
  { mac: "Cmd-ArrowDown", run: gv, shift: yv },
  { mac: "Ctrl-ArrowDown", run: Gp, shift: pv },
  { key: "PageUp", run: hv, shift: dv },
  { key: "PageDown", run: Gp, shift: pv },
  { key: "Home", run: TQ, shift: BQ, preventDefault: !0 },
  { key: "Mod-Home", run: mv, shift: Ov },
  { key: "End", run: wQ, shift: _Q, preventDefault: !0 },
  { key: "Mod-End", run: gv, shift: yv },
  { key: "Enter", run: vv, shift: vv },
  { key: "Mod-a", run: VQ },
  { key: "Backspace", run: Yp, shift: Yp },
  { key: "Delete", run: qx },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: Bx },
  { key: "Mod-Delete", mac: "Alt-Delete", run: jQ },
  { mac: "Mod-Backspace", run: GQ },
  { mac: "Mod-Delete", run: YQ }
].concat(/* @__PURE__ */ rR.map((n) => ({ mac: n.key, run: n.run, shift: n.shift }))), aR = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: bQ, shift: zQ },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: xQ, shift: qQ },
  { key: "Alt-ArrowUp", run: KQ },
  { key: "Shift-Alt-ArrowUp", run: IQ },
  { key: "Alt-ArrowDown", run: JQ },
  { key: "Shift-Alt-ArrowDown", run: tR },
  { key: "Escape", run: $Q },
  { key: "Mod-Enter", run: nR },
  { key: "Alt-l", mac: "Ctrl-l", run: HQ },
  { key: "Mod-i", run: XQ, preventDefault: !0 },
  { key: "Mod-[", run: Vx },
  { key: "Mod-]", run: Ux },
  { key: "Mod-Alt-\\", run: lR },
  { key: "Shift-Mod-k", run: eR },
  { key: "Shift-Mod-\\", run: QQ },
  { key: "Mod-/", run: IM },
  { key: "Alt-A", run: eQ },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: sR }
].concat(oR), uR = { key: "Tab", run: Ux, shift: Vx };
function Ut() {
  var n = arguments[0];
  typeof n == "string" && (n = document.createElement(n));
  var t = 1, e = arguments[1];
  if (e && typeof e == "object" && e.nodeType == null && !Array.isArray(e)) {
    for (var i in e) if (Object.prototype.hasOwnProperty.call(e, i)) {
      var s = e[i];
      typeof s == "string" ? n.setAttribute(i, s) : s != null && (n[i] = s);
    }
    t++;
  }
  for (; t < arguments.length; t++) Hx(n, arguments[t]);
  return n;
}
function Hx(n, t) {
  if (typeof t == "string")
    n.appendChild(document.createTextNode(t));
  else if (t != null) if (t.nodeType != null)
    n.appendChild(t);
  else if (Array.isArray(t))
    for (var e = 0; e < t.length; e++) Hx(n, t[e]);
  else
    throw new RangeError("Unsupported child node: " + t);
}
const Sv = typeof String.prototype.normalize == "function" ? (n) => n.normalize("NFKD") : (n) => n;
class Is {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(t, e, i = 0, s = t.length, o, u) {
    this.test = u, this.value = { from: 0, to: 0 }, this.done = !1, this.matches = [], this.buffer = "", this.bufferPos = 0, this.iter = t.iterRange(i, s), this.bufferStart = i, this.normalize = o ? (c) => o(Sv(c)) : Sv, this.query = this.normalize(e);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (this.bufferStart += this.buffer.length, this.iter.next(), this.iter.done)
        return -1;
      this.bufferPos = 0, this.buffer = this.iter.value;
    }
    return Ue(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; )
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let t = this.peek();
      if (t < 0)
        return this.done = !0, this;
      let e = nm(t), i = this.bufferStart + this.bufferPos;
      this.bufferPos += Hi(t);
      let s = this.normalize(e);
      if (s.length)
        for (let o = 0, u = i; ; o++) {
          let c = s.charCodeAt(o), h = this.match(c, u, this.bufferPos + this.bufferStart);
          if (o == s.length - 1) {
            if (h)
              return this.value = h, this;
            break;
          }
          u == i && o < e.length && e.charCodeAt(o) == c && u++;
        }
    }
  }
  match(t, e, i) {
    let s = null;
    for (let o = 0; o < this.matches.length; o += 2) {
      let u = this.matches[o], c = !1;
      this.query.charCodeAt(u) == t && (u == this.query.length - 1 ? s = { from: this.matches[o + 1], to: i } : (this.matches[o]++, c = !0)), c || (this.matches.splice(o, 2), o -= 2);
    }
    return this.query.charCodeAt(0) == t && (this.query.length == 1 ? s = { from: e, to: i } : this.matches.push(1, e)), s && this.test && !this.test(s.from, s.to, this.buffer, this.bufferStart) && (s = null), s;
  }
}
typeof Symbol < "u" && (Is.prototype[Symbol.iterator] = function() {
  return this;
});
const Xx = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") }, Em = "gm" + (/x/.unicode == null ? "" : "u");
class $x {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(t, e, i, s = 0, o = t.length) {
    if (this.text = t, this.to = o, this.curLine = "", this.done = !1, this.value = Xx, /\\[sWDnr]|\n|\r|\[\^/.test(e))
      return new jx(t, e, i, s, o);
    this.re = new RegExp(e, Em + (i != null && i.ignoreCase ? "i" : "")), this.test = i == null ? void 0 : i.test, this.iter = t.iter();
    let u = t.lineAt(s);
    this.curLineStart = u.from, this.matchPos = xc(t, s), this.getLine(this.curLineStart);
  }
  getLine(t) {
    this.iter.next(t), this.iter.lineBreak ? this.curLine = "" : (this.curLine = this.iter.value, this.curLineStart + this.curLine.length > this.to && (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)), this.iter.next());
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1, this.curLineStart > this.to ? this.curLine = "" : this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let t = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = t;
      let e = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (e) {
        let i = this.curLineStart + e.index, s = i + e[0].length;
        if (this.matchPos = xc(this.text, s + (i == s ? 1 : 0)), i == this.curLineStart + this.curLine.length && this.nextLine(), (i < s || i > this.value.to) && (!this.test || this.test(i, s, e)))
          return this.value = { from: i, to: s, match: e }, this;
        t = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), t = 0;
      else
        return this.done = !0, this;
    }
  }
}
const Ud = /* @__PURE__ */ new WeakMap();
class $s {
  constructor(t, e) {
    this.from = t, this.text = e;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(t, e, i) {
    let s = Ud.get(t);
    if (!s || s.from >= i || s.to <= e) {
      let c = new $s(e, t.sliceString(e, i));
      return Ud.set(t, c), c;
    }
    if (s.from == e && s.to == i)
      return s;
    let { text: o, from: u } = s;
    return u > e && (o = t.sliceString(e, u) + o, u = e), s.to < i && (o += t.sliceString(s.to, i)), Ud.set(t, new $s(u, o)), new $s(e, o.slice(e - u, i - u));
  }
}
class jx {
  constructor(t, e, i, s, o) {
    this.text = t, this.to = o, this.done = !1, this.value = Xx, this.matchPos = xc(t, s), this.re = new RegExp(e, Em + (i != null && i.ignoreCase ? "i" : "")), this.test = i == null ? void 0 : i.test, this.flat = $s.get(t, s, this.chunkEnd(
      s + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(t) {
    return t >= this.to ? this.to : this.text.lineAt(t).to;
  }
  next() {
    for (; ; ) {
      let t = this.re.lastIndex = this.matchPos - this.flat.from, e = this.re.exec(this.flat.text);
      if (e && !e[0] && e.index == t && (this.re.lastIndex = t + 1, e = this.re.exec(this.flat.text)), e) {
        let i = this.flat.from + e.index, s = i + e[0].length;
        if ((this.flat.to >= this.to || e.index + e[0].length <= this.flat.text.length - 10) && (!this.test || this.test(i, s, e)))
          return this.value = { from: i, to: s, match: e }, this.matchPos = xc(this.text, s + (i == s ? 1 : 0)), this;
      }
      if (this.flat.to == this.to)
        return this.done = !0, this;
      this.flat = $s.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
}
typeof Symbol < "u" && ($x.prototype[Symbol.iterator] = jx.prototype[Symbol.iterator] = function() {
  return this;
});
function cR(n) {
  try {
    return new RegExp(n, Em), !0;
  } catch {
    return !1;
  }
}
function xc(n, t) {
  if (t >= n.length)
    return t;
  let e = n.lineAt(t), i;
  for (; t < e.to && (i = e.text.charCodeAt(t - e.from)) >= 56320 && i < 57344; )
    t++;
  return t;
}
function Zp(n) {
  let t = String(n.state.doc.lineAt(n.state.selection.main.head).number), e = Ut("input", { class: "cm-textfield", name: "line", value: t }), i = Ut("form", {
    class: "cm-gotoLine",
    onkeydown: (o) => {
      o.keyCode == 27 ? (o.preventDefault(), n.dispatch({ effects: Ao.of(!1) }), n.focus()) : o.keyCode == 13 && (o.preventDefault(), s());
    },
    onsubmit: (o) => {
      o.preventDefault(), s();
    }
  }, Ut("label", n.state.phrase("Go to line"), ": ", e), " ", Ut("button", { class: "cm-button", type: "submit" }, n.state.phrase("go")), Ut("button", {
    name: "close",
    onclick: () => {
      n.dispatch({ effects: Ao.of(!1) }), n.focus();
    },
    "aria-label": n.state.phrase("close"),
    type: "button"
  }, ["×"]));
  function s() {
    let o = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(e.value);
    if (!o)
      return;
    let { state: u } = n, c = u.doc.lineAt(u.selection.main.head), [, h, p, m, O] = o, y = m ? +m.slice(1) : 0, S = p ? +p : c.number;
    if (p && O) {
      let C = S / 100;
      h && (C = C * (h == "-" ? -1 : 1) + c.number / u.doc.lines), S = Math.round(u.doc.lines * C);
    } else p && h && (S = S * (h == "-" ? -1 : 1) + c.number);
    let x = u.doc.line(Math.max(1, Math.min(u.doc.lines, S))), w = X.cursor(x.from + Math.max(0, Math.min(y, x.length)));
    n.dispatch({
      effects: [Ao.of(!1), it.scrollIntoView(w.from, { y: "center" })],
      selection: w
    }), n.focus();
  }
  return { dom: i };
}
const Ao = /* @__PURE__ */ yt.define(), bv = /* @__PURE__ */ Oe.define({
  create() {
    return !0;
  },
  update(n, t) {
    for (let e of t.effects)
      e.is(Ao) && (n = e.value);
    return n;
  },
  provide: (n) => qo.from(n, (t) => t ? Zp : null)
}), fR = (n) => {
  let t = zo(n, Zp);
  if (!t) {
    let e = [Ao.of(!0)];
    n.state.field(bv, !1) == null && e.push(yt.appendConfig.of([bv, hR])), n.dispatch({ effects: e }), t = zo(n, Zp);
  }
  return t && t.dom.querySelector("input").select(), !0;
}, hR = /* @__PURE__ */ it.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    position: "relative",
    "& label": { fontSize: "80%" },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      bottom: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: "0"
    }
  }
}), dR = {
  highlightWordAroundCursor: !1,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: !1
}, pR = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, dR, {
      highlightWordAroundCursor: (t, e) => t || e,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function mR(n) {
  return [SR, vR];
}
const gR = /* @__PURE__ */ ft.mark({ class: "cm-selectionMatch" }), OR = /* @__PURE__ */ ft.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function xv(n, t, e, i) {
  return (e == 0 || n(t.sliceDoc(e - 1, e)) != Yt.Word) && (i == t.doc.length || n(t.sliceDoc(i, i + 1)) != Yt.Word);
}
function yR(n, t, e, i) {
  return n(t.sliceDoc(e, e + 1)) == Yt.Word && n(t.sliceDoc(i - 1, i)) == Yt.Word;
}
const vR = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.decorations = this.getDeco(n);
  }
  update(n) {
    (n.selectionSet || n.docChanged || n.viewportChanged) && (this.decorations = this.getDeco(n.view));
  }
  getDeco(n) {
    let t = n.state.facet(pR), { state: e } = n, i = e.selection;
    if (i.ranges.length > 1)
      return ft.none;
    let s = i.main, o, u = null;
    if (s.empty) {
      if (!t.highlightWordAroundCursor)
        return ft.none;
      let h = e.wordAt(s.head);
      if (!h)
        return ft.none;
      u = e.charCategorizer(s.head), o = e.sliceDoc(h.from, h.to);
    } else {
      let h = s.to - s.from;
      if (h < t.minSelectionLength || h > 200)
        return ft.none;
      if (t.wholeWords) {
        if (o = e.sliceDoc(s.from, s.to), u = e.charCategorizer(s.head), !(xv(u, e, s.from, s.to) && yR(u, e, s.from, s.to)))
          return ft.none;
      } else if (o = e.sliceDoc(s.from, s.to), !o)
        return ft.none;
    }
    let c = [];
    for (let h of n.visibleRanges) {
      let p = new Is(e.doc, o, h.from, h.to);
      for (; !p.next().done; ) {
        let { from: m, to: O } = p.value;
        if ((!u || xv(u, e, m, O)) && (s.empty && m <= s.from && O >= s.to ? c.push(OR.range(m, O)) : (m >= s.to || O <= s.from) && c.push(gR.range(m, O)), c.length > t.maxMatches))
          return ft.none;
      }
    }
    return ft.set(c);
  }
}, {
  decorations: (n) => n.decorations
}), SR = /* @__PURE__ */ it.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
}), bR = ({ state: n, dispatch: t }) => {
  let { selection: e } = n, i = X.create(e.ranges.map((s) => n.wordAt(s.head) || X.cursor(s.head)), e.mainIndex);
  return i.eq(e) ? !1 : (t(n.update({ selection: i })), !0);
};
function xR(n, t) {
  let { main: e, ranges: i } = n.selection, s = n.wordAt(e.head), o = s && s.from == e.from && s.to == e.to;
  for (let u = !1, c = new Is(n.doc, t, i[i.length - 1].to); ; )
    if (c.next(), c.done) {
      if (u)
        return null;
      c = new Is(n.doc, t, 0, Math.max(0, i[i.length - 1].from - 1)), u = !0;
    } else {
      if (u && i.some((h) => h.from == c.value.from))
        continue;
      if (o) {
        let h = n.wordAt(c.value.from);
        if (!h || h.from != c.value.from || h.to != c.value.to)
          continue;
      }
      return c.value;
    }
}
const wR = ({ state: n, dispatch: t }) => {
  let { ranges: e } = n.selection;
  if (e.some((o) => o.from === o.to))
    return bR({ state: n, dispatch: t });
  let i = n.sliceDoc(e[0].from, e[0].to);
  if (n.selection.ranges.some((o) => n.sliceDoc(o.from, o.to) != i))
    return !1;
  let s = xR(n, i);
  return s ? (t(n.update({
    selection: n.selection.addRange(X.range(s.from, s.to), !1),
    effects: it.scrollIntoView(s.to)
  })), !0) : !1;
}, lr = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, {
      top: !1,
      caseSensitive: !1,
      literal: !1,
      regexp: !1,
      wholeWord: !1,
      createPanel: (t) => new _R(t),
      scrollToMatch: (t) => it.scrollIntoView(t)
    });
  }
});
class Wx {
  /**
  Create a query object.
  */
  constructor(t) {
    this.search = t.search, this.caseSensitive = !!t.caseSensitive, this.literal = !!t.literal, this.regexp = !!t.regexp, this.replace = t.replace || "", this.valid = !!this.search && (!this.regexp || cR(this.search)), this.unquoted = this.unquote(this.search), this.wholeWord = !!t.wholeWord;
  }
  /**
  @internal
  */
  unquote(t) {
    return this.literal ? t : t.replace(/\\([nrt\\])/g, (e, i) => i == "n" ? `
` : i == "r" ? "\r" : i == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(t) {
    return this.search == t.search && this.replace == t.replace && this.caseSensitive == t.caseSensitive && this.regexp == t.regexp && this.wholeWord == t.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new CR(this) : new kR(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(t, e = 0, i) {
    let s = t.doc ? t : At.create({ doc: t });
    return i == null && (i = s.doc.length), this.regexp ? qs(this, s, e, i) : zs(this, s, e, i);
  }
}
class Gx {
  constructor(t) {
    this.spec = t;
  }
}
function zs(n, t, e, i) {
  return new Is(t.doc, n.unquoted, e, i, n.caseSensitive ? void 0 : (s) => s.toLowerCase(), n.wholeWord ? TR(t.doc, t.charCategorizer(t.selection.main.head)) : void 0);
}
function TR(n, t) {
  return (e, i, s, o) => ((o > e || o + s.length < i) && (o = Math.max(0, e - 2), s = n.sliceString(o, Math.min(n.length, i + 2))), (t(wc(s, e - o)) != Yt.Word || t(Tc(s, e - o)) != Yt.Word) && (t(Tc(s, i - o)) != Yt.Word || t(wc(s, i - o)) != Yt.Word));
}
class kR extends Gx {
  constructor(t) {
    super(t);
  }
  nextMatch(t, e, i) {
    let s = zs(this.spec, t, i, t.doc.length).nextOverlapping();
    if (s.done) {
      let o = Math.min(t.doc.length, e + this.spec.unquoted.length);
      s = zs(this.spec, t, 0, o).nextOverlapping();
    }
    return s.done || s.value.from == e && s.value.to == i ? null : s.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(t, e, i) {
    for (let s = i; ; ) {
      let o = Math.max(e, s - 1e4 - this.spec.unquoted.length), u = zs(this.spec, t, o, s), c = null;
      for (; !u.nextOverlapping().done; )
        c = u.value;
      if (c)
        return c;
      if (o == e)
        return null;
      s -= 1e4;
    }
  }
  prevMatch(t, e, i) {
    let s = this.prevMatchInRange(t, 0, e);
    return s || (s = this.prevMatchInRange(t, Math.max(0, i - this.spec.unquoted.length), t.doc.length)), s && (s.from != e || s.to != i) ? s : null;
  }
  getReplacement(t) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(t, e) {
    let i = zs(this.spec, t, 0, t.doc.length), s = [];
    for (; !i.next().done; ) {
      if (s.length >= e)
        return null;
      s.push(i.value);
    }
    return s;
  }
  highlight(t, e, i, s) {
    let o = zs(this.spec, t, Math.max(0, e - this.spec.unquoted.length), Math.min(i + this.spec.unquoted.length, t.doc.length));
    for (; !o.next().done; )
      s(o.value.from, o.value.to);
  }
}
function qs(n, t, e, i) {
  return new $x(t.doc, n.search, {
    ignoreCase: !n.caseSensitive,
    test: n.wholeWord ? AR(t.charCategorizer(t.selection.main.head)) : void 0
  }, e, i);
}
function wc(n, t) {
  return n.slice(Te(n, t, !1), t);
}
function Tc(n, t) {
  return n.slice(t, Te(n, t));
}
function AR(n) {
  return (t, e, i) => !i[0].length || (n(wc(i.input, i.index)) != Yt.Word || n(Tc(i.input, i.index)) != Yt.Word) && (n(Tc(i.input, i.index + i[0].length)) != Yt.Word || n(wc(i.input, i.index + i[0].length)) != Yt.Word);
}
class CR extends Gx {
  nextMatch(t, e, i) {
    let s = qs(this.spec, t, i, t.doc.length).next();
    return s.done && (s = qs(this.spec, t, 0, e).next()), s.done ? null : s.value;
  }
  prevMatchInRange(t, e, i) {
    for (let s = 1; ; s++) {
      let o = Math.max(
        e,
        i - s * 1e4
        /* FindPrev.ChunkSize */
      ), u = qs(this.spec, t, o, i), c = null;
      for (; !u.next().done; )
        c = u.value;
      if (c && (o == e || c.from > o + 10))
        return c;
      if (o == e)
        return null;
    }
  }
  prevMatch(t, e, i) {
    return this.prevMatchInRange(t, 0, e) || this.prevMatchInRange(t, i, t.doc.length);
  }
  getReplacement(t) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (e, i) => {
      if (i == "&")
        return t.match[0];
      if (i == "$")
        return "$";
      for (let s = i.length; s > 0; s--) {
        let o = +i.slice(0, s);
        if (o > 0 && o < t.match.length)
          return t.match[o] + i.slice(s);
      }
      return e;
    });
  }
  matchAll(t, e) {
    let i = qs(this.spec, t, 0, t.doc.length), s = [];
    for (; !i.next().done; ) {
      if (s.length >= e)
        return null;
      s.push(i.value);
    }
    return s;
  }
  highlight(t, e, i, s) {
    let o = qs(this.spec, t, Math.max(
      0,
      e - 250
      /* RegExp.HighlightMargin */
    ), Math.min(i + 250, t.doc.length));
    for (; !o.next().done; )
      s(o.value.from, o.value.to);
  }
}
const No = /* @__PURE__ */ yt.define(), Mm = /* @__PURE__ */ yt.define(), ll = /* @__PURE__ */ Oe.define({
  create(n) {
    return new Vd(Fp(n).create(), null);
  },
  update(n, t) {
    for (let e of t.effects)
      e.is(No) ? n = new Vd(e.value.create(), n.panel) : e.is(Mm) && (n = new Vd(n.query, e.value ? Qm : null));
    return n;
  },
  provide: (n) => qo.from(n, (t) => t.panel)
});
class Vd {
  constructor(t, e) {
    this.query = t, this.panel = e;
  }
}
const ER = /* @__PURE__ */ ft.mark({ class: "cm-searchMatch" }), MR = /* @__PURE__ */ ft.mark({ class: "cm-searchMatch cm-searchMatch-selected" }), QR = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.view = n, this.decorations = this.highlight(n.state.field(ll));
  }
  update(n) {
    let t = n.state.field(ll);
    (t != n.startState.field(ll) || n.docChanged || n.selectionSet || n.viewportChanged) && (this.decorations = this.highlight(t));
  }
  highlight({ query: n, panel: t }) {
    if (!t || !n.spec.valid)
      return ft.none;
    let { view: e } = this, i = new Tn();
    for (let s = 0, o = e.visibleRanges, u = o.length; s < u; s++) {
      let { from: c, to: h } = o[s];
      for (; s < u - 1 && h > o[s + 1].from - 2 * 250; )
        h = o[++s].to;
      n.highlight(e.state, c, h, (p, m) => {
        let O = e.state.selection.ranges.some((y) => y.from == p && y.to == m);
        i.add(p, m, O ? MR : ER);
      });
    }
    return i.finish();
  }
}, {
  decorations: (n) => n.decorations
});
function Jo(n) {
  return (t) => {
    let e = t.state.field(ll, !1);
    return e && e.query.spec.valid ? n(t, e) : Fx(t);
  };
}
const kc = /* @__PURE__ */ Jo((n, { query: t }) => {
  let { to: e } = n.state.selection.main, i = t.nextMatch(n.state, e, e);
  if (!i)
    return !1;
  let s = X.single(i.from, i.to), o = n.state.facet(lr);
  return n.dispatch({
    selection: s,
    effects: [Rm(n, i), o.scrollToMatch(s.main, n)],
    userEvent: "select.search"
  }), Zx(n), !0;
}), Ac = /* @__PURE__ */ Jo((n, { query: t }) => {
  let { state: e } = n, { from: i } = e.selection.main, s = t.prevMatch(e, i, i);
  if (!s)
    return !1;
  let o = X.single(s.from, s.to), u = n.state.facet(lr);
  return n.dispatch({
    selection: o,
    effects: [Rm(n, s), u.scrollToMatch(o.main, n)],
    userEvent: "select.search"
  }), Zx(n), !0;
}), RR = /* @__PURE__ */ Jo((n, { query: t }) => {
  let e = t.matchAll(n.state, 1e3);
  return !e || !e.length ? !1 : (n.dispatch({
    selection: X.create(e.map((i) => X.range(i.from, i.to))),
    userEvent: "select.search.matches"
  }), !0);
}), DR = ({ state: n, dispatch: t }) => {
  let e = n.selection;
  if (e.ranges.length > 1 || e.main.empty)
    return !1;
  let { from: i, to: s } = e.main, o = [], u = 0;
  for (let c = new Is(n.doc, n.sliceDoc(i, s)); !c.next().done; ) {
    if (o.length > 1e3)
      return !1;
    c.value.from == i && (u = o.length), o.push(X.range(c.value.from, c.value.to));
  }
  return t(n.update({
    selection: X.create(o, u),
    userEvent: "select.search.matches"
  })), !0;
}, wv = /* @__PURE__ */ Jo((n, { query: t }) => {
  let { state: e } = n, { from: i, to: s } = e.selection.main;
  if (e.readOnly)
    return !1;
  let o = t.nextMatch(e, i, i);
  if (!o)
    return !1;
  let u = o, c = [], h, p, m = [];
  u.from == i && u.to == s && (p = e.toText(t.getReplacement(u)), c.push({ from: u.from, to: u.to, insert: p }), u = t.nextMatch(e, u.from, u.to), m.push(it.announce.of(e.phrase("replaced match on line $", e.doc.lineAt(i).number) + ".")));
  let O = n.state.changes(c);
  return u && (h = X.single(u.from, u.to).map(O), m.push(Rm(n, u)), m.push(e.facet(lr).scrollToMatch(h.main, n))), n.dispatch({
    changes: O,
    selection: h,
    effects: m,
    userEvent: "input.replace"
  }), !0;
}), zR = /* @__PURE__ */ Jo((n, { query: t }) => {
  if (n.state.readOnly)
    return !1;
  let e = t.matchAll(n.state, 1e9).map((s) => {
    let { from: o, to: u } = s;
    return { from: o, to: u, insert: t.getReplacement(s) };
  });
  if (!e.length)
    return !1;
  let i = n.state.phrase("replaced $ matches", e.length) + ".";
  return n.dispatch({
    changes: e,
    effects: it.announce.of(i),
    userEvent: "input.replace.all"
  }), !0;
});
function Qm(n) {
  return n.state.facet(lr).createPanel(n);
}
function Fp(n, t) {
  var e, i, s, o, u;
  let c = n.selection.main, h = c.empty || c.to > c.from + 100 ? "" : n.sliceDoc(c.from, c.to);
  if (t && !h)
    return t;
  let p = n.facet(lr);
  return new Wx({
    search: ((e = t == null ? void 0 : t.literal) !== null && e !== void 0 ? e : p.literal) ? h : h.replace(/\n/g, "\\n"),
    caseSensitive: (i = t == null ? void 0 : t.caseSensitive) !== null && i !== void 0 ? i : p.caseSensitive,
    literal: (s = t == null ? void 0 : t.literal) !== null && s !== void 0 ? s : p.literal,
    regexp: (o = t == null ? void 0 : t.regexp) !== null && o !== void 0 ? o : p.regexp,
    wholeWord: (u = t == null ? void 0 : t.wholeWord) !== null && u !== void 0 ? u : p.wholeWord
  });
}
function Yx(n) {
  let t = zo(n, Qm);
  return t && t.dom.querySelector("[main-field]");
}
function Zx(n) {
  let t = Yx(n);
  t && t == n.root.activeElement && t.select();
}
const Fx = (n) => {
  let t = n.state.field(ll, !1);
  if (t && t.panel) {
    let e = Yx(n);
    if (e && e != n.root.activeElement) {
      let i = Fp(n.state, t.query.spec);
      i.valid && n.dispatch({ effects: No.of(i) }), e.focus(), e.select();
    }
  } else
    n.dispatch({ effects: [
      Mm.of(!0),
      t ? No.of(Fp(n.state, t.query.spec)) : yt.appendConfig.of(NR)
    ] });
  return !0;
}, Kx = (n) => {
  let t = n.state.field(ll, !1);
  if (!t || !t.panel)
    return !1;
  let e = zo(n, Qm);
  return e && e.dom.contains(n.root.activeElement) && n.focus(), n.dispatch({ effects: Mm.of(!1) }), !0;
}, qR = [
  { key: "Mod-f", run: Fx, scope: "editor search-panel" },
  { key: "F3", run: kc, shift: Ac, scope: "editor search-panel", preventDefault: !0 },
  { key: "Mod-g", run: kc, shift: Ac, scope: "editor search-panel", preventDefault: !0 },
  { key: "Escape", run: Kx, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: DR },
  { key: "Mod-Alt-g", run: fR },
  { key: "Mod-d", run: wR, preventDefault: !0 }
];
class _R {
  constructor(t) {
    this.view = t;
    let e = this.query = t.state.field(ll).query.spec;
    this.commit = this.commit.bind(this), this.searchField = Ut("input", {
      value: e.search,
      placeholder: ii(t, "Find"),
      "aria-label": ii(t, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.replaceField = Ut("input", {
      value: e.replace,
      placeholder: ii(t, "Replace"),
      "aria-label": ii(t, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    }), this.caseField = Ut("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: e.caseSensitive,
      onchange: this.commit
    }), this.reField = Ut("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: e.regexp,
      onchange: this.commit
    }), this.wordField = Ut("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: e.wholeWord,
      onchange: this.commit
    });
    function i(s, o, u) {
      return Ut("button", { class: "cm-button", name: s, onclick: o, type: "button" }, u);
    }
    this.dom = Ut("div", { onkeydown: (s) => this.keydown(s), class: "cm-search" }, [
      this.searchField,
      i("next", () => kc(t), [ii(t, "next")]),
      i("prev", () => Ac(t), [ii(t, "previous")]),
      i("select", () => RR(t), [ii(t, "all")]),
      Ut("label", null, [this.caseField, ii(t, "match case")]),
      Ut("label", null, [this.reField, ii(t, "regexp")]),
      Ut("label", null, [this.wordField, ii(t, "by word")]),
      ...t.state.readOnly ? [] : [
        Ut("br"),
        this.replaceField,
        i("replace", () => wv(t), [ii(t, "replace")]),
        i("replaceAll", () => zR(t), [ii(t, "replace all")])
      ],
      Ut("button", {
        name: "close",
        onclick: () => Kx(t),
        "aria-label": ii(t, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let t = new Wx({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    t.eq(this.query) || (this.query = t, this.view.dispatch({ effects: No.of(t) }));
  }
  keydown(t) {
    XC(this.view, t, "search-panel") ? t.preventDefault() : t.keyCode == 13 && t.target == this.searchField ? (t.preventDefault(), (t.shiftKey ? Ac : kc)(this.view)) : t.keyCode == 13 && t.target == this.replaceField && (t.preventDefault(), wv(this.view));
  }
  update(t) {
    for (let e of t.transactions)
      for (let i of e.effects)
        i.is(No) && !i.value.eq(this.query) && this.setQuery(i.value);
  }
  setQuery(t) {
    this.query = t, this.searchField.value = t.search, this.replaceField.value = t.replace, this.caseField.checked = t.caseSensitive, this.reField.checked = t.regexp, this.wordField.checked = t.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(lr).top;
  }
}
function ii(n, t) {
  return n.state.phrase(t);
}
const _u = 30, Bu = /[\s\.,:;?!]/;
function Rm(n, { from: t, to: e }) {
  let i = n.state.doc.lineAt(t), s = n.state.doc.lineAt(e).to, o = Math.max(i.from, t - _u), u = Math.min(s, e + _u), c = n.state.sliceDoc(o, u);
  if (o != i.from) {
    for (let h = 0; h < _u; h++)
      if (!Bu.test(c[h + 1]) && Bu.test(c[h])) {
        c = c.slice(h);
        break;
      }
  }
  if (u != s) {
    for (let h = c.length - 1; h > c.length - _u; h--)
      if (!Bu.test(c[h - 1]) && Bu.test(c[h])) {
        c = c.slice(0, h);
        break;
      }
  }
  return it.announce.of(`${n.state.phrase("current match")}. ${c} ${n.state.phrase("on line")} ${i.number}.`);
}
const BR = /* @__PURE__ */ it.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
}), NR = [
  ll,
  /* @__PURE__ */ fl.low(QR),
  BR
];
class Jx {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(t, e, i, s) {
    this.state = t, this.pos = e, this.explicit = i, this.view = s, this.abortListeners = [], this.abortOnDocChange = !1;
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(t) {
    let e = ge(this.state).resolveInner(this.pos, -1);
    for (; e && t.indexOf(e.name) < 0; )
      e = e.parent;
    return e ? {
      from: e.from,
      to: this.pos,
      text: this.state.sliceDoc(e.from, this.pos),
      type: e.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(t) {
    let e = this.state.doc.lineAt(this.pos), i = Math.max(e.from, this.pos - 250), s = e.text.slice(i - e.from, this.pos - e.from), o = s.search(tw(t, !1));
    return o < 0 ? null : { from: i + o, to: this.pos, text: s.slice(o) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  
  By default, running queries will not be aborted for regular
  typing or backspacing, on the assumption that they are likely to
  return a result with a
  [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
  allows the result to be used after all. Passing `onDocChange:
  true` will cause this query to be aborted for any document
  change.
  */
  addEventListener(t, e, i) {
    t == "abort" && this.abortListeners && (this.abortListeners.push(e), i && i.onDocChange && (this.abortOnDocChange = !0));
  }
}
function Tv(n) {
  let t = Object.keys(n).join(""), e = /\w/.test(t);
  return e && (t = t.replace(/\w/g, "")), `[${e ? "\\w" : ""}${t.replace(/[^\w\s]/g, "\\$&")}]`;
}
function PR(n) {
  let t = /* @__PURE__ */ Object.create(null), e = /* @__PURE__ */ Object.create(null);
  for (let { label: s } of n) {
    t[s[0]] = !0;
    for (let o = 1; o < s.length; o++)
      e[s[o]] = !0;
  }
  let i = Tv(t) + Tv(e) + "*$";
  return [new RegExp("^" + i), new RegExp(i)];
}
function Ix(n) {
  let t = n.map((s) => typeof s == "string" ? { label: s } : s), [e, i] = t.every((s) => /^\w+$/.test(s.label)) ? [/\w*$/, /\w+$/] : PR(t);
  return (s) => {
    let o = s.matchBefore(i);
    return o || s.explicit ? { from: o ? o.from : s.pos, options: t, validFor: e } : null;
  };
}
function LR(n, t) {
  return (e) => {
    for (let i = ge(e.state).resolveInner(e.pos, -1); i; i = i.parent) {
      if (n.indexOf(i.name) > -1)
        return null;
      if (i.type.isTop)
        break;
    }
    return t(e);
  };
}
class kv {
  constructor(t, e, i, s) {
    this.completion = t, this.source = e, this.match = i, this.score = s;
  }
}
function Ul(n) {
  return n.selection.main.from;
}
function tw(n, t) {
  var e;
  let { source: i } = n, s = t && i[0] != "^", o = i[i.length - 1] != "$";
  return !s && !o ? n : new RegExp(`${s ? "^" : ""}(?:${i})${o ? "$" : ""}`, (e = n.flags) !== null && e !== void 0 ? e : n.ignoreCase ? "i" : "");
}
const Dm = /* @__PURE__ */ Zi.define();
function UR(n, t, e, i) {
  let { main: s } = n.selection, o = e - s.from, u = i - s.from;
  return Object.assign(Object.assign({}, n.changeByRange((c) => {
    if (c != s && e != i && n.sliceDoc(c.from + o, c.from + u) != n.sliceDoc(e, i))
      return { range: c };
    let h = n.toText(t);
    return {
      changes: { from: c.from + o, to: i == s.from ? c.to : c.from + u, insert: h },
      range: X.cursor(c.from + o + h.length)
    };
  })), { scrollIntoView: !0, userEvent: "input.complete" });
}
const Av = /* @__PURE__ */ new WeakMap();
function VR(n) {
  if (!Array.isArray(n))
    return n;
  let t = Av.get(n);
  return t || Av.set(n, t = Ix(n)), t;
}
const Cc = /* @__PURE__ */ yt.define(), Po = /* @__PURE__ */ yt.define();
class HR {
  constructor(t) {
    this.pattern = t, this.chars = [], this.folded = [], this.any = [], this.precise = [], this.byWord = [], this.score = 0, this.matched = [];
    for (let e = 0; e < t.length; ) {
      let i = Ue(t, e), s = Hi(i);
      this.chars.push(i);
      let o = t.slice(e, e + s), u = o.toUpperCase();
      this.folded.push(Ue(u == o ? o.toLowerCase() : u, 0)), e += s;
    }
    this.astral = t.length != this.chars.length;
  }
  ret(t, e) {
    return this.score = t, this.matched = e, this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(t) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (t.length < this.pattern.length)
      return null;
    let { chars: e, folded: i, any: s, precise: o, byWord: u } = this;
    if (e.length == 1) {
      let U = Ue(t, 0), W = Hi(U), Z = W == t.length ? 0 : -100;
      if (U != e[0]) if (U == i[0])
        Z += -200;
      else
        return null;
      return this.ret(Z, [0, W]);
    }
    let c = t.indexOf(this.pattern);
    if (c == 0)
      return this.ret(t.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let h = e.length, p = 0;
    if (c < 0) {
      for (let U = 0, W = Math.min(t.length, 200); U < W && p < h; ) {
        let Z = Ue(t, U);
        (Z == e[p] || Z == i[p]) && (s[p++] = U), U += Hi(Z);
      }
      if (p < h)
        return null;
    }
    let m = 0, O = 0, y = !1, S = 0, x = -1, w = -1, C = /[a-z]/.test(t), M = !0;
    for (let U = 0, W = Math.min(t.length, 200), Z = 0; U < W && O < h; ) {
      let N = Ue(t, U);
      c < 0 && (m < h && N == e[m] && (o[m++] = U), S < h && (N == e[S] || N == i[S] ? (S == 0 && (x = U), w = U + 1, S++) : S = 0));
      let Y, R = N < 255 ? N >= 48 && N <= 57 || N >= 97 && N <= 122 ? 2 : N >= 65 && N <= 90 ? 1 : 0 : (Y = nm(N)) != Y.toLowerCase() ? 1 : Y != Y.toUpperCase() ? 2 : 0;
      (!U || R == 1 && C || Z == 0 && R != 0) && (e[O] == N || i[O] == N && (y = !0) ? u[O++] = U : u.length && (M = !1)), Z = R, U += Hi(N);
    }
    return O == h && u[0] == 0 && M ? this.result(-100 + (y ? -200 : 0), u, t) : S == h && x == 0 ? this.ret(-200 - t.length + (w == t.length ? 0 : -100), [0, w]) : c > -1 ? this.ret(-700 - t.length, [c, c + this.pattern.length]) : S == h ? this.ret(-900 - t.length, [x, w]) : O == h ? this.result(-100 + (y ? -200 : 0) + -700 + (M ? 0 : -1100), u, t) : e.length == 2 ? null : this.result((s[0] ? -700 : 0) + -200 + -1100, s, t);
  }
  result(t, e, i) {
    let s = [], o = 0;
    for (let u of e) {
      let c = u + (this.astral ? Hi(Ue(i, u)) : 1);
      o && s[o - 1] == u ? s[o - 1] = c : (s[o++] = u, s[o++] = c);
    }
    return this.ret(t - i.length, s);
  }
}
class XR {
  constructor(t) {
    this.pattern = t, this.matched = [], this.score = 0, this.folded = t.toLowerCase();
  }
  match(t) {
    if (t.length < this.pattern.length)
      return null;
    let e = t.slice(0, this.pattern.length), i = e == this.pattern ? 0 : e.toLowerCase() == this.folded ? -200 : null;
    return i == null ? null : (this.matched = [0, e.length], this.score = i + (t.length == this.pattern.length ? 0 : -100), this);
  }
}
const me = /* @__PURE__ */ lt.define({
  combine(n) {
    return Fi(n, {
      activateOnTyping: !0,
      activateOnCompletion: () => !1,
      activateOnTypingDelay: 100,
      selectOnOpen: !0,
      override: null,
      closeOnBlur: !0,
      maxRenderedOptions: 100,
      defaultKeymap: !0,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: !1,
      icons: !0,
      addToOptions: [],
      positionInfo: $R,
      filterStrict: !1,
      compareCompletions: (t, e) => t.label.localeCompare(e.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (t, e) => t && e,
      closeOnBlur: (t, e) => t && e,
      icons: (t, e) => t && e,
      tooltipClass: (t, e) => (i) => Cv(t(i), e(i)),
      optionClass: (t, e) => (i) => Cv(t(i), e(i)),
      addToOptions: (t, e) => t.concat(e),
      filterStrict: (t, e) => t || e
    });
  }
});
function Cv(n, t) {
  return n ? t ? n + " " + t : n : t;
}
function $R(n, t, e, i, s, o) {
  let u = n.textDirection == jt.RTL, c = u, h = !1, p = "top", m, O, y = t.left - s.left, S = s.right - t.right, x = i.right - i.left, w = i.bottom - i.top;
  if (c && y < Math.min(x, S) ? c = !1 : !c && S < Math.min(x, y) && (c = !0), x <= (c ? y : S))
    m = Math.max(s.top, Math.min(e.top, s.bottom - w)) - t.top, O = Math.min(400, c ? y : S);
  else {
    h = !0, O = Math.min(
      400,
      (u ? t.right : s.right - t.left) - 30
      /* Info.Margin */
    );
    let U = s.bottom - t.bottom;
    U >= w || U > t.top ? m = e.bottom - t.top : (p = "bottom", m = t.bottom - e.top);
  }
  let C = (t.bottom - t.top) / o.offsetHeight, M = (t.right - t.left) / o.offsetWidth;
  return {
    style: `${p}: ${m / C}px; max-width: ${O / M}px`,
    class: "cm-completionInfo-" + (h ? u ? "left-narrow" : "right-narrow" : c ? "left" : "right")
  };
}
function jR(n) {
  let t = n.addToOptions.slice();
  return n.icons && t.push({
    render(e) {
      let i = document.createElement("div");
      return i.classList.add("cm-completionIcon"), e.type && i.classList.add(...e.type.split(/\s+/g).map((s) => "cm-completionIcon-" + s)), i.setAttribute("aria-hidden", "true"), i;
    },
    position: 20
  }), t.push({
    render(e, i, s, o) {
      let u = document.createElement("span");
      u.className = "cm-completionLabel";
      let c = e.displayLabel || e.label, h = 0;
      for (let p = 0; p < o.length; ) {
        let m = o[p++], O = o[p++];
        m > h && u.appendChild(document.createTextNode(c.slice(h, m)));
        let y = u.appendChild(document.createElement("span"));
        y.appendChild(document.createTextNode(c.slice(m, O))), y.className = "cm-completionMatchedText", h = O;
      }
      return h < c.length && u.appendChild(document.createTextNode(c.slice(h))), u;
    },
    position: 50
  }, {
    render(e) {
      if (!e.detail)
        return null;
      let i = document.createElement("span");
      return i.className = "cm-completionDetail", i.textContent = e.detail, i;
    },
    position: 80
  }), t.sort((e, i) => e.position - i.position).map((e) => e.render);
}
function Hd(n, t, e) {
  if (n <= e)
    return { from: 0, to: n };
  if (t < 0 && (t = 0), t <= n >> 1) {
    let s = Math.floor(t / e);
    return { from: s * e, to: (s + 1) * e };
  }
  let i = Math.floor((n - t) / e);
  return { from: n - (i + 1) * e, to: n - i * e };
}
class WR {
  constructor(t, e, i) {
    this.view = t, this.stateField = e, this.applyCompletion = i, this.info = null, this.infoDestroy = null, this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (h) => this.placeInfo(h),
      key: this
    }, this.space = null, this.currentClass = "";
    let s = t.state.field(e), { options: o, selected: u } = s.open, c = t.state.facet(me);
    this.optionContent = jR(c), this.optionClass = c.optionClass, this.tooltipClass = c.tooltipClass, this.range = Hd(o.length, u, c.maxRenderedOptions), this.dom = document.createElement("div"), this.dom.className = "cm-tooltip-autocomplete", this.updateTooltipClass(t.state), this.dom.addEventListener("mousedown", (h) => {
      let { options: p } = t.state.field(e).open;
      for (let m = h.target, O; m && m != this.dom; m = m.parentNode)
        if (m.nodeName == "LI" && (O = /-(\d+)$/.exec(m.id)) && +O[1] < p.length) {
          this.applyCompletion(t, p[+O[1]]), h.preventDefault();
          return;
        }
    }), this.dom.addEventListener("focusout", (h) => {
      let p = t.state.field(this.stateField, !1);
      p && p.tooltip && t.state.facet(me).closeOnBlur && h.relatedTarget != t.contentDOM && t.dispatch({ effects: Po.of(null) });
    }), this.showOptions(o, s.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(t, e) {
    this.list && this.list.remove(), this.list = this.dom.appendChild(this.createListBox(t, e, this.range)), this.list.addEventListener("scroll", () => {
      this.info && this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(t) {
    var e;
    let i = t.state.field(this.stateField), s = t.startState.field(this.stateField);
    if (this.updateTooltipClass(t.state), i != s) {
      let { options: o, selected: u, disabled: c } = i.open;
      (!s.open || s.open.options != o) && (this.range = Hd(o.length, u, t.state.facet(me).maxRenderedOptions), this.showOptions(o, i.id)), this.updateSel(), c != ((e = s.open) === null || e === void 0 ? void 0 : e.disabled) && this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!c);
    }
  }
  updateTooltipClass(t) {
    let e = this.tooltipClass(t);
    if (e != this.currentClass) {
      for (let i of this.currentClass.split(" "))
        i && this.dom.classList.remove(i);
      for (let i of e.split(" "))
        i && this.dom.classList.add(i);
      this.currentClass = e;
    }
  }
  positioned(t) {
    this.space = t, this.info && this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let t = this.view.state.field(this.stateField), e = t.open;
    if ((e.selected > -1 && e.selected < this.range.from || e.selected >= this.range.to) && (this.range = Hd(e.options.length, e.selected, this.view.state.facet(me).maxRenderedOptions), this.showOptions(e.options, t.id)), this.updateSelectedOption(e.selected)) {
      this.destroyInfo();
      let { completion: i } = e.options[e.selected], { info: s } = i;
      if (!s)
        return;
      let o = typeof s == "string" ? document.createTextNode(s) : s(i);
      if (!o)
        return;
      "then" in o ? o.then((u) => {
        u && this.view.state.field(this.stateField, !1) == t && this.addInfoPane(u, i);
      }).catch((u) => Xe(this.view.state, u, "completion info")) : this.addInfoPane(o, i);
    }
  }
  addInfoPane(t, e) {
    this.destroyInfo();
    let i = this.info = document.createElement("div");
    if (i.className = "cm-tooltip cm-completionInfo", t.nodeType != null)
      i.appendChild(t), this.infoDestroy = null;
    else {
      let { dom: s, destroy: o } = t;
      i.appendChild(s), this.infoDestroy = o || null;
    }
    this.dom.appendChild(i), this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(t) {
    let e = null;
    for (let i = this.list.firstChild, s = this.range.from; i; i = i.nextSibling, s++)
      i.nodeName != "LI" || !i.id ? s-- : s == t ? i.hasAttribute("aria-selected") || (i.setAttribute("aria-selected", "true"), e = i) : i.hasAttribute("aria-selected") && i.removeAttribute("aria-selected");
    return e && YR(this.list, e), e;
  }
  measureInfo() {
    let t = this.dom.querySelector("[aria-selected]");
    if (!t || !this.info)
      return null;
    let e = this.dom.getBoundingClientRect(), i = this.info.getBoundingClientRect(), s = t.getBoundingClientRect(), o = this.space;
    if (!o) {
      let u = this.dom.ownerDocument.documentElement;
      o = { left: 0, top: 0, right: u.clientWidth, bottom: u.clientHeight };
    }
    return s.top > Math.min(o.bottom, e.bottom) - 10 || s.bottom < Math.max(o.top, e.top) + 10 ? null : this.view.state.facet(me).positionInfo(this.view, e, s, i, o, this.dom);
  }
  placeInfo(t) {
    this.info && (t ? (t.style && (this.info.style.cssText = t.style), this.info.className = "cm-tooltip cm-completionInfo " + (t.class || "")) : this.info.style.cssText = "top: -1e6px");
  }
  createListBox(t, e, i) {
    const s = document.createElement("ul");
    s.id = e, s.setAttribute("role", "listbox"), s.setAttribute("aria-expanded", "true"), s.setAttribute("aria-label", this.view.state.phrase("Completions")), s.addEventListener("mousedown", (u) => {
      u.target == s && u.preventDefault();
    });
    let o = null;
    for (let u = i.from; u < i.to; u++) {
      let { completion: c, match: h } = t[u], { section: p } = c;
      if (p) {
        let y = typeof p == "string" ? p : p.name;
        if (y != o && (u > i.from || i.from == 0))
          if (o = y, typeof p != "string" && p.header)
            s.appendChild(p.header(p));
          else {
            let S = s.appendChild(document.createElement("completion-section"));
            S.textContent = y;
          }
      }
      const m = s.appendChild(document.createElement("li"));
      m.id = e + "-" + u, m.setAttribute("role", "option");
      let O = this.optionClass(c);
      O && (m.className = O);
      for (let y of this.optionContent) {
        let S = y(c, this.view.state, this.view, h);
        S && m.appendChild(S);
      }
    }
    return i.from && s.classList.add("cm-completionListIncompleteTop"), i.to < t.length && s.classList.add("cm-completionListIncompleteBottom"), s;
  }
  destroyInfo() {
    this.info && (this.infoDestroy && this.infoDestroy(), this.info.remove(), this.info = null);
  }
  destroy() {
    this.destroyInfo();
  }
}
function GR(n, t) {
  return (e) => new WR(e, n, t);
}
function YR(n, t) {
  let e = n.getBoundingClientRect(), i = t.getBoundingClientRect(), s = e.height / n.offsetHeight;
  i.top < e.top ? n.scrollTop -= (e.top - i.top) / s : i.bottom > e.bottom && (n.scrollTop += (i.bottom - e.bottom) / s);
}
function Ev(n) {
  return (n.boost || 0) * 100 + (n.apply ? 10 : 0) + (n.info ? 5 : 0) + (n.type ? 1 : 0);
}
function ZR(n, t) {
  let e = [], i = null, s = (p) => {
    e.push(p);
    let { section: m } = p.completion;
    if (m) {
      i || (i = []);
      let O = typeof m == "string" ? m : m.name;
      i.some((y) => y.name == O) || i.push(typeof m == "string" ? { name: O } : m);
    }
  }, o = t.facet(me);
  for (let p of n)
    if (p.hasResult()) {
      let m = p.result.getMatch;
      if (p.result.filter === !1)
        for (let O of p.result.options)
          s(new kv(O, p.source, m ? m(O) : [], 1e9 - e.length));
      else {
        let O = t.sliceDoc(p.from, p.to), y, S = o.filterStrict ? new XR(O) : new HR(O);
        for (let x of p.result.options)
          if (y = S.match(x.label)) {
            let w = x.displayLabel ? m ? m(x, y.matched) : [] : y.matched;
            s(new kv(x, p.source, w, y.score + (x.boost || 0)));
          }
      }
    }
  if (i) {
    let p = /* @__PURE__ */ Object.create(null), m = 0, O = (y, S) => {
      var x, w;
      return ((x = y.rank) !== null && x !== void 0 ? x : 1e9) - ((w = S.rank) !== null && w !== void 0 ? w : 1e9) || (y.name < S.name ? -1 : 1);
    };
    for (let y of i.sort(O))
      m -= 1e5, p[y.name] = m;
    for (let y of e) {
      let { section: S } = y.completion;
      S && (y.score += p[typeof S == "string" ? S : S.name]);
    }
  }
  let u = [], c = null, h = o.compareCompletions;
  for (let p of e.sort((m, O) => O.score - m.score || h(m.completion, O.completion))) {
    let m = p.completion;
    !c || c.label != m.label || c.detail != m.detail || c.type != null && m.type != null && c.type != m.type || c.apply != m.apply || c.boost != m.boost ? u.push(p) : Ev(p.completion) > Ev(c) && (u[u.length - 1] = p), c = p.completion;
  }
  return u;
}
class Us {
  constructor(t, e, i, s, o, u) {
    this.options = t, this.attrs = e, this.tooltip = i, this.timestamp = s, this.selected = o, this.disabled = u;
  }
  setSelected(t, e) {
    return t == this.selected || t >= this.options.length ? this : new Us(this.options, Mv(e, t), this.tooltip, this.timestamp, t, this.disabled);
  }
  static build(t, e, i, s, o, u) {
    if (s && !u && t.some((p) => p.isPending))
      return s.setDisabled();
    let c = ZR(t, e);
    if (!c.length)
      return s && t.some((p) => p.isPending) ? s.setDisabled() : null;
    let h = e.facet(me).selectOnOpen ? 0 : -1;
    if (s && s.selected != h && s.selected != -1) {
      let p = s.options[s.selected].completion;
      for (let m = 0; m < c.length; m++)
        if (c[m].completion == p) {
          h = m;
          break;
        }
    }
    return new Us(c, Mv(i, h), {
      pos: t.reduce((p, m) => m.hasResult() ? Math.min(p, m.from) : p, 1e8),
      create: eD,
      above: o.aboveCursor
    }, s ? s.timestamp : Date.now(), h, !1);
  }
  map(t) {
    return new Us(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: t.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
  setDisabled() {
    return new Us(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, !0);
  }
}
class Ec {
  constructor(t, e, i) {
    this.active = t, this.id = e, this.open = i;
  }
  static start() {
    return new Ec(IR, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(t) {
    let { state: e } = t, i = e.facet(me), o = (i.override || e.languageDataAt("autocomplete", Ul(e)).map(VR)).map((h) => (this.active.find((m) => m.source == h) || new yi(
      h,
      this.active.some(
        (m) => m.state != 0
        /* State.Inactive */
      ) ? 1 : 0
      /* State.Inactive */
    )).update(t, i));
    o.length == this.active.length && o.every((h, p) => h == this.active[p]) && (o = this.active);
    let u = this.open, c = t.effects.some((h) => h.is(zm));
    u && t.docChanged && (u = u.map(t.changes)), t.selection || o.some((h) => h.hasResult() && t.changes.touchesRange(h.from, h.to)) || !FR(o, this.active) || c ? u = Us.build(o, e, this.id, u, i, c) : u && u.disabled && !o.some((h) => h.isPending) && (u = null), !u && o.every((h) => !h.isPending) && o.some((h) => h.hasResult()) && (o = o.map((h) => h.hasResult() ? new yi(
      h.source,
      0
      /* State.Inactive */
    ) : h));
    for (let h of t.effects)
      h.is(iw) && (u = u && u.setSelected(h.value, this.id));
    return o == this.active && u == this.open ? this : new Ec(o, this.id, u);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : this.active.length ? KR : JR;
  }
}
function FR(n, t) {
  if (n == t)
    return !0;
  for (let e = 0, i = 0; ; ) {
    for (; e < n.length && !n[e].hasResult(); )
      e++;
    for (; i < t.length && !t[i].hasResult(); )
      i++;
    let s = e == n.length, o = i == t.length;
    if (s || o)
      return s == o;
    if (n[e++].result != t[i++].result)
      return !1;
  }
}
const KR = {
  "aria-autocomplete": "list"
}, JR = {};
function Mv(n, t) {
  let e = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": n
  };
  return t > -1 && (e["aria-activedescendant"] = n + "-" + t), e;
}
const IR = [];
function ew(n, t) {
  if (n.isUserEvent("input.complete")) {
    let i = n.annotation(Dm);
    if (i && t.activateOnCompletion(i))
      return 12;
  }
  let e = n.isUserEvent("input.type");
  return e && t.activateOnTyping ? 5 : e ? 1 : n.isUserEvent("delete.backward") ? 2 : n.selection ? 8 : n.docChanged ? 16 : 0;
}
class yi {
  constructor(t, e, i = !1) {
    this.source = t, this.state = e, this.explicit = i;
  }
  hasResult() {
    return !1;
  }
  get isPending() {
    return this.state == 1;
  }
  update(t, e) {
    let i = ew(t, e), s = this;
    (i & 8 || i & 16 && this.touches(t)) && (s = new yi(
      s.source,
      0
      /* State.Inactive */
    )), i & 4 && s.state == 0 && (s = new yi(
      this.source,
      1
      /* State.Pending */
    )), s = s.updateFor(t, i);
    for (let o of t.effects)
      if (o.is(Cc))
        s = new yi(s.source, 1, o.value);
      else if (o.is(Po))
        s = new yi(
          s.source,
          0
          /* State.Inactive */
        );
      else if (o.is(zm))
        for (let u of o.value)
          u.source == s.source && (s = u);
    return s;
  }
  updateFor(t, e) {
    return this.map(t.changes);
  }
  map(t) {
    return this;
  }
  touches(t) {
    return t.changes.touchesRange(Ul(t.state));
  }
}
class js extends yi {
  constructor(t, e, i, s, o, u) {
    super(t, 3, e), this.limit = i, this.result = s, this.from = o, this.to = u;
  }
  hasResult() {
    return !0;
  }
  updateFor(t, e) {
    var i;
    if (!(e & 3))
      return this.map(t.changes);
    let s = this.result;
    s.map && !t.changes.empty && (s = s.map(s, t.changes));
    let o = t.changes.mapPos(this.from), u = t.changes.mapPos(this.to, 1), c = Ul(t.state);
    if (c > u || !s || e & 2 && (Ul(t.startState) == this.from || c < this.limit))
      return new yi(
        this.source,
        e & 4 ? 1 : 0
        /* State.Inactive */
      );
    let h = t.changes.mapPos(this.limit);
    return tD(s.validFor, t.state, o, u) ? new js(this.source, this.explicit, h, s, o, u) : s.update && (s = s.update(s, o, u, new Jx(t.state, c, !1))) ? new js(this.source, this.explicit, h, s, s.from, (i = s.to) !== null && i !== void 0 ? i : Ul(t.state)) : new yi(this.source, 1, this.explicit);
  }
  map(t) {
    return t.empty ? this : (this.result.map ? this.result.map(this.result, t) : this.result) ? new js(this.source, this.explicit, t.mapPos(this.limit), this.result, t.mapPos(this.from), t.mapPos(this.to, 1)) : new yi(
      this.source,
      0
      /* State.Inactive */
    );
  }
  touches(t) {
    return t.changes.touchesRange(this.from, this.to);
  }
}
function tD(n, t, e, i) {
  if (!n)
    return !1;
  let s = t.sliceDoc(e, i);
  return typeof n == "function" ? n(s, e, i, t) : tw(n, !0).test(s);
}
const zm = /* @__PURE__ */ yt.define({
  map(n, t) {
    return n.map((e) => e.map(t));
  }
}), iw = /* @__PURE__ */ yt.define(), He = /* @__PURE__ */ Oe.define({
  create() {
    return Ec.start();
  },
  update(n, t) {
    return n.update(t);
  },
  provide: (n) => [
    ym.from(n, (t) => t.tooltip),
    it.contentAttributes.from(n, (t) => t.attrs)
  ]
});
function qm(n, t) {
  const e = t.completion.apply || t.completion.label;
  let i = n.state.field(He).active.find((s) => s.source == t.source);
  return i instanceof js ? (typeof e == "string" ? n.dispatch(Object.assign(Object.assign({}, UR(n.state, e, i.from, i.to)), { annotations: Dm.of(t.completion) })) : e(n, t.completion, i.from, i.to), !0) : !1;
}
const eD = /* @__PURE__ */ GR(He, qm);
function Nu(n, t = "option") {
  return (e) => {
    let i = e.state.field(He, !1);
    if (!i || !i.open || i.open.disabled || Date.now() - i.open.timestamp < e.state.facet(me).interactionDelay)
      return !1;
    let s = 1, o;
    t == "page" && (o = _b(e, i.open.tooltip)) && (s = Math.max(2, Math.floor(o.dom.offsetHeight / o.dom.querySelector("li").offsetHeight) - 1));
    let { length: u } = i.open.options, c = i.open.selected > -1 ? i.open.selected + s * (n ? 1 : -1) : n ? 0 : u - 1;
    return c < 0 ? c = t == "page" ? 0 : u - 1 : c >= u && (c = t == "page" ? u - 1 : 0), e.dispatch({ effects: iw.of(c) }), !0;
  };
}
const iD = (n) => {
  let t = n.state.field(He, !1);
  return n.state.readOnly || !t || !t.open || t.open.selected < 0 || t.open.disabled || Date.now() - t.open.timestamp < n.state.facet(me).interactionDelay ? !1 : qm(n, t.open.options[t.open.selected]);
}, Qv = (n) => n.state.field(He, !1) ? (n.dispatch({ effects: Cc.of(!0) }), !0) : !1, nD = (n) => {
  let t = n.state.field(He, !1);
  return !t || !t.active.some(
    (e) => e.state != 0
    /* State.Inactive */
  ) ? !1 : (n.dispatch({ effects: Po.of(null) }), !0);
};
class lD {
  constructor(t, e) {
    this.active = t, this.context = e, this.time = Date.now(), this.updates = [], this.done = void 0;
  }
}
const sD = 50, rD = 1e3, oD = /* @__PURE__ */ ee.fromClass(class {
  constructor(n) {
    this.view = n, this.debounceUpdate = -1, this.running = [], this.debounceAccept = -1, this.pendingStart = !1, this.composing = 0;
    for (let t of n.state.field(He).active)
      t.isPending && this.startQuery(t);
  }
  update(n) {
    let t = n.state.field(He), e = n.state.facet(me);
    if (!n.selectionSet && !n.docChanged && n.startState.field(He) == t)
      return;
    let i = n.transactions.some((o) => {
      let u = ew(o, e);
      return u & 8 || (o.selection || o.docChanged) && !(u & 3);
    });
    for (let o = 0; o < this.running.length; o++) {
      let u = this.running[o];
      if (i || u.context.abortOnDocChange && n.docChanged || u.updates.length + n.transactions.length > sD && Date.now() - u.time > rD) {
        for (let c of u.context.abortListeners)
          try {
            c();
          } catch (h) {
            Xe(this.view.state, h);
          }
        u.context.abortListeners = null, this.running.splice(o--, 1);
      } else
        u.updates.push(...n.transactions);
    }
    this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate), n.transactions.some((o) => o.effects.some((u) => u.is(Cc))) && (this.pendingStart = !0);
    let s = this.pendingStart ? 50 : e.activateOnTypingDelay;
    if (this.debounceUpdate = t.active.some((o) => o.isPending && !this.running.some((u) => u.active.source == o.source)) ? setTimeout(() => this.startUpdate(), s) : -1, this.composing != 0)
      for (let o of n.transactions)
        o.isUserEvent("input.type") ? this.composing = 2 : this.composing == 2 && o.selection && (this.composing = 3);
  }
  startUpdate() {
    this.debounceUpdate = -1, this.pendingStart = !1;
    let { state: n } = this.view, t = n.field(He);
    for (let e of t.active)
      e.isPending && !this.running.some((i) => i.active.source == e.source) && this.startQuery(e);
    this.running.length && t.open && t.open.disabled && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(me).updateSyncTime));
  }
  startQuery(n) {
    let { state: t } = this.view, e = Ul(t), i = new Jx(t, e, n.explicit, this.view), s = new lD(n, i);
    this.running.push(s), Promise.resolve(n.source(i)).then((o) => {
      s.context.aborted || (s.done = o || null, this.scheduleAccept());
    }, (o) => {
      this.view.dispatch({ effects: Po.of(null) }), Xe(this.view.state, o);
    });
  }
  scheduleAccept() {
    this.running.every((n) => n.done !== void 0) ? this.accept() : this.debounceAccept < 0 && (this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(me).updateSyncTime));
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var n;
    this.debounceAccept > -1 && clearTimeout(this.debounceAccept), this.debounceAccept = -1;
    let t = [], e = this.view.state.facet(me), i = this.view.state.field(He);
    for (let s = 0; s < this.running.length; s++) {
      let o = this.running[s];
      if (o.done === void 0)
        continue;
      if (this.running.splice(s--, 1), o.done) {
        let c = Ul(o.updates.length ? o.updates[0].startState : this.view.state), h = Math.min(c, o.done.from + (o.active.explicit ? 0 : 1)), p = new js(o.active.source, o.active.explicit, h, o.done, o.done.from, (n = o.done.to) !== null && n !== void 0 ? n : c);
        for (let m of o.updates)
          p = p.update(m, e);
        if (p.hasResult()) {
          t.push(p);
          continue;
        }
      }
      let u = i.active.find((c) => c.source == o.active.source);
      if (u && u.isPending)
        if (o.done == null) {
          let c = new yi(
            o.active.source,
            0
            /* State.Inactive */
          );
          for (let h of o.updates)
            c = c.update(h, e);
          c.isPending || t.push(c);
        } else
          this.startQuery(u);
    }
    (t.length || i.open && i.open.disabled) && this.view.dispatch({ effects: zm.of(t) });
  }
}, {
  eventHandlers: {
    blur(n) {
      let t = this.view.state.field(He, !1);
      if (t && t.tooltip && this.view.state.facet(me).closeOnBlur) {
        let e = t.open && _b(this.view, t.open.tooltip);
        (!e || !e.dom.contains(n.relatedTarget)) && setTimeout(() => this.view.dispatch({ effects: Po.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      this.composing == 3 && setTimeout(() => this.view.dispatch({ effects: Cc.of(!1) }), 20), this.composing = 0;
    }
  }
}), aD = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform), uD = /* @__PURE__ */ fl.highest(/* @__PURE__ */ it.domEventHandlers({
  keydown(n, t) {
    let e = t.state.field(He, !1);
    if (!e || !e.open || e.open.disabled || e.open.selected < 0 || n.key.length > 1 || n.ctrlKey && !(aD && n.altKey) || n.metaKey)
      return !1;
    let i = e.open.options[e.open.selected], s = e.active.find((u) => u.source == i.source), o = i.completion.commitCharacters || s.result.commitCharacters;
    return o && o.indexOf(n.key) > -1 && qm(t, i), !1;
  }
})), nw = /* @__PURE__ */ it.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: "400px",
    boxSizing: "border-box",
    whiteSpace: "pre-line"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: "30px" },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: "30px" },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
class cD {
  constructor(t, e, i, s) {
    this.field = t, this.line = e, this.from = i, this.to = s;
  }
}
class _m {
  constructor(t, e, i) {
    this.field = t, this.from = e, this.to = i;
  }
  map(t) {
    let e = t.mapPos(this.from, -1, we.TrackDel), i = t.mapPos(this.to, 1, we.TrackDel);
    return e == null || i == null ? null : new _m(this.field, e, i);
  }
}
class Bm {
  constructor(t, e) {
    this.lines = t, this.fieldPositions = e;
  }
  instantiate(t, e) {
    let i = [], s = [e], o = t.doc.lineAt(e), u = /^\s*/.exec(o.text)[0];
    for (let h of this.lines) {
      if (i.length) {
        let p = u, m = /^\t*/.exec(h)[0].length;
        for (let O = 0; O < m; O++)
          p += t.facet(Yo);
        s.push(e + p.length - m), h = p + h.slice(m);
      }
      i.push(h), e += h.length + 1;
    }
    let c = this.fieldPositions.map((h) => new _m(h.field, s[h.line] + h.from, s[h.line] + h.to));
    return { text: i, ranges: c };
  }
  static parse(t) {
    let e = [], i = [], s = [], o;
    for (let u of t.split(/\r\n?|\n/)) {
      for (; o = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(u); ) {
        let c = o[1] ? +o[1] : null, h = o[2] || o[3] || "", p = -1, m = h.replace(/\\[{}]/g, (O) => O[1]);
        for (let O = 0; O < e.length; O++)
          (c != null ? e[O].seq == c : m && e[O].name == m) && (p = O);
        if (p < 0) {
          let O = 0;
          for (; O < e.length && (c == null || e[O].seq != null && e[O].seq < c); )
            O++;
          e.splice(O, 0, { seq: c, name: m }), p = O;
          for (let y of s)
            y.field >= p && y.field++;
        }
        s.push(new cD(p, i.length, o.index, o.index + m.length)), u = u.slice(0, o.index) + h + u.slice(o.index + o[0].length);
      }
      u = u.replace(/\\([{}])/g, (c, h, p) => {
        for (let m of s)
          m.line == i.length && m.from > p && (m.from--, m.to--);
        return h;
      }), i.push(u);
    }
    return new Bm(i, s);
  }
}
let fD = /* @__PURE__ */ ft.widget({ widget: /* @__PURE__ */ new class extends Ki {
  toDOM() {
    let n = document.createElement("span");
    return n.className = "cm-snippetFieldPosition", n;
  }
  ignoreEvent() {
    return !1;
  }
}() }), hD = /* @__PURE__ */ ft.mark({ class: "cm-snippetField" });
class sr {
  constructor(t, e) {
    this.ranges = t, this.active = e, this.deco = ft.set(t.map((i) => (i.from == i.to ? fD : hD).range(i.from, i.to)));
  }
  map(t) {
    let e = [];
    for (let i of this.ranges) {
      let s = i.map(t);
      if (!s)
        return null;
      e.push(s);
    }
    return new sr(e, this.active);
  }
  selectionInsideField(t) {
    return t.ranges.every((e) => this.ranges.some((i) => i.field == this.active && i.from <= e.from && i.to >= e.to));
  }
}
const Io = /* @__PURE__ */ yt.define({
  map(n, t) {
    return n && n.map(t);
  }
}), dD = /* @__PURE__ */ yt.define(), Lo = /* @__PURE__ */ Oe.define({
  create() {
    return null;
  },
  update(n, t) {
    for (let e of t.effects) {
      if (e.is(Io))
        return e.value;
      if (e.is(dD) && n)
        return new sr(n.ranges, e.value);
    }
    return n && t.docChanged && (n = n.map(t.changes)), n && t.selection && !n.selectionInsideField(t.selection) && (n = null), n;
  },
  provide: (n) => it.decorations.from(n, (t) => t ? t.deco : ft.none)
});
function Nm(n, t) {
  return X.create(n.filter((e) => e.field == t).map((e) => X.range(e.from, e.to)));
}
function pD(n) {
  let t = Bm.parse(n);
  return (e, i, s, o) => {
    let { text: u, ranges: c } = t.instantiate(e.state, s), { main: h } = e.state.selection, p = {
      changes: { from: s, to: o == h.from ? h.to : o, insert: Et.of(u) },
      scrollIntoView: !0,
      annotations: i ? [Dm.of(i), se.userEvent.of("input.complete")] : void 0
    };
    if (c.length && (p.selection = Nm(c, 0)), c.some((m) => m.field > 0)) {
      let m = new sr(c, 0), O = p.effects = [Io.of(m)];
      e.state.field(Lo, !1) === void 0 && O.push(yt.appendConfig.of([Lo, vD, SD, nw]));
    }
    e.dispatch(e.state.update(p));
  };
}
function lw(n) {
  return ({ state: t, dispatch: e }) => {
    let i = t.field(Lo, !1);
    if (!i || n < 0 && i.active == 0)
      return !1;
    let s = i.active + n, o = n > 0 && !i.ranges.some((u) => u.field == s + n);
    return e(t.update({
      selection: Nm(i.ranges, s),
      effects: Io.of(o ? null : new sr(i.ranges, s)),
      scrollIntoView: !0
    })), !0;
  };
}
const mD = ({ state: n, dispatch: t }) => n.field(Lo, !1) ? (t(n.update({ effects: Io.of(null) })), !0) : !1, gD = /* @__PURE__ */ lw(1), OD = /* @__PURE__ */ lw(-1), yD = [
  { key: "Tab", run: gD, shift: OD },
  { key: "Escape", run: mD }
], Rv = /* @__PURE__ */ lt.define({
  combine(n) {
    return n.length ? n[0] : yD;
  }
}), vD = /* @__PURE__ */ fl.highest(/* @__PURE__ */ ir.compute([Rv], (n) => n.facet(Rv)));
function gn(n, t) {
  return Object.assign(Object.assign({}, t), { apply: pD(n) });
}
const SD = /* @__PURE__ */ it.domEventHandlers({
  mousedown(n, t) {
    let e = t.state.field(Lo, !1), i;
    if (!e || (i = t.posAtCoords({ x: n.clientX, y: n.clientY })) == null)
      return !1;
    let s = e.ranges.find((o) => o.from <= i && o.to >= i);
    return !s || s.field == e.active ? !1 : (t.dispatch({
      selection: Nm(e.ranges, s.field),
      effects: Io.of(e.ranges.some((o) => o.field > s.field) ? new sr(e.ranges, s.field) : null),
      scrollIntoView: !0
    }), !0);
  }
}), Uo = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
}, Pl = /* @__PURE__ */ yt.define({
  map(n, t) {
    let e = t.mapPos(n, -1, we.TrackAfter);
    return e ?? void 0;
  }
}), Pm = /* @__PURE__ */ new class extends Vl {
}();
Pm.startSide = 1;
Pm.endSide = -1;
const sw = /* @__PURE__ */ Oe.define({
  create() {
    return Rt.empty;
  },
  update(n, t) {
    if (n = n.map(t.changes), t.selection) {
      let e = t.state.doc.lineAt(t.selection.main.head);
      n = n.update({ filter: (i) => i >= e.from && i <= e.to });
    }
    for (let e of t.effects)
      e.is(Pl) && (n = n.update({ add: [Pm.range(e.value, e.value + 1)] }));
    return n;
  }
});
function bD() {
  return [wD, sw];
}
const Xd = "()[]{}<>«»»«［］｛｝";
function rw(n) {
  for (let t = 0; t < Xd.length; t += 2)
    if (Xd.charCodeAt(t) == n)
      return Xd.charAt(t + 1);
  return nm(n < 128 ? n : n + 1);
}
function ow(n, t) {
  return n.languageDataAt("closeBrackets", t)[0] || Uo;
}
const xD = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent), wD = /* @__PURE__ */ it.inputHandler.of((n, t, e, i) => {
  if ((xD ? n.composing : n.compositionStarted) || n.state.readOnly)
    return !1;
  let s = n.state.selection.main;
  if (i.length > 2 || i.length == 2 && Hi(Ue(i, 0)) == 1 || t != s.from || e != s.to)
    return !1;
  let o = AD(n.state, i);
  return o ? (n.dispatch(o), !0) : !1;
}), TD = ({ state: n, dispatch: t }) => {
  if (n.readOnly)
    return !1;
  let i = ow(n, n.selection.main.head).brackets || Uo.brackets, s = null, o = n.changeByRange((u) => {
    if (u.empty) {
      let c = CD(n.doc, u.head);
      for (let h of i)
        if (h == c && Xc(n.doc, u.head) == rw(Ue(h, 0)))
          return {
            changes: { from: u.head - h.length, to: u.head + h.length },
            range: X.cursor(u.head - h.length)
          };
    }
    return { range: s = u };
  });
  return s || t(n.update(o, { scrollIntoView: !0, userEvent: "delete.backward" })), !s;
}, kD = [
  { key: "Backspace", run: TD }
];
function AD(n, t) {
  let e = ow(n, n.selection.main.head), i = e.brackets || Uo.brackets;
  for (let s of i) {
    let o = rw(Ue(s, 0));
    if (t == s)
      return o == s ? QD(n, s, i.indexOf(s + s + s) > -1, e) : ED(n, s, o, e.before || Uo.before);
    if (t == o && aw(n, n.selection.main.from))
      return MD(n, s, o);
  }
  return null;
}
function aw(n, t) {
  let e = !1;
  return n.field(sw).between(0, n.doc.length, (i) => {
    i == t && (e = !0);
  }), e;
}
function Xc(n, t) {
  let e = n.sliceString(t, t + 2);
  return e.slice(0, Hi(Ue(e, 0)));
}
function CD(n, t) {
  let e = n.sliceString(t - 2, t);
  return Hi(Ue(e, 0)) == e.length ? e : e.slice(1);
}
function ED(n, t, e, i) {
  let s = null, o = n.changeByRange((u) => {
    if (!u.empty)
      return {
        changes: [{ insert: t, from: u.from }, { insert: e, from: u.to }],
        effects: Pl.of(u.to + t.length),
        range: X.range(u.anchor + t.length, u.head + t.length)
      };
    let c = Xc(n.doc, u.head);
    return !c || /\s/.test(c) || i.indexOf(c) > -1 ? {
      changes: { insert: t + e, from: u.head },
      effects: Pl.of(u.head + t.length),
      range: X.cursor(u.head + t.length)
    } : { range: s = u };
  });
  return s ? null : n.update(o, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function MD(n, t, e) {
  let i = null, s = n.changeByRange((o) => o.empty && Xc(n.doc, o.head) == e ? {
    changes: { from: o.head, to: o.head + e.length, insert: e },
    range: X.cursor(o.head + e.length)
  } : i = { range: o });
  return i ? null : n.update(s, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function QD(n, t, e, i) {
  let s = i.stringPrefixes || Uo.stringPrefixes, o = null, u = n.changeByRange((c) => {
    if (!c.empty)
      return {
        changes: [{ insert: t, from: c.from }, { insert: t, from: c.to }],
        effects: Pl.of(c.to + t.length),
        range: X.range(c.anchor + t.length, c.head + t.length)
      };
    let h = c.head, p = Xc(n.doc, h), m;
    if (p == t) {
      if (Dv(n, h))
        return {
          changes: { insert: t + t, from: h },
          effects: Pl.of(h + t.length),
          range: X.cursor(h + t.length)
        };
      if (aw(n, h)) {
        let y = e && n.sliceDoc(h, h + t.length * 3) == t + t + t ? t + t + t : t;
        return {
          changes: { from: h, to: h + y.length, insert: y },
          range: X.cursor(h + y.length)
        };
      }
    } else {
      if (e && n.sliceDoc(h - 2 * t.length, h) == t + t && (m = zv(n, h - 2 * t.length, s)) > -1 && Dv(n, m))
        return {
          changes: { insert: t + t + t + t, from: h },
          effects: Pl.of(h + t.length),
          range: X.cursor(h + t.length)
        };
      if (n.charCategorizer(h)(p) != Yt.Word && zv(n, h, s) > -1 && !RD(n, h, t, s))
        return {
          changes: { insert: t + t, from: h },
          effects: Pl.of(h + t.length),
          range: X.cursor(h + t.length)
        };
    }
    return { range: o = c };
  });
  return o ? null : n.update(u, {
    scrollIntoView: !0,
    userEvent: "input.type"
  });
}
function Dv(n, t) {
  let e = ge(n).resolveInner(t + 1);
  return e.parent && e.from == t;
}
function RD(n, t, e, i) {
  let s = ge(n).resolveInner(t, -1), o = i.reduce((u, c) => Math.max(u, c.length), 0);
  for (let u = 0; u < 5; u++) {
    let c = n.sliceDoc(s.from, Math.min(s.to, s.from + e.length + o)), h = c.indexOf(e);
    if (!h || h > -1 && i.indexOf(c.slice(0, h)) > -1) {
      let m = s.firstChild;
      for (; m && m.from == s.from && m.to - m.from > e.length + h; ) {
        if (n.sliceDoc(m.to - e.length, m.to) == e)
          return !1;
        m = m.firstChild;
      }
      return !0;
    }
    let p = s.to == t && s.parent;
    if (!p)
      break;
    s = p;
  }
  return !1;
}
function zv(n, t, e) {
  let i = n.charCategorizer(t);
  if (i(n.sliceDoc(t - 1, t)) != Yt.Word)
    return t;
  for (let s of e) {
    let o = t - s.length;
    if (n.sliceDoc(o, t) == s && i(n.sliceDoc(o - 1, o)) != Yt.Word)
      return o;
  }
  return -1;
}
function DD(n = {}) {
  return [
    uD,
    He,
    me.of(n),
    oD,
    zD,
    nw
  ];
}
const uw = [
  { key: "Ctrl-Space", run: Qv },
  { mac: "Alt-`", run: Qv },
  { key: "Escape", run: nD },
  { key: "ArrowDown", run: /* @__PURE__ */ Nu(!0) },
  { key: "ArrowUp", run: /* @__PURE__ */ Nu(!1) },
  { key: "PageDown", run: /* @__PURE__ */ Nu(!0, "page") },
  { key: "PageUp", run: /* @__PURE__ */ Nu(!1, "page") },
  { key: "Enter", run: iD }
], zD = /* @__PURE__ */ fl.highest(/* @__PURE__ */ ir.computeN([me], (n) => n.facet(me).defaultKeymap ? [uw] : []));
class qv {
  constructor(t, e, i) {
    this.from = t, this.to = e, this.diagnostic = i;
  }
}
class Bl {
  constructor(t, e, i) {
    this.diagnostics = t, this.panel = e, this.selected = i;
  }
  static init(t, e, i) {
    let s = i.facet(Vo).markerFilter;
    s && (t = s(t, i));
    let o = t.slice().sort((m, O) => m.from - O.from || m.to - O.to), u = new Tn(), c = [], h = 0;
    for (let m = 0; ; ) {
      let O = m == o.length ? null : o[m];
      if (!O && !c.length)
        break;
      let y, S;
      for (c.length ? (y = h, S = c.reduce((w, C) => Math.min(w, C.to), O && O.from > y ? O.from : 1e8)) : (y = O.from, S = O.to, c.push(O), m++); m < o.length; ) {
        let w = o[m];
        if (w.from == y && (w.to > w.from || w.to == y))
          c.push(w), m++, S = Math.min(w.to, S);
        else {
          S = Math.min(w.from, S);
          break;
        }
      }
      let x = WD(c);
      if (c.some((w) => w.from == w.to || w.from == w.to - 1 && i.doc.lineAt(w.from).to == w.from))
        u.add(y, y, ft.widget({
          widget: new HD(x),
          diagnostics: c.slice()
        }));
      else {
        let w = c.reduce((C, M) => M.markClass ? C + " " + M.markClass : C, "");
        u.add(y, S, ft.mark({
          class: "cm-lintRange cm-lintRange-" + x + w,
          diagnostics: c.slice(),
          inclusiveEnd: c.some((C) => C.to > S)
        }));
      }
      h = S;
      for (let w = 0; w < c.length; w++)
        c[w].to <= h && c.splice(w--, 1);
    }
    let p = u.finish();
    return new Bl(p, e, tr(p));
  }
}
function tr(n, t = null, e = 0) {
  let i = null;
  return n.between(e, 1e9, (s, o, { spec: u }) => {
    if (!(t && u.diagnostics.indexOf(t) < 0))
      if (!i)
        i = new qv(s, o, t || u.diagnostics[0]);
      else {
        if (u.diagnostics.indexOf(i.diagnostic) < 0)
          return !1;
        i = new qv(i.from, o, i.diagnostic);
      }
  }), i;
}
function qD(n, t) {
  let e = t.pos, i = t.end || e, s = n.state.facet(Vo).hideOn(n, e, i);
  if (s != null)
    return s;
  let o = n.startState.doc.lineAt(t.pos);
  return !!(n.effects.some((u) => u.is(cw)) || n.changes.touchesRange(o.from, Math.max(o.to, i)));
}
function _D(n, t) {
  return n.field(si, !1) ? t : t.concat(yt.appendConfig.of(GD));
}
const cw = /* @__PURE__ */ yt.define(), Lm = /* @__PURE__ */ yt.define(), fw = /* @__PURE__ */ yt.define(), si = /* @__PURE__ */ Oe.define({
  create() {
    return new Bl(ft.none, null, null);
  },
  update(n, t) {
    if (t.docChanged && n.diagnostics.size) {
      let e = n.diagnostics.map(t.changes), i = null, s = n.panel;
      if (n.selected) {
        let o = t.changes.mapPos(n.selected.from, 1);
        i = tr(e, n.selected.diagnostic, o) || tr(e, null, o);
      }
      !e.size && s && t.state.facet(Vo).autoPanel && (s = null), n = new Bl(e, s, i);
    }
    for (let e of t.effects)
      if (e.is(cw)) {
        let i = t.state.facet(Vo).autoPanel ? e.value.length ? Ho.open : null : n.panel;
        n = Bl.init(e.value, i, t.state);
      } else e.is(Lm) ? n = new Bl(n.diagnostics, e.value ? Ho.open : null, n.selected) : e.is(fw) && (n = new Bl(n.diagnostics, n.panel, e.value));
    return n;
  },
  provide: (n) => [
    qo.from(n, (t) => t.panel),
    it.decorations.from(n, (t) => t.diagnostics)
  ]
}), BD = /* @__PURE__ */ ft.mark({ class: "cm-lintRange cm-lintRange-active" });
function ND(n, t, e) {
  let { diagnostics: i } = n.state.field(si), s, o = -1, u = -1;
  i.between(t - (e < 0 ? 1 : 0), t + (e > 0 ? 1 : 0), (h, p, { spec: m }) => {
    if (t >= h && t <= p && (h == p || (t > h || e > 0) && (t < p || e < 0)))
      return s = m.diagnostics, o = h, u = p, !1;
  });
  let c = n.state.facet(Vo).tooltipFilter;
  return s && c && (s = c(s, n.state)), s ? {
    pos: o,
    end: u,
    above: n.state.doc.lineAt(o).to < u,
    create() {
      return { dom: PD(n, s) };
    }
  } : null;
}
function PD(n, t) {
  return Ut("ul", { class: "cm-tooltip-lint" }, t.map((e) => dw(n, e, !1)));
}
const LD = (n) => {
  let t = n.state.field(si, !1);
  (!t || !t.panel) && n.dispatch({ effects: _D(n.state, [Lm.of(!0)]) });
  let e = zo(n, Ho.open);
  return e && e.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, _v = (n) => {
  let t = n.state.field(si, !1);
  return !t || !t.panel ? !1 : (n.dispatch({ effects: Lm.of(!1) }), !0);
}, UD = (n) => {
  let t = n.state.field(si, !1);
  if (!t)
    return !1;
  let e = n.state.selection.main, i = t.diagnostics.iter(e.to + 1);
  return !i.value && (i = t.diagnostics.iter(0), !i.value || i.from == e.from && i.to == e.to) ? !1 : (n.dispatch({ selection: { anchor: i.from, head: i.to }, scrollIntoView: !0 }), !0);
}, VD = [
  { key: "Mod-Shift-m", run: LD, preventDefault: !0 },
  { key: "F8", run: UD }
], Vo = /* @__PURE__ */ lt.define({
  combine(n) {
    return Object.assign({ sources: n.map((t) => t.source).filter((t) => t != null) }, Fi(n.map((t) => t.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (t, e) => t ? e ? (i) => t(i) || e(i) : t : e
    }));
  }
});
function hw(n) {
  let t = [];
  if (n)
    t: for (let { name: e } of n) {
      for (let i = 0; i < e.length; i++) {
        let s = e[i];
        if (/[a-zA-Z]/.test(s) && !t.some((o) => o.toLowerCase() == s.toLowerCase())) {
          t.push(s);
          continue t;
        }
      }
      t.push("");
    }
  return t;
}
function dw(n, t, e) {
  var i;
  let s = e ? hw(t.actions) : [];
  return Ut("li", { class: "cm-diagnostic cm-diagnostic-" + t.severity }, Ut("span", { class: "cm-diagnosticText" }, t.renderMessage ? t.renderMessage(n) : t.message), (i = t.actions) === null || i === void 0 ? void 0 : i.map((o, u) => {
    let c = !1, h = (y) => {
      if (y.preventDefault(), c)
        return;
      c = !0;
      let S = tr(n.state.field(si).diagnostics, t);
      S && o.apply(n, S.from, S.to);
    }, { name: p } = o, m = s[u] ? p.indexOf(s[u]) : -1, O = m < 0 ? p : [
      p.slice(0, m),
      Ut("u", p.slice(m, m + 1)),
      p.slice(m + 1)
    ];
    return Ut("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: h,
      onmousedown: h,
      "aria-label": ` Action: ${p}${m < 0 ? "" : ` (access key "${s[u]})"`}.`
    }, O);
  }), t.source && Ut("div", { class: "cm-diagnosticSource" }, t.source));
}
class HD extends Ki {
  constructor(t) {
    super(), this.sev = t;
  }
  eq(t) {
    return t.sev == this.sev;
  }
  toDOM() {
    return Ut("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
  }
}
class Bv {
  constructor(t, e) {
    this.diagnostic = e, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = dw(t, e, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class Ho {
  constructor(t) {
    this.view = t, this.items = [];
    let e = (s) => {
      if (s.keyCode == 27)
        _v(this.view), this.view.focus();
      else if (s.keyCode == 38 || s.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (s.keyCode == 40 || s.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (s.keyCode == 36)
        this.moveSelection(0);
      else if (s.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (s.keyCode == 13)
        this.view.focus();
      else if (s.keyCode >= 65 && s.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: o } = this.items[this.selectedIndex], u = hw(o.actions);
        for (let c = 0; c < u.length; c++)
          if (u[c].toUpperCase().charCodeAt(0) == s.keyCode) {
            let h = tr(this.view.state.field(si).diagnostics, o);
            h && o.actions[c].apply(t, h.from, h.to);
          }
      } else
        return;
      s.preventDefault();
    }, i = (s) => {
      for (let o = 0; o < this.items.length; o++)
        this.items[o].dom.contains(s.target) && this.moveSelection(o);
    };
    this.list = Ut("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: e,
      onclick: i
    }), this.dom = Ut("div", { class: "cm-panel-lint" }, this.list, Ut("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => _v(this.view)
    }, "×")), this.update();
  }
  get selectedIndex() {
    let t = this.view.state.field(si).selected;
    if (!t)
      return -1;
    for (let e = 0; e < this.items.length; e++)
      if (this.items[e].diagnostic == t.diagnostic)
        return e;
    return -1;
  }
  update() {
    let { diagnostics: t, selected: e } = this.view.state.field(si), i = 0, s = !1, o = null, u = /* @__PURE__ */ new Set();
    for (t.between(0, this.view.state.doc.length, (c, h, { spec: p }) => {
      for (let m of p.diagnostics) {
        if (u.has(m))
          continue;
        u.add(m);
        let O = -1, y;
        for (let S = i; S < this.items.length; S++)
          if (this.items[S].diagnostic == m) {
            O = S;
            break;
          }
        O < 0 ? (y = new Bv(this.view, m), this.items.splice(i, 0, y), s = !0) : (y = this.items[O], O > i && (this.items.splice(i, O - i), s = !0)), e && y.diagnostic == e.diagnostic ? y.dom.hasAttribute("aria-selected") || (y.dom.setAttribute("aria-selected", "true"), o = y) : y.dom.hasAttribute("aria-selected") && y.dom.removeAttribute("aria-selected"), i++;
      }
    }); i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      s = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new Bv(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), s = !0), o ? (this.list.setAttribute("aria-activedescendant", o.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: o.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: c, panel: h }) => {
        let p = h.height / this.list.offsetHeight;
        c.top < h.top ? this.list.scrollTop -= (h.top - c.top) / p : c.bottom > h.bottom && (this.list.scrollTop += (c.bottom - h.bottom) / p);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), s && this.sync();
  }
  sync() {
    let t = this.list.firstChild;
    function e() {
      let i = t;
      t = i.nextSibling, i.remove();
    }
    for (let i of this.items)
      if (i.dom.parentNode == this.list) {
        for (; t != i.dom; )
          e();
        t = i.dom.nextSibling;
      } else
        this.list.insertBefore(i.dom, t);
    for (; t; )
      e();
  }
  moveSelection(t) {
    if (this.selectedIndex < 0)
      return;
    let e = this.view.state.field(si), i = tr(e.diagnostics, this.items[t].diagnostic);
    i && this.view.dispatch({
      selection: { anchor: i.from, head: i.to },
      scrollIntoView: !0,
      effects: fw.of(i)
    });
  }
  static open(t) {
    return new Ho(t);
  }
}
function XD(n, t = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t}>${encodeURIComponent(n)}</svg>')`;
}
function Pu(n) {
  return XD(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${n}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const $D = /* @__PURE__ */ it.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ Pu("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ Pu("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ Pu("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ Pu("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function jD(n) {
  return n == "error" ? 4 : n == "warning" ? 3 : n == "info" ? 2 : 1;
}
function WD(n) {
  let t = "hint", e = 1;
  for (let i of n) {
    let s = jD(i.severity);
    s > e && (e = s, t = i.severity);
  }
  return t;
}
const GD = [
  si,
  /* @__PURE__ */ it.decorations.compute([si], (n) => {
    let { selected: t, panel: e } = n.field(si);
    return !t || !e || t.from == t.to ? ft.none : ft.set([
      BD.range(t.from, t.to)
    ]);
  }),
  /* @__PURE__ */ RE(ND, { hideOn: qD }),
  $D
];
var Nv = function(t) {
  t === void 0 && (t = {});
  var {
    crosshairCursor: e = !1
  } = t, i = [];
  t.closeBracketsKeymap !== !1 && (i = i.concat(kD)), t.defaultKeymap !== !1 && (i = i.concat(aR)), t.searchKeymap !== !1 && (i = i.concat(qR)), t.historyKeymap !== !1 && (i = i.concat(OQ)), t.foldKeymap !== !1 && (i = i.concat(RM)), t.completionKeymap !== !1 && (i = i.concat(uw)), t.lintKeymap !== !1 && (i = i.concat(VD));
  var s = [];
  return t.lineNumbers !== !1 && s.push(HE()), t.highlightActiveLineGutter !== !1 && s.push(jE()), t.highlightSpecialChars !== !1 && s.push(rE()), t.history !== !1 && s.push(aQ()), t.foldGutter !== !1 && s.push(_M()), t.drawSelection !== !1 && s.push(ZC()), t.dropCursor !== !1 && s.push(tE()), t.allowMultipleSelections !== !1 && s.push(At.allowMultipleSelections.of(!0)), t.indentOnInput !== !1 && s.push(bM()), t.syntaxHighlighting !== !1 && s.push(rx(LM, {
    fallback: !0
  })), t.bracketMatching !== !1 && s.push(WM()), t.closeBrackets !== !1 && s.push(bD()), t.autocompletion !== !1 && s.push(DD()), t.rectangularSelection !== !1 && s.push(SE()), e !== !1 && s.push(wE()), t.highlightActiveLine !== !1 && s.push(hE()), t.highlightSelectionMatches !== !1 && s.push(mR()), t.tabSize && typeof t.tabSize == "number" && s.push(Yo.of(" ".repeat(t.tabSize))), s.concat([ir.of(i.flat())]).filter(Boolean);
};
const YD = "#e5c07b", Pv = "#e06c75", ZD = "#56b6c2", FD = "#ffffff", Ju = "#abb2bf", Kp = "#7d8799", KD = "#61afef", JD = "#98c379", Lv = "#d19a66", ID = "#c678dd", tz = "#21252b", Uv = "#2c313a", Vv = "#282c34", $d = "#353a42", ez = "#3E4451", Hv = "#528bff", iz = /* @__PURE__ */ it.theme({
  "&": {
    color: Ju,
    backgroundColor: Vv
  },
  ".cm-content": {
    caretColor: Hv
  },
  ".cm-cursor, .cm-dropCursor": { borderLeftColor: Hv },
  "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: ez },
  ".cm-panels": { backgroundColor: tz, color: Ju },
  ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
  ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
  ".cm-searchMatch": {
    backgroundColor: "#72a1ff59",
    outline: "1px solid #457dff"
  },
  ".cm-searchMatch.cm-searchMatch-selected": {
    backgroundColor: "#6199ff2f"
  },
  ".cm-activeLine": { backgroundColor: "#6699ff0b" },
  ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
  "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bad0f847"
  },
  ".cm-gutters": {
    backgroundColor: Vv,
    color: Kp,
    border: "none"
  },
  ".cm-activeLineGutter": {
    backgroundColor: Uv
  },
  ".cm-foldPlaceholder": {
    backgroundColor: "transparent",
    border: "none",
    color: "#ddd"
  },
  ".cm-tooltip": {
    border: "none",
    backgroundColor: $d
  },
  ".cm-tooltip .cm-tooltip-arrow:before": {
    borderTopColor: "transparent",
    borderBottomColor: "transparent"
  },
  ".cm-tooltip .cm-tooltip-arrow:after": {
    borderTopColor: $d,
    borderBottomColor: $d
  },
  ".cm-tooltip-autocomplete": {
    "& > ul > li[aria-selected]": {
      backgroundColor: Uv,
      color: Ju
    }
  }
}, { dark: !0 }), nz = /* @__PURE__ */ Fo.define([
  {
    tag: z.keyword,
    color: ID
  },
  {
    tag: [z.name, z.deleted, z.character, z.propertyName, z.macroName],
    color: Pv
  },
  {
    tag: [/* @__PURE__ */ z.function(z.variableName), z.labelName],
    color: KD
  },
  {
    tag: [z.color, /* @__PURE__ */ z.constant(z.name), /* @__PURE__ */ z.standard(z.name)],
    color: Lv
  },
  {
    tag: [/* @__PURE__ */ z.definition(z.name), z.separator],
    color: Ju
  },
  {
    tag: [z.typeName, z.className, z.number, z.changed, z.annotation, z.modifier, z.self, z.namespace],
    color: YD
  },
  {
    tag: [z.operator, z.operatorKeyword, z.url, z.escape, z.regexp, z.link, /* @__PURE__ */ z.special(z.string)],
    color: ZD
  },
  {
    tag: [z.meta, z.comment],
    color: Kp
  },
  {
    tag: z.strong,
    fontWeight: "bold"
  },
  {
    tag: z.emphasis,
    fontStyle: "italic"
  },
  {
    tag: z.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: z.link,
    color: Kp,
    textDecoration: "underline"
  },
  {
    tag: z.heading,
    fontWeight: "bold",
    color: Pv
  },
  {
    tag: [z.atom, z.bool, /* @__PURE__ */ z.special(z.variableName)],
    color: Lv
  },
  {
    tag: [z.processingInstruction, z.string, z.inserted],
    color: JD
  },
  {
    tag: z.invalid,
    color: FD
  }
]), lz = [iz, /* @__PURE__ */ rx(nz)];
var sz = it.theme({
  "&": {
    backgroundColor: "#fff"
  }
}, {
  dark: !1
}), rz = function(t) {
  t === void 0 && (t = {});
  var {
    indentWithTab: e = !0,
    editable: i = !0,
    readOnly: s = !1,
    theme: o = "light",
    placeholder: u = "",
    basicSetup: c = !0
  } = t, h = [];
  switch (e && h.unshift(ir.of([uR])), c && (typeof c == "boolean" ? h.unshift(Nv()) : h.unshift(Nv(c))), u && h.unshift(gE(u)), o) {
    case "light":
      h.push(sz);
      break;
    case "dark":
      h.push(lz);
      break;
    case "none":
      break;
    default:
      h.push(o);
      break;
  }
  return i === !1 && h.push(it.editable.of(!1)), s && h.push(At.readOnly.of(!0)), [...h];
}, oz = (n) => ({
  line: n.state.doc.lineAt(n.state.selection.main.from),
  lineCount: n.state.doc.lines,
  lineBreak: n.state.lineBreak,
  length: n.state.doc.length,
  readOnly: n.state.readOnly,
  tabSize: n.state.tabSize,
  selection: n.state.selection,
  selectionAsSingle: n.state.selection.asSingle().main,
  ranges: n.state.selection.ranges,
  selectionCode: n.state.sliceDoc(n.state.selection.main.from, n.state.selection.main.to),
  selections: n.state.selection.ranges.map((t) => n.state.sliceDoc(t.from, t.to)),
  selectedText: n.state.selection.ranges.some((t) => !t.empty)
}), Xv = Zi.define(), az = [];
function uz(n) {
  var {
    value: t,
    selection: e,
    onChange: i,
    onStatistics: s,
    onCreateEditor: o,
    onUpdate: u,
    extensions: c = az,
    autoFocus: h,
    theme: p = "light",
    height: m = null,
    minHeight: O = null,
    maxHeight: y = null,
    width: S = null,
    minWidth: x = null,
    maxWidth: w = null,
    placeholder: C = "",
    editable: M = !0,
    readOnly: U = !1,
    indentWithTab: W = !0,
    basicSetup: Z = !0,
    root: N,
    initialState: Y
  } = n, [R, K] = Qt.useState(), [G, J] = Qt.useState(), [F, V] = Qt.useState(), at = it.theme({
    "&": {
      height: m,
      minHeight: O,
      maxHeight: y,
      width: S,
      minWidth: x,
      maxWidth: w
    },
    "& .cm-scroller": {
      height: "100% !important"
    }
  }), ot = it.updateListener.of((P) => {
    if (P.docChanged && typeof i == "function" && // Fix echoing of the remote changes:
    // If transaction is market as remote we don't have to call `onChange` handler again
    !P.transactions.some((k) => k.annotation(Xv))) {
      var nt = P.state.doc, dt = nt.toString();
      i(dt, P);
    }
    s && s(oz(P));
  }), ht = rz({
    theme: p,
    editable: M,
    readOnly: U,
    placeholder: C,
    indentWithTab: W,
    basicSetup: Z
  }), _ = [ot, at, ...ht];
  return u && typeof u == "function" && _.push(it.updateListener.of(u)), _ = _.concat(c), Qt.useLayoutEffect(() => {
    if (R && !F) {
      var P = {
        doc: t,
        selection: e,
        extensions: _
      }, nt = Y ? At.fromJSON(Y.json, P, Y.fields) : At.create(P);
      if (V(nt), !G) {
        var dt = new it({
          state: nt,
          parent: R,
          root: N
        });
        J(dt), o && o(dt, nt);
      }
    }
    return () => {
      G && (V(void 0), J(void 0));
    };
  }, [R, F]), Qt.useEffect(() => {
    n.container && K(n.container);
  }, [n.container]), Qt.useEffect(() => () => {
    G && (G.destroy(), J(void 0));
  }, [G]), Qt.useEffect(() => {
    h && G && G.focus();
  }, [h, G]), Qt.useEffect(() => {
    G && G.dispatch({
      effects: yt.reconfigure.of(_)
    });
  }, [p, c, m, O, y, S, x, w, C, M, U, W, Z, i, u]), Qt.useEffect(() => {
    if (t !== void 0) {
      var P = G ? G.state.doc.toString() : "";
      G && t !== P && G.dispatch({
        changes: {
          from: 0,
          to: P.length,
          insert: t || ""
        },
        annotations: [Xv.of(!0)]
      });
    }
  }, [t, G]), {
    state: F,
    setState: V,
    view: G,
    setView: J,
    container: R,
    setContainer: K
  };
}
var jd = { exports: {} }, ho = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var $v;
function cz() {
  if ($v) return ho;
  $v = 1;
  var n = Symbol.for("react.transitional.element"), t = Symbol.for("react.fragment");
  function e(i, s, o) {
    var u = null;
    if (o !== void 0 && (u = "" + o), s.key !== void 0 && (u = "" + s.key), "key" in s) {
      o = {};
      for (var c in s)
        c !== "key" && (o[c] = s[c]);
    } else o = s;
    return s = o.ref, {
      $$typeof: n,
      type: i,
      key: u,
      ref: s !== void 0 ? s : null,
      props: o
    };
  }
  return ho.Fragment = t, ho.jsx = e, ho.jsxs = e, ho;
}
var jv;
function fz() {
  return jv || (jv = 1, jd.exports = cz()), jd.exports;
}
var hz = fz(), dz = ["className", "value", "selection", "extensions", "onChange", "onStatistics", "onCreateEditor", "onUpdate", "autoFocus", "theme", "height", "minHeight", "maxHeight", "width", "minWidth", "maxWidth", "basicSetup", "placeholder", "indentWithTab", "editable", "readOnly", "root", "initialState"], pw = /* @__PURE__ */ Qt.forwardRef((n, t) => {
  var {
    className: e,
    value: i = "",
    selection: s,
    extensions: o = [],
    onChange: u,
    onStatistics: c,
    onCreateEditor: h,
    onUpdate: p,
    autoFocus: m,
    theme: O = "light",
    height: y,
    minHeight: S,
    maxHeight: x,
    width: w,
    minWidth: C,
    maxWidth: M,
    basicSetup: U,
    placeholder: W,
    indentWithTab: Z,
    editable: N,
    readOnly: Y,
    root: R,
    initialState: K
  } = n, G = $2(n, dz), J = Qt.useRef(null), {
    state: F,
    view: V,
    container: at,
    setContainer: ot
  } = uz({
    root: R,
    value: i,
    autoFocus: m,
    theme: O,
    height: y,
    minHeight: S,
    maxHeight: x,
    width: w,
    minWidth: C,
    maxWidth: M,
    basicSetup: U,
    placeholder: W,
    indentWithTab: Z,
    editable: N,
    readOnly: Y,
    selection: s,
    onChange: u,
    onStatistics: c,
    onCreateEditor: h,
    onUpdate: p,
    extensions: o,
    initialState: K
  });
  Qt.useImperativeHandle(t, () => ({
    editor: J.current,
    state: F,
    view: V
  }), [J, at, F, V]);
  var ht = Qt.useCallback((P) => {
    J.current = P, ot(P);
  }, [ot]);
  if (typeof i != "string")
    throw new Error("value must be typeof string but got " + typeof i);
  var _ = typeof O == "string" ? "cm-theme-" + O : "cm-theme";
  return /* @__PURE__ */ hz.jsx("div", ip({
    ref: ht,
    className: "" + _ + (e ? " " + e : "")
  }, G));
});
pw.displayName = "CodeMirror";
var Wv = {};
class Mc {
  /**
  @internal
  */
  constructor(t, e, i, s, o, u, c, h, p, m = 0, O) {
    this.p = t, this.stack = e, this.state = i, this.reducePos = s, this.pos = o, this.score = u, this.buffer = c, this.bufferBase = h, this.curContext = p, this.lookAhead = m, this.parent = O;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((t, e) => e % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(t, e, i = 0) {
    let s = t.parser.context;
    return new Mc(t, [], e, i, i, 0, [], 0, s ? new Gv(s, s.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(t, e) {
    this.stack.push(this.state, e, this.bufferBase + this.buffer.length), this.state = t;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(t) {
    var e;
    let i = t >> 19, s = t & 65535, { parser: o } = this.p, u = this.reducePos < this.pos - 25;
    u && this.setLookAhead(this.pos);
    let c = o.dynamicPrecedence(s);
    if (c && (this.score += c), i == 0) {
      this.pushState(o.getGoto(this.state, s, !0), this.reducePos), s < o.minRepeatTerm && this.storeNode(s, this.reducePos, this.reducePos, u ? 8 : 4, !0), this.reduceContext(s, this.reducePos);
      return;
    }
    let h = this.stack.length - (i - 1) * 3 - (t & 262144 ? 6 : 0), p = h ? this.stack[h - 2] : this.p.ranges[0].from, m = this.reducePos - p;
    m >= 2e3 && !(!((e = this.p.parser.nodeSet.types[s]) === null || e === void 0) && e.isAnonymous) && (p == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = m) : this.p.lastBigReductionSize < m && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = p, this.p.lastBigReductionSize = m));
    let O = h ? this.stack[h - 1] : 0, y = this.bufferBase + this.buffer.length - O;
    if (s < o.minRepeatTerm || t & 131072) {
      let S = o.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(s, p, S, y + 4, !0);
    }
    if (t & 262144)
      this.state = this.stack[h];
    else {
      let S = this.stack[h - 3];
      this.state = o.getGoto(S, s, !0);
    }
    for (; this.stack.length > h; )
      this.stack.pop();
    this.reduceContext(s, p);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(t, e, i, s = 4, o = !1) {
    if (t == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let u = this, c = this.buffer.length;
      if (c == 0 && u.parent && (c = u.bufferBase - u.parent.bufferBase, u = u.parent), c > 0 && u.buffer[c - 4] == 0 && u.buffer[c - 1] > -1) {
        if (e == i)
          return;
        if (u.buffer[c - 2] >= e) {
          u.buffer[c - 2] = i;
          return;
        }
      }
    }
    if (!o || this.pos == i)
      this.buffer.push(t, e, i, s);
    else {
      let u = this.buffer.length;
      if (u > 0 && this.buffer[u - 4] != 0) {
        let c = !1;
        for (let h = u; h > 0 && this.buffer[h - 2] > i; h -= 4)
          if (this.buffer[h - 1] >= 0) {
            c = !0;
            break;
          }
        if (c)
          for (; u > 0 && this.buffer[u - 2] > i; )
            this.buffer[u] = this.buffer[u - 4], this.buffer[u + 1] = this.buffer[u - 3], this.buffer[u + 2] = this.buffer[u - 2], this.buffer[u + 3] = this.buffer[u - 1], u -= 4, s > 4 && (s -= 4);
      }
      this.buffer[u] = t, this.buffer[u + 1] = e, this.buffer[u + 2] = i, this.buffer[u + 3] = s;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(t, e, i, s) {
    if (t & 131072)
      this.pushState(t & 65535, this.pos);
    else if ((t & 262144) == 0) {
      let o = t, { parser: u } = this.p;
      (s > this.pos || e <= u.maxNode) && (this.pos = s, u.stateFlag(
        o,
        1
        /* StateFlag.Skipped */
      ) || (this.reducePos = s)), this.pushState(o, i), this.shiftContext(e, i), e <= u.maxNode && this.buffer.push(e, i, s, 4);
    } else
      this.pos = s, this.shiftContext(e, i), e <= this.p.parser.maxNode && this.buffer.push(e, i, s, 4);
  }
  // Apply an action
  /**
  @internal
  */
  apply(t, e, i, s) {
    t & 65536 ? this.reduce(t) : this.shift(t, e, i, s);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(t, e) {
    let i = this.p.reused.length - 1;
    (i < 0 || this.p.reused[i] != t) && (this.p.reused.push(t), i++);
    let s = this.pos;
    this.reducePos = this.pos = s + t.length, this.pushState(e, s), this.buffer.push(
      i,
      s,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, t, this, this.p.stream.reset(this.pos - t.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let t = this, e = t.buffer.length;
    for (; e > 0 && t.buffer[e - 2] > t.reducePos; )
      e -= 4;
    let i = t.buffer.slice(e), s = t.bufferBase + e;
    for (; t && s == t.bufferBase; )
      t = t.parent;
    return new Mc(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i, s, this.curContext, this.lookAhead, t);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(t, e) {
    let i = t <= this.p.parser.maxNode;
    i && this.storeNode(t, this.pos, e, 4), this.storeNode(0, this.pos, e, i ? 8 : 4), this.pos = this.reducePos = e, this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(t) {
    for (let e = new pz(this); ; ) {
      let i = this.p.parser.stateSlot(
        e.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(e.state, t);
      if (i == 0)
        return !1;
      if ((i & 65536) == 0)
        return !0;
      e.reduce(i);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(t) {
    if (this.stack.length >= 300)
      return [];
    let e = this.p.parser.nextStates(this.state);
    if (e.length > 8 || this.stack.length >= 120) {
      let s = [];
      for (let o = 0, u; o < e.length; o += 2)
        (u = e[o + 1]) != this.state && this.p.parser.hasAction(u, t) && s.push(e[o], u);
      if (this.stack.length < 120)
        for (let o = 0; s.length < 8 && o < e.length; o += 2) {
          let u = e[o + 1];
          s.some((c, h) => h & 1 && c == u) || s.push(e[o], u);
        }
      e = s;
    }
    let i = [];
    for (let s = 0; s < e.length && i.length < 4; s += 2) {
      let o = e[s + 1];
      if (o == this.state)
        continue;
      let u = this.split();
      u.pushState(o, this.pos), u.storeNode(0, u.pos, u.pos, 4, !0), u.shiftContext(e[s], this.pos), u.reducePos = this.pos, u.score -= 200, i.push(u);
    }
    return i;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: t } = this.p, e = t.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((e & 65536) == 0)
      return !1;
    if (!t.validAction(this.state, e)) {
      let i = e >> 19, s = e & 65535, o = this.stack.length - i * 3;
      if (o < 0 || t.getGoto(this.stack[o], s, !1) < 0) {
        let u = this.findForcedReduction();
        if (u == null)
          return !1;
        e = u;
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(e), !0;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: t } = this.p, e = [], i = (s, o) => {
      if (!e.includes(s))
        return e.push(s), t.allActions(s, (u) => {
          if (!(u & 393216)) if (u & 65536) {
            let c = (u >> 19) - o;
            if (c > 1) {
              let h = u & 65535, p = this.stack.length - c * 3;
              if (p >= 0 && t.getGoto(this.stack[p], h, !1) >= 0)
                return c << 19 | 65536 | h;
            }
          } else {
            let c = i(u, o + 1);
            if (c != null)
              return c;
          }
        });
    };
    return i(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0);
        break;
      }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return !1;
    let { parser: t } = this.p;
    return t.data[t.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !t.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0), this.state = this.stack[0], this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(t) {
    if (this.state != t.state || this.stack.length != t.stack.length)
      return !1;
    for (let e = 0; e < this.stack.length; e += 3)
      if (this.stack[e] != t.stack[e])
        return !1;
    return !0;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(t) {
    return this.p.parser.dialect.flags[t];
  }
  shiftContext(t, e) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, t, this, this.p.stream.reset(e)));
  }
  reduceContext(t, e) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, t, this, this.p.stream.reset(e)));
  }
  /**
  @internal
  */
  emitContext() {
    let t = this.buffer.length - 1;
    (t < 0 || this.buffer[t] != -3) && this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let t = this.buffer.length - 1;
    (t < 0 || this.buffer[t] != -4) && this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(t) {
    if (t != this.curContext.context) {
      let e = new Gv(this.curContext.tracker, t);
      e.hash != this.curContext.hash && this.emitContext(), this.curContext = e;
    }
  }
  /**
  @internal
  */
  setLookAhead(t) {
    t > this.lookAhead && (this.emitLookAhead(), this.lookAhead = t);
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class Gv {
  constructor(t, e) {
    this.tracker = t, this.context = e, this.hash = t.strict ? t.hash(e) : 0;
  }
}
class pz {
  constructor(t) {
    this.start = t, this.state = t.state, this.stack = t.stack, this.base = this.stack.length;
  }
  reduce(t) {
    let e = t & 65535, i = t >> 19;
    i == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i - 1) * 3;
    let s = this.start.p.parser.getGoto(this.stack[this.base - 3], e, !0);
    this.state = s;
  }
}
class Qc {
  constructor(t, e, i) {
    this.stack = t, this.pos = e, this.index = i, this.buffer = t.buffer, this.index == 0 && this.maybeNext();
  }
  static create(t, e = t.bufferBase + t.buffer.length) {
    return new Qc(t, e, e - t.bufferBase);
  }
  maybeNext() {
    let t = this.stack.parent;
    t != null && (this.index = this.stack.bufferBase - t.bufferBase, this.stack = t, this.buffer = t.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new Qc(this.stack, this.pos, this.index);
  }
}
function Lu(n, t = Uint16Array) {
  if (typeof n != "string")
    return n;
  let e = null;
  for (let i = 0, s = 0; i < n.length; ) {
    let o = 0;
    for (; ; ) {
      let u = n.charCodeAt(i++), c = !1;
      if (u == 126) {
        o = 65535;
        break;
      }
      u >= 92 && u--, u >= 34 && u--;
      let h = u - 32;
      if (h >= 46 && (h -= 46, c = !0), o += h, c)
        break;
      o *= 46;
    }
    e ? e[s++] = o : e = new t(o);
  }
  return e;
}
class Iu {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const Yv = new Iu();
class mz {
  /**
  @internal
  */
  constructor(t, e) {
    this.input = t, this.ranges = e, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = Yv, this.rangeIndex = 0, this.pos = this.chunkPos = e[0].from, this.range = e[0], this.end = e[e.length - 1].to, this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(t, e) {
    let i = this.range, s = this.rangeIndex, o = this.pos + t;
    for (; o < i.from; ) {
      if (!s)
        return null;
      let u = this.ranges[--s];
      o -= i.from - u.to, i = u;
    }
    for (; e < 0 ? o > i.to : o >= i.to; ) {
      if (s == this.ranges.length - 1)
        return null;
      let u = this.ranges[++s];
      o += u.from - i.to, i = u;
    }
    return o;
  }
  /**
  @internal
  */
  clipPos(t) {
    if (t >= this.range.from && t < this.range.to)
      return t;
    for (let e of this.ranges)
      if (e.to > t)
        return Math.max(t, e.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(t) {
    let e = this.chunkOff + t, i, s;
    if (e >= 0 && e < this.chunk.length)
      i = this.pos + t, s = this.chunk.charCodeAt(e);
    else {
      let o = this.resolveOffset(t, 1);
      if (o == null)
        return -1;
      if (i = o, i >= this.chunk2Pos && i < this.chunk2Pos + this.chunk2.length)
        s = this.chunk2.charCodeAt(i - this.chunk2Pos);
      else {
        let u = this.rangeIndex, c = this.range;
        for (; c.to <= i; )
          c = this.ranges[++u];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i), i + this.chunk2.length > c.to && (this.chunk2 = this.chunk2.slice(0, c.to - i)), s = this.chunk2.charCodeAt(0);
      }
    }
    return i >= this.token.lookAhead && (this.token.lookAhead = i + 1), s;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(t, e = 0) {
    let i = e ? this.resolveOffset(e, -1) : this.pos;
    if (i == null || i < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = t, this.token.end = i;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(t, e) {
    this.token.value = t, this.token.end = e;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: t, chunkPos: e } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = t, this.chunk2Pos = e, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let t = this.input.chunk(this.pos), e = this.pos + t.length;
      this.chunk = e > this.range.to ? t.slice(0, this.range.to - this.pos) : t, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(t = 1) {
    for (this.chunkOff += t; this.pos + t >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      t -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += t, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  /**
  @internal
  */
  reset(t, e) {
    if (e ? (this.token = e, e.start = t, e.lookAhead = t + 1, e.value = e.extended = -1) : this.token = Yv, this.pos != t) {
      if (this.pos = t, t == this.end)
        return this.setDone(), this;
      for (; t < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; t >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      t >= this.chunkPos && t < this.chunkPos + this.chunk.length ? this.chunkOff = t - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(t, e) {
    if (t >= this.chunkPos && e <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(t - this.chunkPos, e - this.chunkPos);
    if (t >= this.chunk2Pos && e <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(t - this.chunk2Pos, e - this.chunk2Pos);
    if (t >= this.range.from && e <= this.range.to)
      return this.input.read(t, e);
    let i = "";
    for (let s of this.ranges) {
      if (s.from >= e)
        break;
      s.to > t && (i += this.input.read(Math.max(s.from, t), Math.min(s.to, e)));
    }
    return i;
  }
}
class Ws {
  constructor(t, e) {
    this.data = t, this.id = e;
  }
  token(t, e) {
    let { parser: i } = e.p;
    gz(this.data, t, e, this.id, i.data, i.tokenPrecTable);
  }
}
Ws.prototype.contextual = Ws.prototype.fallback = Ws.prototype.extend = !1;
Ws.prototype.fallback = Ws.prototype.extend = !1;
class $c {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(t, e = {}) {
    this.token = t, this.contextual = !!e.contextual, this.fallback = !!e.fallback, this.extend = !!e.extend;
  }
}
function gz(n, t, e, i, s, o) {
  let u = 0, c = 1 << i, { dialect: h } = e.p.parser;
  t: for (; (c & n[u]) != 0; ) {
    let p = n[u + 1];
    for (let S = u + 3; S < p; S += 2)
      if ((n[S + 1] & c) > 0) {
        let x = n[S];
        if (h.allows(x) && (t.token.value == -1 || t.token.value == x || Oz(x, t.token.value, s, o))) {
          t.acceptToken(x);
          break;
        }
      }
    let m = t.next, O = 0, y = n[u + 2];
    if (t.next < 0 && y > O && n[p + y * 3 - 3] == 65535) {
      u = n[p + y * 3 - 1];
      continue t;
    }
    for (; O < y; ) {
      let S = O + y >> 1, x = p + S + (S << 1), w = n[x], C = n[x + 1] || 65536;
      if (m < w)
        y = S;
      else if (m >= C)
        O = S + 1;
      else {
        u = n[x + 2], t.advance();
        continue t;
      }
    }
    break;
  }
}
function Zv(n, t, e) {
  for (let i = t, s; (s = n[i]) != 65535; i++)
    if (s == e)
      return i - t;
  return -1;
}
function Oz(n, t, e, i) {
  let s = Zv(e, i, t);
  return s < 0 || Zv(e, i, n) < s;
}
const ni = typeof process < "u" && Wv && /\bparse\b/.test(Wv.LOG);
let Wd = null;
function Fv(n, t, e) {
  let i = n.cursor(ce.IncludeAnonymous);
  for (i.moveTo(t); ; )
    if (!(e < 0 ? i.childBefore(t) : i.childAfter(t)))
      for (; ; ) {
        if ((e < 0 ? i.to < t : i.from > t) && !i.type.isError)
          return e < 0 ? Math.max(0, Math.min(
            i.to - 1,
            t - 25
            /* Lookahead.Margin */
          )) : Math.min(n.length, Math.max(
            i.from + 1,
            t + 25
            /* Lookahead.Margin */
          ));
        if (e < 0 ? i.prevSibling() : i.nextSibling())
          break;
        if (!i.parent())
          return e < 0 ? 0 : n.length;
      }
}
class yz {
  constructor(t, e) {
    this.fragments = t, this.nodeSet = e, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let t = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (t) {
      for (this.safeFrom = t.openStart ? Fv(t.tree, t.from + t.offset, 1) - t.offset : t.from, this.safeTo = t.openEnd ? Fv(t.tree, t.to + t.offset, -1) - t.offset : t.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(t.tree), this.start.push(-t.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(t) {
    if (t < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= t; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let e = this.trees.length - 1;
      if (e < 0)
        return this.nextFragment(), null;
      let i = this.trees[e], s = this.index[e];
      if (s == i.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let o = i.children[s], u = this.start[e] + i.positions[s];
      if (u > t)
        return this.nextStart = u, null;
      if (o instanceof re) {
        if (u == t) {
          if (u < this.safeFrom)
            return null;
          let c = u + o.length;
          if (c <= this.safeTo) {
            let h = o.prop(wt.lookAhead);
            if (!h || c + h < this.fragment.to)
              return o;
          }
        }
        this.index[e]++, u + o.length >= Math.max(this.safeFrom, t) && (this.trees.push(o), this.start.push(u), this.index.push(0));
      } else
        this.index[e]++, this.nextStart = u + o.length;
    }
  }
}
class vz {
  constructor(t, e) {
    this.stream = e, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = t.tokenizers.map((i) => new Iu());
  }
  getActions(t) {
    let e = 0, i = null, { parser: s } = t.p, { tokenizers: o } = s, u = s.stateSlot(
      t.state,
      3
      /* ParseState.TokenizerMask */
    ), c = t.curContext ? t.curContext.hash : 0, h = 0;
    for (let p = 0; p < o.length; p++) {
      if ((1 << p & u) == 0)
        continue;
      let m = o[p], O = this.tokens[p];
      if (!(i && !m.fallback) && ((m.contextual || O.start != t.pos || O.mask != u || O.context != c) && (this.updateCachedToken(O, m, t), O.mask = u, O.context = c), O.lookAhead > O.end + 25 && (h = Math.max(O.lookAhead, h)), O.value != 0)) {
        let y = e;
        if (O.extended > -1 && (e = this.addActions(t, O.extended, O.end, e)), e = this.addActions(t, O.value, O.end, e), !m.extend && (i = O, e > y))
          break;
      }
    }
    for (; this.actions.length > e; )
      this.actions.pop();
    return h && t.setLookAhead(h), !i && t.pos == this.stream.end && (i = new Iu(), i.value = t.p.parser.eofTerm, i.start = i.end = t.pos, e = this.addActions(t, i.value, i.end, e)), this.mainToken = i, this.actions;
  }
  getMainToken(t) {
    if (this.mainToken)
      return this.mainToken;
    let e = new Iu(), { pos: i, p: s } = t;
    return e.start = i, e.end = Math.min(i + 1, s.stream.end), e.value = i == s.stream.end ? s.parser.eofTerm : 0, e;
  }
  updateCachedToken(t, e, i) {
    let s = this.stream.clipPos(i.pos);
    if (e.token(this.stream.reset(s, t), i), t.value > -1) {
      let { parser: o } = i.p;
      for (let u = 0; u < o.specialized.length; u++)
        if (o.specialized[u] == t.value) {
          let c = o.specializers[u](this.stream.read(t.start, t.end), i);
          if (c >= 0 && i.p.parser.dialect.allows(c >> 1)) {
            (c & 1) == 0 ? t.value = c >> 1 : t.extended = c >> 1;
            break;
          }
        }
    } else
      t.value = 0, t.end = this.stream.clipPos(s + 1);
  }
  putAction(t, e, i, s) {
    for (let o = 0; o < s; o += 3)
      if (this.actions[o] == t)
        return s;
    return this.actions[s++] = t, this.actions[s++] = e, this.actions[s++] = i, s;
  }
  addActions(t, e, i, s) {
    let { state: o } = t, { parser: u } = t.p, { data: c } = u;
    for (let h = 0; h < 2; h++)
      for (let p = u.stateSlot(
        o,
        h ? 2 : 1
        /* ParseState.Actions */
      ); ; p += 3) {
        if (c[p] == 65535)
          if (c[p + 1] == 1)
            p = bn(c, p + 2);
          else {
            s == 0 && c[p + 1] == 2 && (s = this.putAction(bn(c, p + 2), e, i, s));
            break;
          }
        c[p] == e && (s = this.putAction(bn(c, p + 1), e, i, s));
      }
    return s;
  }
}
class Sz {
  constructor(t, e, i, s) {
    this.parser = t, this.input = e, this.ranges = s, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new mz(e, s), this.tokens = new vz(t, this.stream), this.topTerm = t.top[1];
    let { from: o } = s[0];
    this.stacks = [Mc.start(this, t.top[0], o)], this.fragments = i.length && this.stream.end - o > t.bufferLength * 4 ? new yz(i, t.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let t = this.stacks, e = this.minStackPos, i = this.stacks = [], s, o;
    if (this.bigReductionCount > 300 && t.length == 1) {
      let [u] = t;
      for (; u.forceReduce() && u.stack.length && u.stack[u.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let u = 0; u < t.length; u++) {
      let c = t[u];
      for (; ; ) {
        if (this.tokens.mainToken = null, c.pos > e)
          i.push(c);
        else {
          if (this.advanceStack(c, i, t))
            continue;
          {
            s || (s = [], o = []), s.push(c);
            let h = this.tokens.getMainToken(c);
            o.push(h.value, h.end);
          }
        }
        break;
      }
    }
    if (!i.length) {
      let u = s && wz(s);
      if (u)
        return ni && console.log("Finish with " + this.stackID(u)), this.stackToTree(u);
      if (this.parser.strict)
        throw ni && s && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + e);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && s) {
      let u = this.stoppedAt != null && s[0].pos > this.stoppedAt ? s[0] : this.runRecovery(s, o, i);
      if (u)
        return ni && console.log("Force-finish " + this.stackID(u)), this.stackToTree(u.forceAll());
    }
    if (this.recovering) {
      let u = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i.length > u)
        for (i.sort((c, h) => h.score - c.score); i.length > u; )
          i.pop();
      i.some((c) => c.reducePos > e) && this.recovering--;
    } else if (i.length > 1) {
      t: for (let u = 0; u < i.length - 1; u++) {
        let c = i[u];
        for (let h = u + 1; h < i.length; h++) {
          let p = i[h];
          if (c.sameState(p) || c.buffer.length > 500 && p.buffer.length > 500)
            if ((c.score - p.score || c.buffer.length - p.buffer.length) > 0)
              i.splice(h--, 1);
            else {
              i.splice(u--, 1);
              continue t;
            }
        }
      }
      i.length > 12 && i.splice(
        12,
        i.length - 12
        /* Rec.MaxStackCount */
      );
    }
    this.minStackPos = i[0].pos;
    for (let u = 1; u < i.length; u++)
      i[u].pos < this.minStackPos && (this.minStackPos = i[u].pos);
    return null;
  }
  stopAt(t) {
    if (this.stoppedAt != null && this.stoppedAt < t)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = t;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(t, e, i) {
    let s = t.pos, { parser: o } = this, u = ni ? this.stackID(t) + " -> " : "";
    if (this.stoppedAt != null && s > this.stoppedAt)
      return t.forceReduce() ? t : null;
    if (this.fragments) {
      let p = t.curContext && t.curContext.tracker.strict, m = p ? t.curContext.hash : 0;
      for (let O = this.fragments.nodeAt(s); O; ) {
        let y = this.parser.nodeSet.types[O.type.id] == O.type ? o.getGoto(t.state, O.type.id) : -1;
        if (y > -1 && O.length && (!p || (O.prop(wt.contextHash) || 0) == m))
          return t.useNode(O, y), ni && console.log(u + this.stackID(t) + ` (via reuse of ${o.getName(O.type.id)})`), !0;
        if (!(O instanceof re) || O.children.length == 0 || O.positions[0] > 0)
          break;
        let S = O.children[0];
        if (S instanceof re && O.positions[0] == 0)
          O = S;
        else
          break;
      }
    }
    let c = o.stateSlot(
      t.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (c > 0)
      return t.reduce(c), ni && console.log(u + this.stackID(t) + ` (via always-reduce ${o.getName(
        c & 65535
        /* Action.ValueMask */
      )})`), !0;
    if (t.stack.length >= 8400)
      for (; t.stack.length > 6e3 && t.forceReduce(); )
        ;
    let h = this.tokens.getActions(t);
    for (let p = 0; p < h.length; ) {
      let m = h[p++], O = h[p++], y = h[p++], S = p == h.length || !i, x = S ? t : t.split(), w = this.tokens.mainToken;
      if (x.apply(m, O, w ? w.start : x.pos, y), ni && console.log(u + this.stackID(x) + ` (via ${(m & 65536) == 0 ? "shift" : `reduce of ${o.getName(
        m & 65535
        /* Action.ValueMask */
      )}`} for ${o.getName(O)} @ ${s}${x == t ? "" : ", split"})`), S)
        return !0;
      x.pos > s ? e.push(x) : i.push(x);
    }
    return !1;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(t, e) {
    let i = t.pos;
    for (; ; ) {
      if (!this.advanceStack(t, null, null))
        return !1;
      if (t.pos > i)
        return Kv(t, e), !0;
    }
  }
  runRecovery(t, e, i) {
    let s = null, o = !1;
    for (let u = 0; u < t.length; u++) {
      let c = t[u], h = e[u << 1], p = e[(u << 1) + 1], m = ni ? this.stackID(c) + " -> " : "";
      if (c.deadEnd && (o || (o = !0, c.restart(), ni && console.log(m + this.stackID(c) + " (restarted)"), this.advanceFully(c, i))))
        continue;
      let O = c.split(), y = m;
      for (let S = 0; O.forceReduce() && S < 10 && (ni && console.log(y + this.stackID(O) + " (via force-reduce)"), !this.advanceFully(O, i)); S++)
        ni && (y = this.stackID(O) + " -> ");
      for (let S of c.recoverByInsert(h))
        ni && console.log(m + this.stackID(S) + " (via recover-insert)"), this.advanceFully(S, i);
      this.stream.end > c.pos ? (p == c.pos && (p++, h = 0), c.recoverByDelete(h, p), ni && console.log(m + this.stackID(c) + ` (via recover-delete ${this.parser.getName(h)})`), Kv(c, i)) : (!s || s.score < c.score) && (s = c);
    }
    return s;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(t) {
    return t.close(), re.build({
      buffer: Qc.create(t),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: t.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(t) {
    let e = (Wd || (Wd = /* @__PURE__ */ new WeakMap())).get(t);
    return e || Wd.set(t, e = String.fromCodePoint(this.nextStackID++)), e + t;
  }
}
function Kv(n, t) {
  for (let e = 0; e < t.length; e++) {
    let i = t[e];
    if (i.pos == n.pos && i.sameState(n)) {
      t[e].score < n.score && (t[e] = n);
      return;
    }
  }
  t.push(n);
}
class bz {
  constructor(t, e, i) {
    this.source = t, this.flags = e, this.disabled = i;
  }
  allows(t) {
    return !this.disabled || this.disabled[t] == 0;
  }
}
const Gd = (n) => n;
class xz {
  /**
  Define a context tracker.
  */
  constructor(t) {
    this.start = t.start, this.shift = t.shift || Gd, this.reduce = t.reduce || Gd, this.reuse = t.reuse || Gd, this.hash = t.hash || (() => 0), this.strict = t.strict !== !1;
  }
}
class Rc extends Xb {
  /**
  @internal
  */
  constructor(t) {
    if (super(), this.wrappers = [], t.version != 14)
      throw new RangeError(`Parser version (${t.version}) doesn't match runtime version (14)`);
    let e = t.nodeNames.split(" ");
    this.minRepeatTerm = e.length;
    for (let c = 0; c < t.repeatNodeCount; c++)
      e.push("");
    let i = Object.keys(t.topRules).map((c) => t.topRules[c][1]), s = [];
    for (let c = 0; c < e.length; c++)
      s.push([]);
    function o(c, h, p) {
      s[c].push([h, h.deserialize(String(p))]);
    }
    if (t.nodeProps)
      for (let c of t.nodeProps) {
        let h = c[0];
        typeof h == "string" && (h = wt[h]);
        for (let p = 1; p < c.length; ) {
          let m = c[p++];
          if (m >= 0)
            o(m, h, c[p++]);
          else {
            let O = c[p + -m];
            for (let y = -m; y > 0; y--)
              o(c[p++], h, O);
            p++;
          }
        }
      }
    this.nodeSet = new vm(e.map((c, h) => We.define({
      name: h >= this.minRepeatTerm ? void 0 : c,
      id: h,
      props: s[h],
      top: i.indexOf(h) > -1,
      error: h == 0,
      skipped: t.skippedNodes && t.skippedNodes.indexOf(h) > -1
    }))), t.propSources && (this.nodeSet = this.nodeSet.extend(...t.propSources)), this.strict = !1, this.bufferLength = Lb;
    let u = Lu(t.tokenData);
    this.context = t.context, this.specializerSpecs = t.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let c = 0; c < this.specializerSpecs.length; c++)
      this.specialized[c] = this.specializerSpecs[c].term;
    this.specializers = this.specializerSpecs.map(Jv), this.states = Lu(t.states, Uint32Array), this.data = Lu(t.stateData), this.goto = Lu(t.goto), this.maxTerm = t.maxTerm, this.tokenizers = t.tokenizers.map((c) => typeof c == "number" ? new Ws(u, c) : c), this.topRules = t.topRules, this.dialects = t.dialects || {}, this.dynamicPrecedences = t.dynamicPrecedences || null, this.tokenPrecTable = t.tokenPrec, this.termNames = t.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(t, e, i) {
    let s = new Sz(this, t, e, i);
    for (let o of this.wrappers)
      s = o(s, t, e, i);
    return s;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(t, e, i = !1) {
    let s = this.goto;
    if (e >= s[0])
      return -1;
    for (let o = s[e + 1]; ; ) {
      let u = s[o++], c = u & 1, h = s[o++];
      if (c && i)
        return h;
      for (let p = o + (u >> 1); o < p; o++)
        if (s[o] == t)
          return h;
      if (c)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(t, e) {
    let i = this.data;
    for (let s = 0; s < 2; s++)
      for (let o = this.stateSlot(
        t,
        s ? 2 : 1
        /* ParseState.Actions */
      ), u; ; o += 3) {
        if ((u = i[o]) == 65535)
          if (i[o + 1] == 1)
            u = i[o = bn(i, o + 2)];
          else {
            if (i[o + 1] == 2)
              return bn(i, o + 2);
            break;
          }
        if (u == e || u == 0)
          return bn(i, o + 1);
      }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(t, e) {
    return this.states[t * 6 + e];
  }
  /**
  @internal
  */
  stateFlag(t, e) {
    return (this.stateSlot(
      t,
      0
      /* ParseState.Flags */
    ) & e) > 0;
  }
  /**
  @internal
  */
  validAction(t, e) {
    return !!this.allActions(t, (i) => i == e ? !0 : null);
  }
  /**
  @internal
  */
  allActions(t, e) {
    let i = this.stateSlot(
      t,
      4
      /* ParseState.DefaultReduce */
    ), s = i ? e(i) : void 0;
    for (let o = this.stateSlot(
      t,
      1
      /* ParseState.Actions */
    ); s == null; o += 3) {
      if (this.data[o] == 65535)
        if (this.data[o + 1] == 1)
          o = bn(this.data, o + 2);
        else
          break;
      s = e(bn(this.data, o + 1));
    }
    return s;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(t) {
    let e = [];
    for (let i = this.stateSlot(
      t,
      1
      /* ParseState.Actions */
    ); ; i += 3) {
      if (this.data[i] == 65535)
        if (this.data[i + 1] == 1)
          i = bn(this.data, i + 2);
        else
          break;
      if ((this.data[i + 2] & 1) == 0) {
        let s = this.data[i + 1];
        e.some((o, u) => u & 1 && o == s) || e.push(this.data[i], s);
      }
    }
    return e;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(t) {
    let e = Object.assign(Object.create(Rc.prototype), this);
    if (t.props && (e.nodeSet = this.nodeSet.extend(...t.props)), t.top) {
      let i = this.topRules[t.top];
      if (!i)
        throw new RangeError(`Invalid top rule name ${t.top}`);
      e.top = i;
    }
    return t.tokenizers && (e.tokenizers = this.tokenizers.map((i) => {
      let s = t.tokenizers.find((o) => o.from == i);
      return s ? s.to : i;
    })), t.specializers && (e.specializers = this.specializers.slice(), e.specializerSpecs = this.specializerSpecs.map((i, s) => {
      let o = t.specializers.find((c) => c.from == i.external);
      if (!o)
        return i;
      let u = Object.assign(Object.assign({}, i), { external: o.to });
      return e.specializers[s] = Jv(u), u;
    })), t.contextTracker && (e.context = t.contextTracker), t.dialect && (e.dialect = this.parseDialect(t.dialect)), t.strict != null && (e.strict = t.strict), t.wrap && (e.wrappers = e.wrappers.concat(t.wrap)), t.bufferLength != null && (e.bufferLength = t.bufferLength), e;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(t) {
    return this.termNames ? this.termNames[t] : String(t <= this.maxNode && this.nodeSet.types[t].name || t);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(t) {
    let e = this.dynamicPrecedences;
    return e == null ? 0 : e[t] || 0;
  }
  /**
  @internal
  */
  parseDialect(t) {
    let e = Object.keys(this.dialects), i = e.map(() => !1);
    if (t)
      for (let o of t.split(" ")) {
        let u = e.indexOf(o);
        u >= 0 && (i[u] = !0);
      }
    let s = null;
    for (let o = 0; o < e.length; o++)
      if (!i[o])
        for (let u = this.dialects[e[o]], c; (c = this.data[u++]) != 65535; )
          (s || (s = new Uint8Array(this.maxTerm + 1)))[c] = 1;
    return new bz(t, i, s);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(t) {
    return new Rc(t);
  }
}
function bn(n, t) {
  return n[t] | n[t + 1] << 16;
}
function wz(n) {
  let t = null;
  for (let e of n) {
    let i = e.p.stoppedAt;
    (e.pos == e.p.stream.end || i != null && e.pos > i) && e.p.parser.stateFlag(
      e.state,
      2
      /* StateFlag.Accepting */
    ) && (!t || t.score < e.score) && (t = e);
  }
  return t;
}
function Jv(n) {
  if (n.external) {
    let t = n.extend ? 1 : 0;
    return (e, i) => n.external(e, i) << 1 | t;
  }
  return n.get;
}
const Tz = 1, mw = 194, gw = 195, kz = 196, Iv = 197, Az = 198, Cz = 199, Ez = 200, Mz = 2, Ow = 3, tS = 201, Qz = 24, Rz = 25, Dz = 49, zz = 50, qz = 55, _z = 56, Bz = 57, Nz = 59, Pz = 60, Lz = 61, Uz = 62, Vz = 63, Hz = 65, Xz = 238, $z = 71, jz = 241, Wz = 242, Gz = 243, Yz = 244, Zz = 245, Fz = 246, Kz = 247, Jz = 248, yw = 72, Iz = 249, t5 = 250, e5 = 251, i5 = 252, n5 = 253, l5 = 254, s5 = 255, r5 = 256, o5 = 73, a5 = 77, u5 = 263, c5 = 112, f5 = 130, h5 = 151, d5 = 152, p5 = 155, Wl = 10, Xo = 13, Um = 32, jc = 9, Vm = 35, m5 = 40, g5 = 46, Jp = 123, eS = 125, vw = 39, Sw = 34, iS = 92, O5 = 111, y5 = 120, v5 = 78, S5 = 117, b5 = 85, x5 = /* @__PURE__ */ new Set([
  Rz,
  Dz,
  zz,
  u5,
  Hz,
  f5,
  _z,
  Bz,
  Xz,
  Uz,
  Vz,
  yw,
  o5,
  a5,
  Pz,
  Lz,
  h5,
  d5,
  p5,
  c5
]);
function Yd(n) {
  return n == Wl || n == Xo;
}
function Zd(n) {
  return n >= 48 && n <= 57 || n >= 65 && n <= 70 || n >= 97 && n <= 102;
}
const w5 = new $c((n, t) => {
  let e;
  if (n.next < 0)
    n.acceptToken(Cz);
  else if (t.context.flags & tc)
    Yd(n.next) && n.acceptToken(Az, 1);
  else if (((e = n.peek(-1)) < 0 || Yd(e)) && t.canShift(Iv)) {
    let i = 0;
    for (; n.next == Um || n.next == jc; )
      n.advance(), i++;
    (n.next == Wl || n.next == Xo || n.next == Vm) && n.acceptToken(Iv, -i);
  } else Yd(n.next) && n.acceptToken(kz, 1);
}, { contextual: !0 }), T5 = new $c((n, t) => {
  let e = t.context;
  if (e.flags) return;
  let i = n.peek(-1);
  if (i == Wl || i == Xo) {
    let s = 0, o = 0;
    for (; ; ) {
      if (n.next == Um) s++;
      else if (n.next == jc) s += 8 - s % 8;
      else break;
      n.advance(), o++;
    }
    s != e.indent && n.next != Wl && n.next != Xo && n.next != Vm && (s < e.indent ? n.acceptToken(gw, -o) : n.acceptToken(mw));
  }
}), tc = 1, bw = 2, On = 4, yn = 8, vn = 16, Sn = 32;
function ec(n, t, e) {
  this.parent = n, this.indent = t, this.flags = e, this.hash = (n ? n.hash + n.hash << 8 : 0) + t + (t << 4) + e + (e << 6);
}
const k5 = new ec(null, 0, 0);
function A5(n) {
  let t = 0;
  for (let e = 0; e < n.length; e++)
    t += n.charCodeAt(e) == jc ? 8 - t % 8 : 1;
  return t;
}
const nS = new Map([
  [jz, 0],
  [Wz, On],
  [Gz, yn],
  [Yz, yn | On],
  [Zz, vn],
  [Fz, vn | On],
  [Kz, vn | yn],
  [Jz, vn | yn | On],
  [Iz, Sn],
  [t5, Sn | On],
  [e5, Sn | yn],
  [i5, Sn | yn | On],
  [n5, Sn | vn],
  [l5, Sn | vn | On],
  [s5, Sn | vn | yn],
  [r5, Sn | vn | yn | On]
].map(([n, t]) => [n, t | bw])), C5 = new xz({
  start: k5,
  reduce(n, t, e, i) {
    return n.flags & tc && x5.has(t) || (t == $z || t == yw) && n.flags & bw ? n.parent : n;
  },
  shift(n, t, e, i) {
    return t == mw ? new ec(n, A5(i.read(i.pos, e.pos)), 0) : t == gw ? n.parent : t == Qz || t == qz || t == Nz || t == Ow ? new ec(n, 0, tc) : nS.has(t) ? new ec(n, 0, nS.get(t) | n.flags & tc) : n;
  },
  hash(n) {
    return n.hash;
  }
}), E5 = new $c((n) => {
  for (let t = 0; t < 5; t++) {
    if (n.next != "print".charCodeAt(t)) return;
    n.advance();
  }
  if (!/\w/.test(String.fromCharCode(n.next)))
    for (let t = 0; ; t++) {
      let e = n.peek(t);
      if (!(e == Um || e == jc)) {
        e != m5 && e != g5 && e != Wl && e != Xo && e != Vm && n.acceptToken(Tz);
        return;
      }
    }
}), M5 = new $c((n, t) => {
  let { flags: e } = t.context, i = e & On ? Sw : vw, s = (e & yn) > 0, o = !(e & vn), u = (e & Sn) > 0, c = n.pos;
  for (; !(n.next < 0); )
    if (u && n.next == Jp)
      if (n.peek(1) == Jp)
        n.advance(2);
      else {
        if (n.pos == c) {
          n.acceptToken(Ow, 1);
          return;
        }
        break;
      }
    else if (o && n.next == iS) {
      if (n.pos == c) {
        n.advance();
        let h = n.next;
        h >= 0 && (n.advance(), Q5(n, h)), n.acceptToken(Mz);
        return;
      }
      break;
    } else if (n.next == iS && !o && n.peek(1) > -1)
      n.advance(2);
    else if (n.next == i && (!s || n.peek(1) == i && n.peek(2) == i)) {
      if (n.pos == c) {
        n.acceptToken(tS, s ? 3 : 1);
        return;
      }
      break;
    } else if (n.next == Wl) {
      if (s)
        n.advance();
      else if (n.pos == c) {
        n.acceptToken(tS);
        return;
      }
      break;
    } else
      n.advance();
  n.pos > c && n.acceptToken(Ez);
});
function Q5(n, t) {
  if (t == O5)
    for (let e = 0; e < 2 && n.next >= 48 && n.next <= 55; e++) n.advance();
  else if (t == y5)
    for (let e = 0; e < 2 && Zd(n.next); e++) n.advance();
  else if (t == S5)
    for (let e = 0; e < 4 && Zd(n.next); e++) n.advance();
  else if (t == b5)
    for (let e = 0; e < 8 && Zd(n.next); e++) n.advance();
  else if (t == v5 && n.next == Jp) {
    for (n.advance(); n.next >= 0 && n.next != eS && n.next != vw && n.next != Sw && n.next != Wl; ) n.advance();
    n.next == eS && n.advance();
  }
}
const R5 = $b({
  'async "*" "**" FormatConversion FormatSpec': z.modifier,
  "for while if elif else try except finally return raise break continue with pass assert await yield match case": z.controlKeyword,
  "in not and or is del": z.operatorKeyword,
  "from def class global nonlocal lambda": z.definitionKeyword,
  import: z.moduleKeyword,
  "with as print": z.keyword,
  Boolean: z.bool,
  None: z.null,
  VariableName: z.variableName,
  "CallExpression/VariableName": z.function(z.variableName),
  "FunctionDefinition/VariableName": z.function(z.definition(z.variableName)),
  "ClassDefinition/VariableName": z.definition(z.className),
  PropertyName: z.propertyName,
  "CallExpression/MemberExpression/PropertyName": z.function(z.propertyName),
  Comment: z.lineComment,
  Number: z.number,
  String: z.string,
  FormatString: z.special(z.string),
  Escape: z.escape,
  UpdateOp: z.updateOperator,
  "ArithOp!": z.arithmeticOperator,
  BitOp: z.bitwiseOperator,
  CompareOp: z.compareOperator,
  AssignOp: z.definitionOperator,
  Ellipsis: z.punctuation,
  At: z.meta,
  "( )": z.paren,
  "[ ]": z.squareBracket,
  "{ }": z.brace,
  ".": z.derefOperator,
  ", ;": z.separator
}), D5 = { __proto__: null, await: 44, or: 54, and: 56, in: 60, not: 62, is: 64, if: 70, else: 72, lambda: 76, yield: 94, from: 96, async: 102, for: 104, None: 162, True: 164, False: 164, del: 178, pass: 182, break: 186, continue: 190, return: 194, raise: 202, import: 206, as: 208, global: 212, nonlocal: 214, assert: 218, type: 223, elif: 236, while: 240, try: 246, except: 248, finally: 250, with: 254, def: 258, class: 268, match: 279, case: 285 }, z5 = Rc.deserialize({
  version: 14,
  states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rO#KrQdO,5>rO#K}QdO,5>qO#L`QdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LhQdO1G1dOOQS7+)T7+)TP#LmQdO'#FwO#L}QdO1G2OO#MbQdO1G2OO#MrQdO1G2OP#M}QdO'#FxO#N[QdO7+)VO#NlQdO7+)VO#NlQdO7+)VO#NtQdO7+)VO$ UQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ oQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$!PQtO1G1|P$!ZQdO'#FvOOQS1G2R1G2RP$!hQdO'#F{O$!uQdO7+)jO$#`QdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#nQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$$XQdO<<M[OOQS,5<q,5<qO$$jQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$xQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(sQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$)QQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)cQfO7+'OO$)nQdO'#F_O$*uQdO7+'jO$+VQdO7+'jOOQS7+'j7+'jO$+bQdO<<LqO$+rQdO<<LqO$+rQdO<<LqO$+zQdO'#H^OOQS<<Lh<<LhO$,UQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,oQdO1G4RO$,wQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$-SQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-vQtO'#FaOOQS'#Fc'#FcO$.WQdO'#FbO$.xQdO'#FbOOQS'#Fb'#FbO$.}QdO'#IYO$)nQdO'#FiO$)nQdO'#FiO$/fQdO'#FjO$)nQdO'#FkO$/mQdO'#IZOOQS'#IZ'#IZO$0[QdO,5;yOOQS<<KU<<KUO$0dQdO<<KUO$0tQdOANB]O$1UQdOANB]O$1^QdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1wQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2`QdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2hQtO,5<SO$)nQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$3YQdO,5;|O$3_QdO,5;|OOQS'#Fg'#FgO$)nQdO'#G`O$4PQdO,5<QO$4kQdO,5>tO$4{QdO,5>tO1XQdO,5<PO$5^QdO,5<TO$5cQdO,5<TO$)nQdO'#I[O$5hQdO'#I[O$5mQdO,5<UOOQS,5<V,5<VO0rQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5rQdOG27wO$6SQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$6XQtO'#FaO$6`QdO'#I]O$6nQdO'#I]O$6vQdO,5<XOOQS1G1h1G1hO$6{QdO1G1hO$7QQdO,5<zOOQS-E:^-E:^O$7lQdO,5=OO$8TQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8eQdO,5>vO$)nQdO,5>vOOQS1G1p1G1pOOQS,5<[,5<[OOQU7+'P7+'PO$+zQdO1G/iO$)nQdO,5<YO$8sQdO,5>wO$8zQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)nQdO'#GdO$9SQdO1G4bO$9^QdO1G4bO$9fQdO1G4bOOQS7+%T7+%TO$9tQdO1G1tO$:SQtO'#FaO$:ZQdO,5<}OOQS,5<},5<}O$:iQdO1G4cOOQS-E:a-E:aO$)nQdO,5<|O$:pQdO,5<|O$:uQdO7+)|OOQS-E:`-E:`O$;PQdO7+)|O$)nQdO,5<ZP$)nQdO'#GcO$;XQdO1G2hO$)nQdO1G2hP$;gQdO'#GbO$;nQdO<<MhO$;xQdO1G1uO$<WQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<fQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<yQdO'#GOO'vQdO'#GtO$=WQdO,59bO$=]QdO,59bO$=dQdO,59mO$=iQdO1G/UO1sQdO'#DRO8vQdO,59j",
  stateData: "$>S~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~O{#{Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-bO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)zOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)nOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-bOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)nOz/zO#[/OO%j.yO!['Oa~Og'Pa~P$)nOz0SOg'Pa~Oa0UO!['Oi~P$)zOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-bO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)nO{0^O~Oa0UO!['Oq~P$)zOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)zOa0UO!['Oy~P$)zO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
  goto: "!=j'QPPPPPP'RP'Z*s+[+t,_,y-fP.SP'Z.r.r'ZPPP'Z2[PPPPPP2[5PPP5PP7b7k=sPP=v>h>kPP'Z'ZPP>zPP'Z'ZPP'Z'Z'Z'Z'Z?O?w'ZP?zP@QDXGuGyPG|HWH['ZPPPH_Hk'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHqH}IVPI^IdPI^PI^I^PPPI^PKrPK{LVL]KrPI^LfPI^PLmLsPLwM]MzNeLwLwNkNxLwLwLwLw! ^! d! g! l! o! y!!P!!]!!o!!u!#P!#V!#s!#y!$P!$Z!$a!$g!$y!%T!%Z!%a!%k!%q!%w!%}!&T!&Z!&e!&k!&u!&{!'U!'[!'k!'s!'}!(UPPPPPPPPPPP!([!(_!(e!(n!(x!)TPPPPPPPPPPPP!-u!/Z!3^!6oPP!6w!7W!7a!8Y!8P!8c!8i!8l!8o!8r!8z!9jPPPPPPPPPPPPPPPPP!9m!9q!9wP!:]!:a!:m!:v!;S!;j!;m!;p!;v!;|!<S!<VP!<_!<h!=d!=g]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r{!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g}!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!P!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!R!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!T!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!V!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!Z!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&eVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0r%oXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s!Y!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aQ,^*RR-e,_X#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&dQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uQ.S-fR/q/VhUOn#d#g$j%|&_'w(p(r)t,P%U!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!Z!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
  nodeNames: "⚠ print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
  maxTerm: 277,
  context: C5,
  nodeProps: [
    ["isolate", -5, 4, 71, 72, 73, 77, ""],
    ["group", -15, 6, 85, 87, 88, 90, 92, 94, 96, 98, 99, 100, 102, 105, 108, 110, "Statement Statement", -22, 8, 18, 21, 25, 40, 49, 50, 56, 57, 60, 61, 62, 63, 64, 67, 70, 71, 72, 79, 80, 81, 82, "Expression", -10, 114, 116, 119, 121, 122, 126, 128, 133, 135, 138, "Statement", -9, 143, 144, 147, 148, 150, 151, 152, 153, 154, "Pattern"],
    ["openedBy", 23, "(", 54, "[", 58, "{"],
    ["closedBy", 24, ")", 55, "]", 59, "}"]
  ],
  propSources: [R5],
  skippedNodes: [0, 4],
  repeatNodeCount: 34,
  tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
  tokenizers: [E5, T5, w5, M5, 0, 1, 2, 3, 4],
  topRules: { Script: [0, 5] },
  specialized: [{ term: 221, get: (n) => D5[n] || -1 }],
  tokenPrec: 7668
}), lS = /* @__PURE__ */ new JE(), xw = /* @__PURE__ */ new Set([
  "Script",
  "Body",
  "FunctionDefinition",
  "ClassDefinition",
  "LambdaExpression",
  "ForStatement",
  "MatchClause"
]);
function Uu(n) {
  return (t, e, i) => {
    if (i)
      return !1;
    let s = t.node.getChild("VariableName");
    return s && e(s, n), !0;
  };
}
const q5 = {
  FunctionDefinition: /* @__PURE__ */ Uu("function"),
  ClassDefinition: /* @__PURE__ */ Uu("class"),
  ForStatement(n, t, e) {
    if (e) {
      for (let i = n.node.firstChild; i; i = i.nextSibling)
        if (i.name == "VariableName")
          t(i, "variable");
        else if (i.name == "in")
          break;
    }
  },
  ImportStatement(n, t) {
    var e, i;
    let { node: s } = n, o = ((e = s.firstChild) === null || e === void 0 ? void 0 : e.name) == "from";
    for (let u = s.getChild("import"); u; u = u.nextSibling)
      u.name == "VariableName" && ((i = u.nextSibling) === null || i === void 0 ? void 0 : i.name) != "as" && t(u, o ? "variable" : "namespace");
  },
  AssignStatement(n, t) {
    for (let e = n.node.firstChild; e; e = e.nextSibling)
      if (e.name == "VariableName")
        t(e, "variable");
      else if (e.name == ":" || e.name == "AssignOp")
        break;
  },
  ParamList(n, t) {
    for (let e = null, i = n.node.firstChild; i; i = i.nextSibling)
      i.name == "VariableName" && (!e || !/\*|AssignOp/.test(e.name)) && t(i, "variable"), e = i;
  },
  CapturePattern: /* @__PURE__ */ Uu("variable"),
  AsPattern: /* @__PURE__ */ Uu("variable"),
  __proto__: null
};
function ww(n, t) {
  let e = lS.get(t);
  if (e)
    return e;
  let i = [], s = !0;
  function o(u, c) {
    let h = n.sliceString(u.from, u.to);
    i.push({ label: h, type: c });
  }
  return t.cursor(ce.IncludeAnonymous).iterate((u) => {
    if (u.name) {
      let c = q5[u.name];
      if (c && c(u, o, s) || !s && xw.has(u.name))
        return !1;
      s = !1;
    } else if (u.to - u.from > 8192) {
      for (let c of ww(n, u.node))
        i.push(c);
      return !1;
    }
  }), lS.set(t, i), i;
}
const sS = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/, Tw = ["String", "FormatString", "Comment", "PropertyName"];
function _5(n) {
  let t = ge(n.state).resolveInner(n.pos, -1);
  if (Tw.indexOf(t.name) > -1)
    return null;
  let e = t.name == "VariableName" || t.to - t.from < 20 && sS.test(n.state.sliceDoc(t.from, t.to));
  if (!e && !n.explicit)
    return null;
  let i = [];
  for (let s = t; s; s = s.parent)
    xw.has(s.name) && (i = i.concat(ww(n.state.doc, s)));
  return {
    options: i,
    from: e ? t.from : n.pos,
    validFor: sS
  };
}
const B5 = /* @__PURE__ */ [
  "__annotations__",
  "__builtins__",
  "__debug__",
  "__doc__",
  "__import__",
  "__name__",
  "__loader__",
  "__package__",
  "__spec__",
  "False",
  "None",
  "True"
].map((n) => ({ label: n, type: "constant" })).concat(/* @__PURE__ */ [
  "ArithmeticError",
  "AssertionError",
  "AttributeError",
  "BaseException",
  "BlockingIOError",
  "BrokenPipeError",
  "BufferError",
  "BytesWarning",
  "ChildProcessError",
  "ConnectionAbortedError",
  "ConnectionError",
  "ConnectionRefusedError",
  "ConnectionResetError",
  "DeprecationWarning",
  "EOFError",
  "Ellipsis",
  "EncodingWarning",
  "EnvironmentError",
  "Exception",
  "FileExistsError",
  "FileNotFoundError",
  "FloatingPointError",
  "FutureWarning",
  "GeneratorExit",
  "IOError",
  "ImportError",
  "ImportWarning",
  "IndentationError",
  "IndexError",
  "InterruptedError",
  "IsADirectoryError",
  "KeyError",
  "KeyboardInterrupt",
  "LookupError",
  "MemoryError",
  "ModuleNotFoundError",
  "NameError",
  "NotADirectoryError",
  "NotImplemented",
  "NotImplementedError",
  "OSError",
  "OverflowError",
  "PendingDeprecationWarning",
  "PermissionError",
  "ProcessLookupError",
  "RecursionError",
  "ReferenceError",
  "ResourceWarning",
  "RuntimeError",
  "RuntimeWarning",
  "StopAsyncIteration",
  "StopIteration",
  "SyntaxError",
  "SyntaxWarning",
  "SystemError",
  "SystemExit",
  "TabError",
  "TimeoutError",
  "TypeError",
  "UnboundLocalError",
  "UnicodeDecodeError",
  "UnicodeEncodeError",
  "UnicodeError",
  "UnicodeTranslateError",
  "UnicodeWarning",
  "UserWarning",
  "ValueError",
  "Warning",
  "ZeroDivisionError"
].map((n) => ({ label: n, type: "type" }))).concat(/* @__PURE__ */ [
  "bool",
  "bytearray",
  "bytes",
  "classmethod",
  "complex",
  "float",
  "frozenset",
  "int",
  "list",
  "map",
  "memoryview",
  "object",
  "range",
  "set",
  "staticmethod",
  "str",
  "super",
  "tuple",
  "type"
].map((n) => ({ label: n, type: "class" }))).concat(/* @__PURE__ */ [
  "abs",
  "aiter",
  "all",
  "anext",
  "any",
  "ascii",
  "bin",
  "breakpoint",
  "callable",
  "chr",
  "compile",
  "delattr",
  "dict",
  "dir",
  "divmod",
  "enumerate",
  "eval",
  "exec",
  "exit",
  "filter",
  "format",
  "getattr",
  "globals",
  "hasattr",
  "hash",
  "help",
  "hex",
  "id",
  "input",
  "isinstance",
  "issubclass",
  "iter",
  "len",
  "license",
  "locals",
  "max",
  "min",
  "next",
  "oct",
  "open",
  "ord",
  "pow",
  "print",
  "property",
  "quit",
  "repr",
  "reversed",
  "round",
  "setattr",
  "slice",
  "sorted",
  "sum",
  "vars",
  "zip"
].map((n) => ({ label: n, type: "function" }))), N5 = [
  /* @__PURE__ */ gn("def ${name}(${params}):\n	${}", {
    label: "def",
    detail: "function",
    type: "keyword"
  }),
  /* @__PURE__ */ gn("for ${name} in ${collection}:\n	${}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ gn("while ${}:\n	${}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ gn("try:\n	${}\nexcept ${error}:\n	${}", {
    label: "try",
    detail: "/ except block",
    type: "keyword"
  }),
  /* @__PURE__ */ gn(`if \${}:
	
`, {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ gn("if ${}:\n	${}\nelse:\n	${}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ gn("class ${name}:\n	def __init__(self, ${params}):\n			${}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ gn("import ${module}", {
    label: "import",
    detail: "statement",
    type: "keyword"
  }),
  /* @__PURE__ */ gn("from ${module} import ${names}", {
    label: "from",
    detail: "import",
    type: "keyword"
  })
], P5 = /* @__PURE__ */ LR(Tw, /* @__PURE__ */ Ix(/* @__PURE__ */ B5.concat(N5)));
function Fd(n) {
  let { node: t, pos: e } = n, i = n.lineIndent(e, -1), s = null;
  for (; ; ) {
    let o = t.childBefore(e);
    if (o)
      if (o.name == "Comment")
        e = o.from;
      else if (o.name == "Body" || o.name == "MatchBody")
        n.baseIndentFor(o) + n.unit <= i && (s = o), t = o;
      else if (o.name == "MatchClause")
        t = o;
      else if (o.type.is("Statement"))
        t = o;
      else
        break;
    else break;
  }
  return s;
}
function Kd(n, t) {
  let e = n.baseIndentFor(t), i = n.lineAt(n.pos, -1), s = i.from + i.text.length;
  return /^\s*($|#)/.test(i.text) && n.node.to < s + 100 && !/\S/.test(n.state.sliceDoc(s, n.node.to)) && n.lineIndent(n.pos, -1) <= e || /^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(n.textAfter) && n.lineIndent(n.pos, -1) > e ? null : e + n.unit;
}
const Jd = /* @__PURE__ */ gc.define({
  name: "python",
  parser: /* @__PURE__ */ z5.configure({
    props: [
      /* @__PURE__ */ Yb.add({
        Body: (n) => {
          var t;
          let e = /^\s*(#|$)/.test(n.textAfter) && Fd(n) || n.node;
          return (t = Kd(n, e)) !== null && t !== void 0 ? t : n.continue();
        },
        MatchBody: (n) => {
          var t;
          let e = Fd(n);
          return (t = Kd(n, e || n.node)) !== null && t !== void 0 ? t : n.continue();
        },
        IfStatement: (n) => /^\s*(else:|elif )/.test(n.textAfter) ? n.baseIndent : n.continue(),
        "ForStatement WhileStatement": (n) => /^\s*else:/.test(n.textAfter) ? n.baseIndent : n.continue(),
        TryStatement: (n) => /^\s*(except[ :]|finally:|else:)/.test(n.textAfter) ? n.baseIndent : n.continue(),
        MatchStatement: (n) => /^\s*case /.test(n.textAfter) ? n.baseIndent + n.unit : n.continue(),
        "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /* @__PURE__ */ _d({ closing: ")" }),
        "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /* @__PURE__ */ _d({ closing: "}" }),
        "ArrayExpression ArrayComprehensionExpression": /* @__PURE__ */ _d({ closing: "]" }),
        MemberExpression: (n) => n.baseIndent + n.unit,
        "String FormatString": () => null,
        Script: (n) => {
          var t;
          let e = Fd(n);
          return (t = e && Kd(n, e)) !== null && t !== void 0 ? t : n.continue();
        }
      }),
      /* @__PURE__ */ Kb.add({
        "ArrayExpression DictionaryExpression SetExpression TupleExpression": wM,
        Body: (n, t) => ({ from: n.from + 1, to: n.to - (n.to == t.doc.length ? 0 : 1) }),
        "String FormatString": (n, t) => ({ from: t.doc.lineAt(n.from).to, to: n.to })
      })
    ]
  }),
  languageData: {
    closeBrackets: {
      brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
      stringPrefixes: [
        "f",
        "fr",
        "rf",
        "r",
        "u",
        "b",
        "br",
        "rb",
        "F",
        "FR",
        "RF",
        "R",
        "U",
        "B",
        "BR",
        "RB"
      ]
    },
    commentTokens: { line: "#" },
    // Indent logic logic are triggered upon below input patterns
    indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:|case\s+[^:]*:?)$/
  }
});
function L5() {
  return new hM(Jd, [
    Jd.data.of({ autocomplete: _5 }),
    Jd.data.of({ autocomplete: P5 })
  ]);
}
var U5 = Object.defineProperty, Mt = (n, t) => U5(n, "name", { value: t, configurable: !0 }), kw = ((n) => typeof require < "u" ? require : typeof Proxy < "u" ? new Proxy(n, { get: (t, e) => (typeof require < "u" ? require : t)[e] }) : n)(function(n) {
  if (typeof require < "u") return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + n + '" is not supported');
});
function Aw(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
Mt(Aw, "_isNumber");
function cl(n) {
  return n.charAt(0).toUpperCase() + n.substring(1);
}
Mt(cl, "_capitalize");
function Wc(n) {
  return function() {
    return this[n];
  };
}
Mt(Wc, "_getter");
var _s = ["isConstructor", "isEval", "isNative", "isToplevel"], Bs = ["columnNumber", "lineNumber"], Ns = ["fileName", "functionName", "source"], V5 = ["args"], H5 = ["evalOrigin"], Vu = _s.concat(Bs, Ns, V5, H5);
function ri(n) {
  if (n) for (var t = 0; t < Vu.length; t++) n[Vu[t]] !== void 0 && this["set" + cl(Vu[t])](n[Vu[t]]);
}
Mt(ri, "StackFrame");
ri.prototype = { getArgs: function() {
  return this.args;
}, setArgs: function(n) {
  if (Object.prototype.toString.call(n) !== "[object Array]") throw new TypeError("Args must be an Array");
  this.args = n;
}, getEvalOrigin: function() {
  return this.evalOrigin;
}, setEvalOrigin: function(n) {
  if (n instanceof ri) this.evalOrigin = n;
  else if (n instanceof Object) this.evalOrigin = new ri(n);
  else throw new TypeError("Eval Origin must be an Object or StackFrame");
}, toString: function() {
  var n = this.getFileName() || "", t = this.getLineNumber() || "", e = this.getColumnNumber() || "", i = this.getFunctionName() || "";
  return this.getIsEval() ? n ? "[eval] (" + n + ":" + t + ":" + e + ")" : "[eval]:" + t + ":" + e : i ? i + " (" + n + ":" + t + ":" + e + ")" : n + ":" + t + ":" + e;
} };
ri.fromString = Mt(function(n) {
  var t = n.indexOf("("), e = n.lastIndexOf(")"), i = n.substring(0, t), s = n.substring(t + 1, e).split(","), o = n.substring(e + 1);
  if (o.indexOf("@") === 0) var u = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(o, ""), c = u[1], h = u[2], p = u[3];
  return new ri({ functionName: i, args: s || void 0, fileName: c, lineNumber: h || void 0, columnNumber: p || void 0 });
}, "StackFrame$$fromString");
for (Dl = 0; Dl < _s.length; Dl++) ri.prototype["get" + cl(_s[Dl])] = Wc(_s[Dl]), ri.prototype["set" + cl(_s[Dl])] = /* @__PURE__ */ function(n) {
  return function(t) {
    this[n] = !!t;
  };
}(_s[Dl]);
var Dl;
for (zl = 0; zl < Bs.length; zl++) ri.prototype["get" + cl(Bs[zl])] = Wc(Bs[zl]), ri.prototype["set" + cl(Bs[zl])] = /* @__PURE__ */ function(n) {
  return function(t) {
    if (!Aw(t)) throw new TypeError(n + " must be a Number");
    this[n] = Number(t);
  };
}(Bs[zl]);
var zl;
for (ql = 0; ql < Ns.length; ql++) ri.prototype["get" + cl(Ns[ql])] = Wc(Ns[ql]), ri.prototype["set" + cl(Ns[ql])] = /* @__PURE__ */ function(n) {
  return function(t) {
    this[n] = String(t);
  };
}(Ns[ql]);
var ql, Id = ri;
function Cw() {
  var n = /^\s*at .*(\S+:\d+|\(native\))/m, t = /^(eval@)?(\[native code])?$/;
  return { parse: Mt(function(e) {
    if (e.stack && e.stack.match(n)) return this.parseV8OrIE(e);
    if (e.stack) return this.parseFFOrSafari(e);
    throw new Error("Cannot parse given Error object");
  }, "ErrorStackParser$$parse"), extractLocation: Mt(function(e) {
    if (e.indexOf(":") === -1) return [e];
    var i = /(.+?)(?::(\d+))?(?::(\d+))?$/, s = i.exec(e.replace(/[()]/g, ""));
    return [s[1], s[2] || void 0, s[3] || void 0];
  }, "ErrorStackParser$$extractLocation"), parseV8OrIE: Mt(function(e) {
    var i = e.stack.split(`
`).filter(function(s) {
      return !!s.match(n);
    }, this);
    return i.map(function(s) {
      s.indexOf("(eval ") > -1 && (s = s.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(,.*$)/g, ""));
      var o = s.replace(/^\s+/, "").replace(/\(eval code/g, "(").replace(/^.*?\s+/, ""), u = o.match(/ (\(.+\)$)/);
      o = u ? o.replace(u[0], "") : o;
      var c = this.extractLocation(u ? u[1] : o), h = u && o || void 0, p = ["eval", "<anonymous>"].indexOf(c[0]) > -1 ? void 0 : c[0];
      return new Id({ functionName: h, fileName: p, lineNumber: c[1], columnNumber: c[2], source: s });
    }, this);
  }, "ErrorStackParser$$parseV8OrIE"), parseFFOrSafari: Mt(function(e) {
    var i = e.stack.split(`
`).filter(function(s) {
      return !s.match(t);
    }, this);
    return i.map(function(s) {
      if (s.indexOf(" > eval") > -1 && (s = s.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")), s.indexOf("@") === -1 && s.indexOf(":") === -1) return new Id({ functionName: s });
      var o = /((.*".+"[^@]*)?[^@]*)(?:@)/, u = s.match(o), c = u && u[1] ? u[1] : void 0, h = this.extractLocation(s.replace(o, ""));
      return new Id({ functionName: c, fileName: h[0], lineNumber: h[1], columnNumber: h[2], source: s });
    }, this);
  }, "ErrorStackParser$$parseFFOrSafari") };
}
Mt(Cw, "ErrorStackParser");
var X5 = new Cw(), $5 = X5, Ii = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string" && !process.browser, Ew = Ii && typeof module < "u" && typeof module.exports < "u" && typeof kw < "u" && typeof __dirname < "u", j5 = Ii && !Ew, W5 = typeof Deno < "u", Mw = !Ii && !W5, G5 = Mw && typeof window == "object" && typeof document == "object" && typeof document.createElement == "function" && "sessionStorage" in window && typeof importScripts != "function", Y5 = Mw && typeof importScripts == "function" && typeof self == "object";
typeof navigator == "object" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome") == -1 && navigator.userAgent.indexOf("Safari") > -1;
var Qw, Ip, Rw, rS, Hm;
async function Xm() {
  if (!Ii || (Qw = (await Promise.resolve().then(() => Ui)).default, rS = await Promise.resolve().then(() => Ui), Hm = await Promise.resolve().then(() => Ui), Rw = (await Promise.resolve().then(() => Ui)).default, Ip = await Promise.resolve().then(() => Ui), $m = Ip.sep, typeof kw < "u")) return;
  let n = rS, t = await Promise.resolve().then(() => Ui), e = await Promise.resolve().then(() => Ui), i = await Promise.resolve().then(() => Ui), s = { fs: n, crypto: t, ws: e, child_process: i };
  globalThis.require = function(o) {
    return s[o];
  };
}
Mt(Xm, "initNodeModules");
function Dw(n, t) {
  return Ip.resolve(t || ".", n);
}
Mt(Dw, "node_resolvePath");
function zw(n, t) {
  return t === void 0 && (t = location), new URL(n, t).toString();
}
Mt(zw, "browser_resolvePath");
var tm;
Ii ? tm = Dw : tm = zw;
var $m;
Ii || ($m = "/");
function qw(n, t) {
  return n.startsWith("file://") && (n = n.slice(7)), n.includes("://") ? { response: fetch(n) } : { binary: Hm.readFile(n).then((e) => new Uint8Array(e.buffer, e.byteOffset, e.byteLength)) };
}
Mt(qw, "node_getBinaryResponse");
function _w(n, t) {
  let e = new URL(n, location);
  return { response: fetch(e, t ? { integrity: t } : {}) };
}
Mt(_w, "browser_getBinaryResponse");
var Dc;
Ii ? Dc = qw : Dc = _w;
async function Bw(n, t) {
  let { response: e, binary: i } = Dc(n, t);
  if (i) return i;
  let s = await e;
  if (!s.ok) throw new Error(`Failed to load '${n}': request failed.`);
  return new Uint8Array(await s.arrayBuffer());
}
Mt(Bw, "loadBinaryFile");
var ic;
if (G5) ic = Mt(async (n) => await import(n), "loadScript");
else if (Y5) ic = Mt(async (n) => {
  try {
    globalThis.importScripts(n);
  } catch (t) {
    if (t instanceof TypeError) await import(n);
    else throw t;
  }
}, "loadScript");
else if (Ii) ic = Nw;
else throw new Error("Cannot determine runtime environment");
async function Nw(n) {
  n.startsWith("file://") && (n = n.slice(7)), n.includes("://") ? Rw.runInThisContext(await (await fetch(n)).text()) : await import(Qw.pathToFileURL(n).href);
}
Mt(Nw, "nodeLoadScript");
async function Pw(n) {
  if (Ii) {
    await Xm();
    let t = await Hm.readFile(n, { encoding: "utf8" });
    return JSON.parse(t);
  } else return await (await fetch(n)).json();
}
Mt(Pw, "loadLockFile");
async function Lw() {
  if (Ew) return __dirname;
  let n;
  try {
    throw new Error();
  } catch (i) {
    n = i;
  }
  let t = $5.parse(n)[0].fileName;
  if (Ii && !t.startsWith("file://") && (t = `file://${t}`), j5) {
    let i = await Promise.resolve().then(() => Ui);
    return (await Promise.resolve().then(() => Ui)).fileURLToPath(i.dirname(t));
  }
  let e = t.lastIndexOf($m);
  if (e === -1) throw new Error("Could not extract indexURL path from pyodide module location");
  return t.slice(0, e);
}
Mt(Lw, "calculateDirname");
function Uw(n) {
  let t = n.FS, e = n.FS.filesystems.MEMFS, i = n.PATH, s = { DIR_MODE: 16895, FILE_MODE: 33279, mount: function(o) {
    if (!o.opts.fileSystemHandle) throw new Error("opts.fileSystemHandle is required");
    return e.mount.apply(null, arguments);
  }, syncfs: async (o, u, c) => {
    try {
      let h = s.getLocalSet(o), p = await s.getRemoteSet(o), m = u ? p : h, O = u ? h : p;
      await s.reconcile(o, m, O), c(null);
    } catch (h) {
      c(h);
    }
  }, getLocalSet: (o) => {
    let u = /* @__PURE__ */ Object.create(null);
    function c(m) {
      return m !== "." && m !== "..";
    }
    Mt(c, "isRealDir");
    function h(m) {
      return (O) => i.join2(m, O);
    }
    Mt(h, "toAbsolute");
    let p = t.readdir(o.mountpoint).filter(c).map(h(o.mountpoint));
    for (; p.length; ) {
      let m = p.pop(), O = t.stat(m);
      t.isDir(O.mode) && p.push.apply(p, t.readdir(m).filter(c).map(h(m))), u[m] = { timestamp: O.mtime, mode: O.mode };
    }
    return { type: "local", entries: u };
  }, getRemoteSet: async (o) => {
    let u = /* @__PURE__ */ Object.create(null), c = await Z5(o.opts.fileSystemHandle);
    for (let [h, p] of c) h !== "." && (u[i.join2(o.mountpoint, h)] = { timestamp: p.kind === "file" ? new Date((await p.getFile()).lastModified) : /* @__PURE__ */ new Date(), mode: p.kind === "file" ? s.FILE_MODE : s.DIR_MODE });
    return { type: "remote", entries: u, handles: c };
  }, loadLocalEntry: (o) => {
    let u = t.lookupPath(o).node, c = t.stat(o);
    if (t.isDir(c.mode)) return { timestamp: c.mtime, mode: c.mode };
    if (t.isFile(c.mode)) return u.contents = e.getFileDataAsTypedArray(u), { timestamp: c.mtime, mode: c.mode, contents: u.contents };
    throw new Error("node type not supported");
  }, storeLocalEntry: (o, u) => {
    if (t.isDir(u.mode)) t.mkdirTree(o, u.mode);
    else if (t.isFile(u.mode)) t.writeFile(o, u.contents, { canOwn: !0 });
    else throw new Error("node type not supported");
    t.chmod(o, u.mode), t.utime(o, u.timestamp, u.timestamp);
  }, removeLocalEntry: (o) => {
    var u = t.stat(o);
    t.isDir(u.mode) ? t.rmdir(o) : t.isFile(u.mode) && t.unlink(o);
  }, loadRemoteEntry: async (o) => {
    if (o.kind === "file") {
      let u = await o.getFile();
      return { contents: new Uint8Array(await u.arrayBuffer()), mode: s.FILE_MODE, timestamp: new Date(u.lastModified) };
    } else {
      if (o.kind === "directory") return { mode: s.DIR_MODE, timestamp: /* @__PURE__ */ new Date() };
      throw new Error("unknown kind: " + o.kind);
    }
  }, storeRemoteEntry: async (o, u, c) => {
    let h = o.get(i.dirname(u)), p = t.isFile(c.mode) ? await h.getFileHandle(i.basename(u), { create: !0 }) : await h.getDirectoryHandle(i.basename(u), { create: !0 });
    if (p.kind === "file") {
      let m = await p.createWritable();
      await m.write(c.contents), await m.close();
    }
    o.set(u, p);
  }, removeRemoteEntry: async (o, u) => {
    await o.get(i.dirname(u)).removeEntry(i.basename(u)), o.delete(u);
  }, reconcile: async (o, u, c) => {
    let h = 0, p = [];
    Object.keys(u.entries).forEach(function(y) {
      let S = u.entries[y], x = c.entries[y];
      (!x || t.isFile(S.mode) && S.timestamp.getTime() > x.timestamp.getTime()) && (p.push(y), h++);
    }), p.sort();
    let m = [];
    if (Object.keys(c.entries).forEach(function(y) {
      u.entries[y] || (m.push(y), h++);
    }), m.sort().reverse(), !h) return;
    let O = u.type === "remote" ? u.handles : c.handles;
    for (let y of p) {
      let S = i.normalize(y.replace(o.mountpoint, "/")).substring(1);
      if (c.type === "local") {
        let x = O.get(S), w = await s.loadRemoteEntry(x);
        s.storeLocalEntry(y, w);
      } else {
        let x = s.loadLocalEntry(y);
        await s.storeRemoteEntry(O, S, x);
      }
    }
    for (let y of m) if (c.type === "local") s.removeLocalEntry(y);
    else {
      let S = i.normalize(y.replace(o.mountpoint, "/")).substring(1);
      await s.removeRemoteEntry(O, S);
    }
  } };
  n.FS.filesystems.NATIVEFS_ASYNC = s;
}
Mt(Uw, "initializeNativeFS");
var Z5 = Mt(async (n) => {
  let t = [];
  async function e(s) {
    for await (let o of s.values()) t.push(o), o.kind === "directory" && await e(o);
  }
  Mt(e, "collect"), await e(n);
  let i = /* @__PURE__ */ new Map();
  i.set(".", n);
  for (let s of t) {
    let o = (await n.resolve(s)).join("/");
    i.set(o, s);
  }
  return i;
}, "getFsHandles");
function Vw(n) {
  let t = { noImageDecoding: !0, noAudioDecoding: !0, noWasmDecoding: !1, preRun: Ww(n), quit(e, i) {
    throw t.exited = { status: e, toThrow: i }, i;
  }, print: n.stdout, printErr: n.stderr, thisProgram: n._sysExecutable, arguments: n.args, API: { config: n }, locateFile: (e) => n.indexURL + e, instantiateWasm: Gw(n.indexURL) };
  return t;
}
Mt(Vw, "createSettings");
function Hw(n) {
  return function(t) {
    let e = "/";
    try {
      t.FS.mkdirTree(n);
    } catch (i) {
      console.error(`Error occurred while making a home directory '${n}':`), console.error(i), console.error(`Using '${e}' for a home directory instead`), n = e;
    }
    t.FS.chdir(n);
  };
}
Mt(Hw, "createHomeDirectory");
function Xw(n) {
  return function(t) {
    Object.assign(t.ENV, n);
  };
}
Mt(Xw, "setEnvironment");
function $w(n) {
  return n ? [async (t) => {
    t.addRunDependency("fsInitHook");
    try {
      await n(t.FS, { sitePackages: t.API.sitePackages });
    } finally {
      t.removeRunDependency("fsInitHook");
    }
  }] : [];
}
Mt($w, "callFsInitHook");
function jw(n) {
  let t = Bw(n);
  return async (e) => {
    let i = e._py_version_major(), s = e._py_version_minor();
    e.FS.mkdirTree("/lib"), e.API.sitePackages = `/lib/python${i}.${s}/site-packages`, e.FS.mkdirTree(e.API.sitePackages), e.addRunDependency("install-stdlib");
    try {
      let o = await t;
      e.FS.writeFile(`/lib/python${i}${s}.zip`, o);
    } catch (o) {
      console.error("Error occurred while installing the standard library:"), console.error(o);
    } finally {
      e.removeRunDependency("install-stdlib");
    }
  };
}
Mt(jw, "installStdlib");
function Ww(n) {
  let t;
  return n.stdLibURL != null ? t = n.stdLibURL : t = n.indexURL + "python_stdlib.zip", [...$w(n.fsInit), jw(t), Hw(n.env.HOME), Xw(n.env), Uw];
}
Mt(Ww, "getFileSystemInitializationFuncs");
function Gw(n) {
  if (typeof WasmOffsetConverter < "u") return;
  let { binary: t, response: e } = Dc(n + "pyodide.asm.wasm");
  return function(i, s) {
    return async function() {
      try {
        let o;
        e ? o = await WebAssembly.instantiateStreaming(e, i) : o = await WebAssembly.instantiate(await t, i);
        let { instance: u, module: c } = o;
        s(u, c);
      } catch (o) {
        console.warn("wasm instantiation failed!"), console.warn(o);
      }
    }(), {};
  };
}
Mt(Gw, "getInstantiateWasmFunc");
var oS = "0.27.6";
async function Yw(n = {}) {
  var t, e;
  await Xm();
  let i = n.indexURL || await Lw();
  i = tm(i), i.endsWith("/") || (i += "/"), n.indexURL = i;
  let s = { fullStdLib: !1, jsglobals: globalThis, stdin: globalThis.prompt ? globalThis.prompt : void 0, lockFileURL: i + "pyodide-lock.json", args: [], env: {}, packageCacheDir: i, packages: [], enableRunUntilComplete: !1, checkAPIVersion: !0, BUILD_ID: "58ff83c394cd9a3d28be50b7475d122087896295981974b756ce5fc170e523cf" }, o = Object.assign(s, n);
  (t = o.env).HOME ?? (t.HOME = "/home/pyodide"), (e = o.env).PYTHONINSPECT ?? (e.PYTHONINSPECT = "1");
  let u = Vw(o), c = u.API;
  if (c.lockFilePromise = Pw(o.lockFileURL), typeof _createPyodideModule != "function") {
    let y = `${o.indexURL}pyodide.asm.js`;
    await ic(y);
  }
  let h;
  if (n._loadSnapshot) {
    let y = await n._loadSnapshot;
    ArrayBuffer.isView(y) ? h = y : h = new Uint8Array(y), u.noInitialRun = !0, u.INITIAL_MEMORY = h.length;
  }
  let p = await _createPyodideModule(u);
  if (u.exited) throw u.exited.toThrow;
  if (n.pyproxyToStringRepr && c.setPyProxyToStringMethod(!0), c.version !== oS && o.checkAPIVersion) throw new Error(`Pyodide version does not match: '${oS}' <==> '${c.version}'. If you updated the Pyodide version, make sure you also updated the 'indexURL' parameter passed to loadPyodide.`);
  p.locateFile = (y) => {
    throw new Error("Didn't expect to load any more file_packager files!");
  };
  let m;
  h && (m = c.restoreSnapshot(h));
  let O = c.finalizeBootstrap(m, n._snapshotDeserializer);
  return c.sys.path.insert(0, c.config.env.HOME), O.version.includes("dev") || c.setCdnUrl(`https://cdn.jsdelivr.net/pyodide/v${O.version}/full/`), c._pyodide.set_excepthook(), await c.packageIndexReady, c.initializeStreams(o.stdin, o.stdout, o.stderr), O;
}
Mt(Yw, "loadPyodide");
const Zw = Qt.createContext(null);
function Fw() {
  const n = Qt.useContext(Zw);
  if (!n)
    throw new Error("useAtomScope must be used within an AtomScopeProvider");
  return n;
}
function F5() {
  const n = lo(""), t = lo(null), e = lo(!1), i = lo(null, async (o, u) => {
    try {
      if (console.log("Loading Pyodide..."), !window.pyodide) {
        window.pyodide = await Yw();
        const c = [
          "./packages/micropip-0.9.0-py3-none-any.whl",
          "./packages/annotated_types-0.6.0-py3-none-any.whl",
          "./packages/typing_extensions-4.11.0-py3-none-any.whl",
          "./packages/pydantic_core-2.27.2-cp312-cp312-pyodide_2024_0_wasm32.whl",
          "./packages/pydantic-2.10.5-py3-none-any.whl",
          "./packages/molviewspec-1.5.0-py3-none-any.whl"
        ];
        await Promise.all(
          c.map((h) => window.pyodide.loadPackage(h))
        ), console.log("Pyodide loaded successfully!");
      }
      return u(e, !0), !0;
    } catch (c) {
      return console.error("Error initializing Pyodide:", c), !1;
    }
  }), s = lo(
    (o) => o(n),
    async (o, u) => {
      if (o(e))
        try {
          const c = o(n), h = await window.pyodide.runPythonAsync(c);
          u(t, JSON.parse(h));
        } catch (c) {
          console.error("Error executing Python code:", c);
        }
    }
  );
  return {
    codeAtom: n,
    molViewSpecJsonAtom: t,
    pyodideReadyAtom: e,
    initializePyodideAtom: i,
    executePyCodeAtom: s
  };
}
function K5({ initialCode: n = "", children: t }) {
  const e = Qt.useMemo(() => F5(), []);
  return /* @__PURE__ */ ki.createElement(U2, null, /* @__PURE__ */ ki.createElement(Zw.Provider, { value: e }, t));
}
const J5 = {
  allowMajorPerformanceCaveat: !0,
  collapseLeftPanel: !1,
  collapseRightPanel: !1,
  customFormats: [],
  disableAntialiasing: !1,
  disabledExtensions: [],
  emdbProvider: "rcsb",
  illumination: !1,
  layoutIsExpanded: !1,
  layoutShowControls: !1,
  layoutShowLeftPanel: !1,
  layoutShowLog: !1,
  layoutShowRemoteState: !1,
  layoutShowSequence: !0,
  pdbProvider: "rcsb",
  pickScale: 1,
  pixelScale: 1,
  pluginStateServer: "",
  powerPreference: "default",
  preferWebgl1: !1,
  rcsbAssemblySymmetryApplyColors: !0,
  rcsbAssemblySymmetryDefaultServerType: "full",
  rcsbAssemblySymmetryDefaultServerUrl: "",
  resolutionMode: "auto",
  saccharideCompIdMapType: "default",
  transparency: !0,
  viewportShowAnimation: !1,
  viewportShowControls: !0,
  viewportShowExpand: !0,
  viewportShowSelectionMode: !1,
  viewportShowSettings: !0,
  viewportShowTrajectoryControls: !1,
  volumeStreamingDisabled: !1
};
function I5() {
  const n = Qt.useRef(null), t = Qt.useRef(null), e = Fw(), [i] = mo(e.molViewSpecJsonAtom);
  return Qt.useEffect(() => {
    if (n.current)
      return molstar.Viewer.create(n.current, J5).then((s) => {
        t.current = s, i && s.loadMvsData(i, "mvsj", {
          replaceExisting: !0
        });
      }).catch(
        (s) => console.error(`Failed to initialize MolStar: ${s.message}`)
      ), () => {
        t.current && (t.current.dispose(), t.current = null);
      };
  }, []), Qt.useEffect(() => {
    t.current && i && t.current.loadMvsData(i, "mvsj", {
      replaceExisting: !0
    });
  }, [i]), /* @__PURE__ */ ki.createElement("div", { className: "molstar-container" }, /* @__PURE__ */ ki.createElement("div", { className: "molstar", ref: n }));
}
function t3({ initialCode: n = "" }) {
  const t = Fw(), [e, i] = mo(t.codeAtom), [s] = mo(t.pyodideReadyAtom), [, o] = mo(t.executePyCodeAtom), [, u] = mo(t.initializePyodideAtom);
  Qt.useEffect(() => {
    n && !e && i(n), u();
  }, []), Qt.useEffect(() => {
    s && e && o();
  }, [s]);
  const c = ir.of([
    {
      key: "Alt-Enter",
      run: () => (o(), !0)
    }
  ]);
  return /* @__PURE__ */ ki.createElement("div", { className: "app-container" }, /* @__PURE__ */ ki.createElement("div", { className: "editor-container" }, /* @__PURE__ */ ki.createElement(
    pw,
    {
      value: e,
      extensions: [L5(), c],
      onChange: i
    }
  )), /* @__PURE__ */ ki.createElement("div", { className: "visualization-container" }, /* @__PURE__ */ ki.createElement(I5, null)));
}
function l3(n, t, e) {
  if (!n) return;
  C2.createRoot(n).render(
    Qt.createElement(
      K5,
      { initialCode: e },
      Qt.createElement(t3, { initialCode: e })
    )
  );
}
const e3 = {}, Ui = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: e3
}, Symbol.toStringTag, { value: "Module" }));
export {
  l3 as appInit,
  l3 as default
};
